

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 10:42:27 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2,minocg
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1,minocg
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1,minocg
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2,minocg
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1,minocg
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,minocg
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,minocg
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 2.10
    42                           ; Generated 31/07/2019 GMT
    43                           ; 
    44                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F45K20 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataBANK0
    77  0071FC                     __pidataBANK0:
    78                           	opt callstack 0
    79                           
    80                           ;initializer for _randx
    81  0071FC  0001               	dw	1
    82  0071FE  0000               	dw	0
    83                           
    84                           ;initializer for _m_tabMines
    85  007200  20                 	db	32
    86  007201  20                 	db	32
    87  007202  20                 	db	32
    88  007203  20                 	db	32
    89  007204  20                 	db	32
    90  007205  20                 	db	32
    91  007206  20                 	db	32
    92  007207  20                 	db	32
    93  007208  20                 	db	32
    94  007209  20                 	db	32
    95  00720A  20                 	db	32
    96  00720B  20                 	db	32
    97  00720C  20                 	db	32
    98  00720D  20                 	db	32
    99  00720E  20                 	db	32
   100  00720F  20                 	db	32
   101  007210  20                 	db	32
   102  007211  20                 	db	32
   103  007212  20                 	db	32
   104  007213  20                 	db	32
   105  007214  00                 	db	0
   106  007215  20                 	db	32
   107  007216  20                 	db	32
   108  007217  20                 	db	32
   109  007218  20                 	db	32
   110  007219  20                 	db	32
   111  00721A  20                 	db	32
   112  00721B  20                 	db	32
   113  00721C  20                 	db	32
   114  00721D  20                 	db	32
   115  00721E  20                 	db	32
   116  00721F  20                 	db	32
   117  007220  20                 	db	32
   118  007221  20                 	db	32
   119  007222  20                 	db	32
   120  007223  20                 	db	32
   121  007224  20                 	db	32
   122  007225  20                 	db	32
   123  007226  20                 	db	32
   124  007227  20                 	db	32
   125  007228  20                 	db	32
   126  007229  00                 	db	0
   127  00722A  20                 	db	32
   128  00722B  20                 	db	32
   129  00722C  20                 	db	32
   130  00722D  20                 	db	32
   131  00722E  20                 	db	32
   132  00722F  20                 	db	32
   133  007230  20                 	db	32
   134  007231  20                 	db	32
   135  007232  20                 	db	32
   136  007233  20                 	db	32
   137  007234  20                 	db	32
   138  007235  20                 	db	32
   139  007236  20                 	db	32
   140  007237  20                 	db	32
   141  007238  20                 	db	32
   142  007239  20                 	db	32
   143  00723A  20                 	db	32
   144  00723B  20                 	db	32
   145  00723C  20                 	db	32
   146  00723D  20                 	db	32
   147  00723E  00                 	db	0
   148  00723F  20                 	db	32
   149  007240  20                 	db	32
   150  007241  20                 	db	32
   151  007242  20                 	db	32
   152  007243  20                 	db	32
   153  007244  20                 	db	32
   154  007245  20                 	db	32
   155  007246  20                 	db	32
   156  007247  20                 	db	32
   157  007248  20                 	db	32
   158  007249  20                 	db	32
   159  00724A  20                 	db	32
   160  00724B  20                 	db	32
   161  00724C  20                 	db	32
   162  00724D  20                 	db	32
   163  00724E  20                 	db	32
   164  00724F  20                 	db	32
   165  007250  20                 	db	32
   166  007251  20                 	db	32
   167  007252  20                 	db	32
   168  007253  00                 	db	0
   169                           
   170                           	psect	idataBANK1
   171  006FE4                     __pidataBANK1:
   172                           	opt callstack 0
   173                           
   174                           ;initializer for _matCGRAM
   175  006FE4  08                 	db	8
   176  006FE5  04                 	db	4
   177  006FE6  04                 	db	4
   178  006FE7  0A                 	db	10
   179  006FE8  11                 	db	17
   180  006FE9  1F                 	db	31
   181  006FEA  11                 	db	17
   182  006FEB  00                 	db	0
   183  006FEC  00                 	db	0
   184  006FED  0E                 	db	14
   185  006FEE  1F                 	db	31
   186  006FEF  1F                 	db	31
   187  006FF0  1F                 	db	31
   188  006FF1  1F                 	db	31
   189  006FF2  0E                 	db	14
   190  006FF3  00                 	db	0
   191  006FF4  08                 	db	8
   192  006FF5  14                 	db	20
   193  006FF6  04                 	db	4
   194  006FF7  0E                 	db	14
   195  006FF8  1F                 	db	31
   196  006FF9  1F                 	db	31
   197  006FFA  1F                 	db	31
   198  006FFB  0E                 	db	14
   199  006FFC  0A                 	db	10
   200  006FFD  11                 	db	17
   201  006FFE  0A                 	db	10
   202  006FFF  0E                 	db	14
   203  007000  1B                 	db	27
   204  007001  0E                 	db	14
   205  007002  04                 	db	4
   206  007003  04                 	db	4
   207  007004  0A                 	db	10
   208  007005  0A                 	db	10
   209  007006  0A                 	db	10
   210  007007  0E                 	db	14
   211  007008  1B                 	db	27
   212  007009  11                 	db	17
   213  00700A  1F                 	db	31
   214  00700B  15                 	db	21
   215  00700C  04                 	db	4
   216  00700D  0A                 	db	10
   217  00700E  0E                 	db	14
   218  00700F  11                 	db	17
   219  007010  1F                 	db	31
   220  007011  10                 	db	16
   221  007012  0E                 	db	14
   222  007013  00                 	db	0
   223  007014  08                 	db	8
   224  007015  04                 	db	4
   225  007016  0E                 	db	14
   226  007017  01                 	db	1
   227  007018  0F                 	db	15
   228  007019  11                 	db	17
   229  00701A  0F                 	db	15
   230  00701B  00                 	db	0
   231  00701C  04                 	db	4
   232  00701D  0A                 	db	10
   233  00701E  0E                 	db	14
   234  00701F  01                 	db	1
   235  007020  0F                 	db	15
   236  007021  11                 	db	17
   237  007022  0F                 	db	15
   238  007023  00                 	db	0
   239  0000                     _TMR1	set	4046
   240  0000                     _RCREG	set	4014
   241  0000                     _TXREG	set	4013
   242  0000                     _RCSTAbits	set	4011
   243  0000                     _TXSTAbits	set	4012
   244  0000                     _BAUDCONbits	set	4024
   245  0000                     _SPBRG	set	4015
   246  0000                     _SPBRGH	set	4016
   247  0000                     _TRISCbits	set	3988
   248  0000                     _PORTAbits	set	3968
   249  0000                     _PORTD	set	3971
   250  0000                     _INTCONbits	set	4082
   251  0000                     _T0CONbits	set	4053
   252  0000                     _ADCON2bits	set	4032
   253  0000                     _ADCON1	set	4033
   254  0000                     _ANSELbits	set	3966
   255  0000                     _T1CONbits	set	4045
   256  0000                     _TRISA	set	3986
   257  0000                     _ANSEL	set	3966
   258  0000                     _TRISB	set	3987
   259  0000                     _ANSELH	set	3967
   260  0000                     _TRISD	set	3989
   261  0000                     _ADRESH	set	4036
   262  0000                     _ADCON0bits	set	4034
   263  0000                     _RCIF	set	31989
   264                           
   265                           ; #config settings
   266  0000                     
   267                           	psect	cinit
   268  007100                     __pcinit:
   269                           	opt callstack 0
   270  007100                     start_initialization:
   271                           	opt callstack 0
   272  007100                     __initialization:
   273                           	opt callstack 0
   274                           
   275                           ; Initialize objects allocated to BANK1 (64 bytes)
   276                           ; load TBLPTR registers with __pidataBANK1
   277  007100  0EE4               	movlw	low __pidataBANK1
   278  007102  6EF6               	movwf	tblptrl,c
   279  007104  0E6F               	movlw	high __pidataBANK1
   280  007106  6EF7               	movwf	tblptrh,c
   281  007108  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   282  00710A  6EF8               	movwf	tblptru,c
   283  00710C  EE01  F054         	lfsr	0,__pdataBANK1
   284  007110  EE10 F040          	lfsr	1,64
   285  007114                     copy_data0:
   286  007114  0009               	tblrd		*+
   287  007116  CFF5 FFEE          	movff	tablat,postinc0
   288  00711A  50E5               	movf	postdec1,w,c
   289  00711C  50E1               	movf	fsr1l,w,c
   290  00711E  E1FA               	bnz	copy_data0
   291                           
   292                           ; Initialize objects allocated to BANK0 (88 bytes)
   293                           ; load TBLPTR registers with __pidataBANK0
   294  007120  0EFC               	movlw	low __pidataBANK0
   295  007122  6EF6               	movwf	tblptrl,c
   296  007124  0E71               	movlw	high __pidataBANK0
   297  007126  6EF7               	movwf	tblptrh,c
   298  007128  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   299  00712A  6EF8               	movwf	tblptru,c
   300  00712C  EE00  F060         	lfsr	0,__pdataBANK0
   301  007130  EE10 F058          	lfsr	1,88
   302  007134                     copy_data1:
   303  007134  0009               	tblrd		*+
   304  007136  CFF5 FFEE          	movff	tablat,postinc0
   305  00713A  50E5               	movf	postdec1,w,c
   306  00713C  50E1               	movf	fsr1l,w,c
   307  00713E  E1FA               	bnz	copy_data1
   308                           
   309                           ; Clear objects allocated to BANK1 (84 bytes)
   310  007140  EE01  F000         	lfsr	0,__pbssBANK1
   311  007144  0E54               	movlw	84
   312  007146                     clear_0:
   313  007146  6AEE               	clrf	postinc0,c
   314  007148  06E8               	decf	wreg,f,c
   315  00714A  E1FD               	bnz	clear_0
   316  00714C                     end_of_initialization:
   317                           	opt callstack 0
   318  00714C                     __end_of__initialization:
   319                           	opt callstack 0
   320  00714C  0100               	movlb	0
   321  00714E  EF8A  F03B         	goto	_main	;jump to C main() function
   322                           
   323                           	psect	dataBANK0
   324  000060                     __pdataBANK0:
   325                           	opt callstack 0
   326  000060                     _randx:
   327                           	opt callstack 0
   328  000060                     	ds	4
   329  000064                     _m_tabMines:
   330                           	opt callstack 0
   331  000064                     	ds	84
   332                           
   333                           	psect	bssBANK1
   334  000100                     __pbssBANK1:
   335                           	opt callstack 0
   336  000100                     _m_tabVue:
   337                           	opt callstack 0
   338  000100                     	ds	84
   339                           
   340                           	psect	dataBANK1
   341  000154                     __pdataBANK1:
   342                           	opt callstack 0
   343  000154                     _matCGRAM:
   344                           	opt callstack 0
   345  000154                     	ds	64
   346                           
   347                           	psect	cstackBANK0
   348  0000B8                     __pcstackBANK0:
   349                           	opt callstack 0
   350  0000B8                     ??_getAnalog:
   351  0000B8                     ??_lcd_ecrireDonnees:
   352  0000B8                     ??_lcd_busy:
   353  0000B8                     ?___wmul:
   354                           	opt callstack 0
   355  0000B8                     ?___lmul:
   356                           	opt callstack 0
   357  0000B8                     ___wmul@multiplier:
   358                           	opt callstack 0
   359  0000B8                     srand@x:
   360                           	opt callstack 0
   361  0000B8                     ___lmul@multiplier:
   362                           	opt callstack 0
   363                           
   364                           ; 4 bytes @ 0x0
   365  0000B8                     	ds	1
   366  0000B9                     getAnalog@canal:
   367                           	opt callstack 0
   368  0000B9                     lcd_ecrireDonnees@donnee:
   369                           	opt callstack 0
   370  0000B9                     lcd_busy@adresse:
   371                           	opt callstack 0
   372                           
   373                           ; 1 bytes @ 0x1
   374  0000B9                     	ds	1
   375  0000BA                     ??_lcd_resetSequence:
   376  0000BA                     lcd_wrCom@commande:
   377                           	opt callstack 0
   378  0000BA                     lcd_wrData@caractere:
   379                           	opt callstack 0
   380  0000BA                     deplace@x:
   381                           	opt callstack 0
   382  0000BA                     ___wmul@multiplicand:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x2
   386  0000BA                     	ds	1
   387  0000BB                     ??_lcd_initCGRam:
   388  0000BB                     lcd_gotoXY@y:
   389                           	opt callstack 0
   390  0000BB                     lcd_ecritChar@car:
   391                           	opt callstack 0
   392                           
   393                           ; 1 bytes @ 0x3
   394  0000BB                     	ds	1
   395  0000BC                     lcd_gotoXY@x:
   396                           	opt callstack 0
   397  0000BC                     lcd_ecritChar@posRam:
   398                           	opt callstack 0
   399  0000BC                     deplace@y:
   400                           	opt callstack 0
   401  0000BC                     ___wmul@product:
   402                           	opt callstack 0
   403  0000BC                     ___lmul@multiplicand:
   404                           	opt callstack 0
   405                           
   406                           ; 4 bytes @ 0x4
   407  0000BC                     	ds	1
   408  0000BD                     lcd_initCGRam@i:
   409                           	opt callstack 0
   410                           
   411                           ; 1 bytes @ 0x5
   412  0000BD                     	ds	1
   413  0000BE                     ??_deplace:
   414  0000BE                     lcd_initCGRam@j:
   415                           	opt callstack 0
   416  0000BE                     calculToucheCombien@ligne:
   417                           	opt callstack 0
   418  0000BE                     lcd_putMessage@chaine:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x6
   422  0000BE                     	ds	1
   423  0000BF                     
   424                           ; 1 bytes @ 0x7
   425  0000BF                     	ds	1
   426  0000C0                     lcd_putMessage@j:
   427                           	opt callstack 0
   428  0000C0                     calculToucheCombien@colonne:
   429                           	opt callstack 0
   430  0000C0                     ___lmul@product:
   431                           	opt callstack 0
   432                           
   433                           ; 4 bytes @ 0x8
   434  0000C0                     	ds	1
   435  0000C1                     ??_initTabVue:
   436                           
   437                           ; 1 bytes @ 0x9
   438  0000C1                     	ds	1
   439  0000C2                     ??_calculToucheCombien:
   440                           
   441                           ; 1 bytes @ 0xA
   442  0000C2                     	ds	1
   443  0000C3                     initTabVue@j:
   444                           	opt callstack 0
   445                           
   446                           ; 2 bytes @ 0xB
   447  0000C3                     	ds	1
   448  0000C4                     ?_rand:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0xC
   452  0000C4                     	ds	1
   453  0000C5                     initTabVue@i:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0xD
   457  0000C5                     	ds	1
   458  0000C6                     ?___awmod:
   459                           	opt callstack 0
   460  0000C6                     ___awmod@dividend:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0xE
   464  0000C6                     	ds	1
   465  0000C7                     calculToucheCombien@countMine:
   466                           	opt callstack 0
   467  0000C7                     initTabVue@i_355:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0xF
   471  0000C7                     	ds	1
   472  0000C8                     ??_metToucheCombien:
   473  0000C8                     ___awmod@divisor:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x10
   477  0000C8                     	ds	2
   478  0000CA                     ___awmod@counter:
   479                           	opt callstack 0
   480                           
   481                           ; 1 bytes @ 0x12
   482  0000CA                     	ds	1
   483  0000CB                     metToucheCombien@i:
   484                           	opt callstack 0
   485  0000CB                     ___awmod@sign:
   486                           	opt callstack 0
   487                           
   488                           ; 1 bytes @ 0x13
   489  0000CB                     	ds	1
   490  0000CC                     metToucheCombien@j:
   491                           	opt callstack 0
   492  0000CC                     rempliMines@nb:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x14
   496  0000CC                     	ds	2
   497  0000CE                     ??_rempliMines:
   498                           
   499                           ; 1 bytes @ 0x16
   500  0000CE                     	ds	3
   501  0000D1                     rempliMines@i:
   502                           	opt callstack 0
   503                           
   504                           ; 1 bytes @ 0x19
   505  0000D1                     	ds	1
   506  0000D2                     rempliMines@x:
   507                           	opt callstack 0
   508                           
   509                           ; 1 bytes @ 0x1A
   510  0000D2                     	ds	1
   511  0000D3                     rempliMines@y:
   512                           	opt callstack 0
   513                           
   514                           ; 1 bytes @ 0x1B
   515  0000D3                     	ds	1
   516  0000D4                     ??_main:
   517                           
   518                           ; 1 bytes @ 0x1C
   519  0000D4                     	ds	1
   520  0000D5                     main@posY:
   521                           	opt callstack 0
   522                           
   523                           ; 1 bytes @ 0x1D
   524  0000D5                     	ds	1
   525  0000D6                     main@i:
   526                           	opt callstack 0
   527                           
   528                           ; 2 bytes @ 0x1E
   529  0000D6                     	ds	2
   530  0000D8                     main@posX:
   531                           	opt callstack 0
   532                           
   533                           ; 1 bytes @ 0x20
   534  0000D8                     	ds	1
   535                           
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 63 in file "main.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  i               2   30[BANK0 ] int 
   546 ;;  posX            1   32[BANK0 ] unsigned char 
   547 ;;  posY            1   29[BANK0 ] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   557 ;;      Params:         0       0       0       0       0       0       0
   558 ;;      Locals:         0       4       0       0       0       0       0
   559 ;;      Temps:          0       1       0       0       0       0       0
   560 ;;      Totals:         0       5       0       0       0       0       0
   561 ;;Total ram usage:        5 bytes
   562 ;; Hardware stack levels required when called:    6
   563 ;; This function calls:
   564 ;;		___wmul
   565 ;;		_deplace
   566 ;;		_initTabVue
   567 ;;		_initialisation
   568 ;;		_lcd_gotoXY
   569 ;;		_lcd_init
   570 ;;		_lcd_putMessage
   571 ;;		_metToucheCombien
   572 ;;		_rempliMines
   573 ;; This function is called by:
   574 ;;		Startup code after reset
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           	psect	text0
   579  007714                     __ptext0:
   580                           	opt callstack 0
   581  007714                     _main:
   582                           	opt callstack 25
   583  007714                     
   584                           ;main.c: 65: char posY=1;
   585  007714  0E01               	movlw	1
   586  007716  0100               	movlb	0	; force () banked
   587  007718  6FD5               	movwf	main@posY& (0+255),b
   588                           
   589                           ;main.c: 66: char posX=1;
   590  00771A  0E01               	movlw	1
   591  00771C  0100               	movlb	0	; force () banked
   592  00771E  6FD8               	movwf	main@posX& (0+255),b
   593  007720                     
   594                           ; BSR set to: 0
   595                           ;main.c: 68: initialisation();
   596  007720  EC33  F038         	call	_initialisation	;wreg free
   597  007724                     
   598                           ;main.c: 69: lcd_init();
   599  007724  ECAE  F037         	call	_lcd_init	;wreg free
   600  007728                     
   601                           ;main.c: 70: initTabVue();
   602  007728  ECB5  F03C         	call	_initTabVue	;wreg free
   603  00772C                     
   604                           ;main.c: 71: rempliMines(5);
   605  00772C  0E00               	movlw	0
   606  00772E  0100               	movlb	0	; force () banked
   607  007730  6FCD               	movwf	(rempliMines@nb+1)& (0+255),b
   608  007732  0E05               	movlw	5
   609  007734  6FCC               	movwf	rempliMines@nb& (0+255),b
   610  007736  EC1B  F03B         	call	_rempliMines	;wreg free
   611  00773A                     
   612                           ;main.c: 72: metToucheCombien();
   613  00773A  EC06  F03C         	call	_metToucheCombien	;wreg free
   614  00773E                     
   615                           ;main.c: 81: for(int i=0;i<4;i++)
   616  00773E  0E00               	movlw	0
   617  007740  0100               	movlb	0	; force () banked
   618  007742  6FD7               	movwf	(main@i+1)& (0+255),b
   619  007744  0E00               	movlw	0
   620  007746  6FD6               	movwf	main@i& (0+255),b
   621  007748                     
   622                           ; BSR set to: 0
   623  007748  0100               	movlb	0	; force () banked
   624  00774A  BFD7               	btfsc	(main@i+1)& (0+255),7,b
   625  00774C  EFB1  F03B         	goto	u1231
   626  007750  51D7               	movf	(main@i+1)& (0+255),w,b
   627  007752  E109               	bnz	u1230
   628  007754  0E04               	movlw	4
   629  007756  5DD6               	subwf	main@i& (0+255),w,b
   630  007758  A0D8               	btfss	status,0,c
   631  00775A  EFB1  F03B         	goto	u1231
   632  00775E  EFB3  F03B         	goto	u1230
   633  007762                     u1231:
   634  007762  EFB5  F03B         	goto	l2121
   635  007766                     u1230:
   636  007766  EFE5  F03B         	goto	l2129
   637  00776A                     l2121:
   638                           
   639                           ; BSR set to: 0
   640                           ;main.c: 82: {;main.c: 83: lcd_gotoXY(1,i+1);
   641  00776A  0100               	movlb	0	; force () banked
   642  00776C  29D6               	incf	main@i& (0+255),w,b
   643  00776E  0100               	movlb	0	; force () banked
   644  007770  6FBB               	movwf	lcd_gotoXY@y& (0+255),b
   645  007772  0E01               	movlw	1
   646  007774  ECCB  F039         	call	_lcd_gotoXY
   647  007778                     
   648                           ;main.c: 84: lcd_putMessage(m_tabMines[i]);
   649  007778  C0D6  F0B8         	movff	main@i,___wmul@multiplier
   650  00777C  C0D7  F0B9         	movff	main@i+1,___wmul@multiplier+1
   651  007780  0E00               	movlw	0
   652  007782  0100               	movlb	0	; force () banked
   653  007784  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
   654  007786  0E15               	movlw	21
   655  007788  6FBA               	movwf	___wmul@multiplicand& (0+255),b
   656  00778A  EC9A  F037         	call	___wmul	;wreg free
   657  00778E  0E64               	movlw	low _m_tabMines
   658  007790  0100               	movlb	0	; force () banked
   659  007792  25B8               	addwf	?___wmul& (0+255),w,b
   660  007794  0100               	movlb	0	; force () banked
   661  007796  6FBE               	movwf	lcd_putMessage@chaine& (0+255),b
   662  007798  0E00               	movlw	high _m_tabMines
   663  00779A  0100               	movlb	0	; force () banked
   664  00779C  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
   665  00779E  0100               	movlb	0	; force () banked
   666  0077A0  6FBF               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   667  0077A2  EC59  F038         	call	_lcd_putMessage	;wreg free
   668  0077A6  0100               	movlb	0	; force () banked
   669  0077A8  4BD6               	infsnz	main@i& (0+255),f,b
   670  0077AA  2BD7               	incf	(main@i+1)& (0+255),f,b
   671  0077AC                     
   672                           ; BSR set to: 0
   673  0077AC  0100               	movlb	0	; force () banked
   674  0077AE  BFD7               	btfsc	(main@i+1)& (0+255),7,b
   675  0077B0  EFE3  F03B         	goto	u1241
   676  0077B4  51D7               	movf	(main@i+1)& (0+255),w,b
   677  0077B6  E109               	bnz	u1240
   678  0077B8  0E04               	movlw	4
   679  0077BA  5DD6               	subwf	main@i& (0+255),w,b
   680  0077BC  A0D8               	btfss	status,0,c
   681  0077BE  EFE3  F03B         	goto	u1241
   682  0077C2  EFE5  F03B         	goto	u1240
   683  0077C6                     u1241:
   684  0077C6  EFB5  F03B         	goto	l2121
   685  0077CA                     u1240:
   686  0077CA                     l2129:
   687                           
   688                           ;main.c: 87: {;main.c: 88: deplace(&posX,&posY);
   689  0077CA  0ED8               	movlw	low main@posX
   690  0077CC  0100               	movlb	0	; force () banked
   691  0077CE  6FBA               	movwf	deplace@x& (0+255),b
   692  0077D0  0E00               	movlw	high main@posX
   693  0077D2  6FBB               	movwf	(deplace@x+1)& (0+255),b
   694  0077D4  0ED5               	movlw	low main@posY
   695  0077D6  0100               	movlb	0	; force () banked
   696  0077D8  6FBC               	movwf	deplace@y& (0+255),b
   697  0077DA  0E00               	movlw	high main@posY
   698  0077DC  6FBD               	movwf	(deplace@y+1)& (0+255),b
   699  0077DE  ECAE  F03A         	call	_deplace	;wreg free
   700  0077E2                     
   701                           ;main.c: 89: lcd_gotoXY(posX+1,posY+1);
   702  0077E2  0100               	movlb	0	; force () banked
   703  0077E4  29D5               	incf	main@posY& (0+255),w,b
   704  0077E6  0100               	movlb	0	; force () banked
   705  0077E8  6FBB               	movwf	lcd_gotoXY@y& (0+255),b
   706  0077EA  0100               	movlb	0	; force () banked
   707  0077EC  29D8               	incf	main@posX& (0+255),w,b
   708  0077EE  ECCB  F039         	call	_lcd_gotoXY
   709  0077F2                     
   710                           ;main.c: 90: _delay((unsigned long)((100)*(1000000/4000.0)));
   711  0077F2  0E21               	movlw	33
   712  0077F4  0100               	movlb	0	; force () banked
   713  0077F6  6FD4               	movwf	??_main& (0+255),b
   714  0077F8  0E76               	movlw	118
   715  0077FA                     u1257:
   716  0077FA  2EE8               	decfsz	wreg,f,c
   717  0077FC  D7FE               	bra	u1257
   718  0077FE  2FD4               	decfsz	??_main& (0+255),f,b
   719  007800  D7FC               	bra	u1257
   720  007802  F000               	nop	
   721  007804  EFE5  F03B         	goto	l2129
   722  007808  EF00  F000         	goto	start
   723  00780C                     __end_of_main:
   724                           	opt callstack 0
   725                           
   726 ;; *************** function _rempliMines *****************
   727 ;; Defined at:
   728 ;;		line 125 in file "main.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  nb              2   20[BANK0 ] int 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  i               1   25[BANK0 ] unsigned char 
   733 ;;  y               1   27[BANK0 ] unsigned char 
   734 ;;  x               1   26[BANK0 ] unsigned char 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   744 ;;      Params:         0       2       0       0       0       0       0
   745 ;;      Locals:         0       3       0       0       0       0       0
   746 ;;      Temps:          0       3       0       0       0       0       0
   747 ;;      Totals:         0       8       0       0       0       0       0
   748 ;;Total ram usage:        8 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    2
   751 ;; This function calls:
   752 ;;		___awmod
   753 ;;		_rand
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text1
   760  007636                     __ptext1:
   761                           	opt callstack 0
   762  007636                     _rempliMines:
   763                           	opt callstack 28
   764  007636                     
   765                           ;main.c: 127: char x;;main.c: 128: char y;;main.c: 129: for(char i=0;i<nb;i++)
   766  007636  0E00               	movlw	0
   767  007638  0100               	movlb	0	; force () banked
   768  00763A  6FD1               	movwf	rempliMines@i& (0+255),b
   769  00763C  EF71  F03B         	goto	l2037
   770  007640                     l2029:
   771                           
   772                           ; BSR set to: 0
   773                           ;main.c: 132: {;main.c: 133: y=rand()%4;
   774  007640  ECD3  F038         	call	_rand	;wreg free
   775  007644  0100               	movlb	0	; force () banked
   776  007646  51C4               	movf	?_rand& (0+255),w,b
   777  007648  0B03               	andlw	3
   778  00764A  0100               	movlb	0	; force () banked
   779  00764C  6FD3               	movwf	rempliMines@y& (0+255),b
   780                           
   781                           ;main.c: 134: x=rand()%20;
   782  00764E  ECD3  F038         	call	_rand	;wreg free
   783  007652  C0C4  F0C6         	movff	?_rand,___awmod@dividend
   784  007656  C0C5  F0C7         	movff	?_rand+1,___awmod@dividend+1
   785  00765A  0E00               	movlw	0
   786  00765C  0100               	movlb	0	; force () banked
   787  00765E  6FC9               	movwf	(___awmod@divisor+1)& (0+255),b
   788  007660  0E14               	movlw	20
   789  007662  6FC8               	movwf	___awmod@divisor& (0+255),b
   790  007664  EC55  F03A         	call	___awmod	;wreg free
   791  007668  0100               	movlb	0	; force () banked
   792  00766A  51C6               	movf	?___awmod& (0+255),w,b
   793  00766C  0100               	movlb	0	; force () banked
   794  00766E  6FD2               	movwf	rempliMines@x& (0+255),b
   795  007670                     
   796                           ; BSR set to: 0
   797                           ;main.c: 135: }while(m_tabMines[y][x]!=' ');
   798  007670  0100               	movlb	0	; force () banked
   799  007672  51D3               	movf	rempliMines@y& (0+255),w,b
   800  007674  0D15               	mullw	21
   801  007676  0E64               	movlw	low _m_tabMines
   802  007678  0100               	movlb	0	; force () banked
   803  00767A  6FCE               	movwf	??_rempliMines& (0+255),b
   804  00767C  0E00               	movlw	high _m_tabMines
   805  00767E  6FCF               	movwf	(??_rempliMines+1)& (0+255),b
   806  007680  50F3               	movf	243,w,c
   807  007682  27CE               	addwf	??_rempliMines& (0+255),f,b
   808  007684  50F4               	movf	244,w,c
   809  007686  23CF               	addwfc	(??_rempliMines+1)& (0+255),f,b
   810  007688  0100               	movlb	0	; force () banked
   811  00768A  51D2               	movf	rempliMines@x& (0+255),w,b
   812  00768C  0100               	movlb	0	; force () banked
   813  00768E  25CE               	addwf	??_rempliMines& (0+255),w,b
   814  007690  6ED9               	movwf	fsr2l,c
   815  007692  0100               	movlb	0	; force () banked
   816  007694  0E00               	movlw	0
   817  007696  0100               	movlb	0	; force () banked
   818  007698  21CF               	addwfc	(??_rempliMines+1)& (0+255),w,b
   819  00769A  6EDA               	movwf	fsr2h,c
   820  00769C  0E20               	movlw	32
   821  00769E  18DE               	xorwf	postinc2,w,c
   822  0076A0  A4D8               	btfss	status,2,c
   823  0076A2  EF55  F03B         	goto	u1081
   824  0076A6  EF57  F03B         	goto	u1080
   825  0076AA                     u1081:
   826  0076AA  EF20  F03B         	goto	l2029
   827  0076AE                     u1080:
   828  0076AE                     
   829                           ; BSR set to: 0
   830                           ;main.c: 136: m_tabMines[y][x]=2;
   831  0076AE  0100               	movlb	0	; force () banked
   832  0076B0  51D3               	movf	rempliMines@y& (0+255),w,b
   833  0076B2  0D15               	mullw	21
   834  0076B4  0E64               	movlw	low _m_tabMines
   835  0076B6  0100               	movlb	0	; force () banked
   836  0076B8  6FCE               	movwf	??_rempliMines& (0+255),b
   837  0076BA  0E00               	movlw	high _m_tabMines
   838  0076BC  6FCF               	movwf	(??_rempliMines+1)& (0+255),b
   839  0076BE  50F3               	movf	243,w,c
   840  0076C0  27CE               	addwf	??_rempliMines& (0+255),f,b
   841  0076C2  50F4               	movf	244,w,c
   842  0076C4  23CF               	addwfc	(??_rempliMines+1)& (0+255),f,b
   843  0076C6  0100               	movlb	0	; force () banked
   844  0076C8  51D2               	movf	rempliMines@x& (0+255),w,b
   845  0076CA  0100               	movlb	0	; force () banked
   846  0076CC  25CE               	addwf	??_rempliMines& (0+255),w,b
   847  0076CE  6ED9               	movwf	fsr2l,c
   848  0076D0  0100               	movlb	0	; force () banked
   849  0076D2  0E00               	movlw	0
   850  0076D4  0100               	movlb	0	; force () banked
   851  0076D6  21CF               	addwfc	(??_rempliMines+1)& (0+255),w,b
   852  0076D8  6EDA               	movwf	fsr2h,c
   853  0076DA  0E02               	movlw	2
   854  0076DC  6EDF               	movwf	indf2,c
   855  0076DE                     
   856                           ; BSR set to: 0
   857  0076DE  0100               	movlb	0	; force () banked
   858  0076E0  2BD1               	incf	rempliMines@i& (0+255),f,b
   859  0076E2                     l2037:
   860                           
   861                           ; BSR set to: 0
   862  0076E2  0100               	movlb	0	; force () banked
   863  0076E4  51D1               	movf	rempliMines@i& (0+255),w,b
   864  0076E6  0100               	movlb	0	; force () banked
   865  0076E8  6FCE               	movwf	??_rempliMines& (0+255),b
   866  0076EA  6BCF               	clrf	(??_rempliMines+1)& (0+255),b
   867  0076EC  0100               	movlb	0	; force () banked
   868  0076EE  51CC               	movf	rempliMines@nb& (0+255),w,b
   869  0076F0  0100               	movlb	0	; force () banked
   870  0076F2  5DCE               	subwf	??_rempliMines& (0+255),w,b
   871  0076F4  51CF               	movf	(??_rempliMines+1)& (0+255),w,b
   872  0076F6  0A80               	xorlw	128
   873  0076F8  6FD0               	movwf	(??_rempliMines+2)& (0+255),b
   874  0076FA  0100               	movlb	0	; force () banked
   875  0076FC  51CD               	movf	(rempliMines@nb+1)& (0+255),w,b
   876  0076FE  0A80               	xorlw	128
   877  007700  0100               	movlb	0	; force () banked
   878  007702  59D0               	subwfb	(??_rempliMines+2)& (0+255),w,b
   879  007704  A0D8               	btfss	status,0,c
   880  007706  EF87  F03B         	goto	u1091
   881  00770A  EF89  F03B         	goto	u1090
   882  00770E                     u1091:
   883  00770E  EF20  F03B         	goto	l2029
   884  007712                     u1090:
   885  007712                     
   886                           ; BSR set to: 0
   887  007712  0012               	return		;funcret
   888  007714                     __end_of_rempliMines:
   889                           	opt callstack 0
   890                           
   891 ;; *************** function _rand *****************
   892 ;; Defined at:
   893 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  2   12[BANK0 ] int 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   907 ;;      Params:         0       2       0       0       0       0       0
   908 ;;      Locals:         0       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0
   910 ;;      Totals:         0       2       0       0       0       0       0
   911 ;;Total ram usage:        2 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    1
   914 ;; This function calls:
   915 ;;		___lmul
   916 ;; This function is called by:
   917 ;;		_rempliMines
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text2
   922  0071A6                     __ptext2:
   923                           	opt callstack 0
   924  0071A6                     _rand:
   925                           	opt callstack 28
   926  0071A6  C060  F0B8         	movff	_randx,___lmul@multiplier
   927  0071AA  C061  F0B9         	movff	_randx+1,___lmul@multiplier+1
   928  0071AE  C062  F0BA         	movff	_randx+2,___lmul@multiplier+2
   929  0071B2  C063  F0BB         	movff	_randx+3,___lmul@multiplier+3
   930  0071B6  0E6D               	movlw	109
   931  0071B8  0100               	movlb	0	; () banked
   932  0071BA  6FBC               	movwf	___lmul@multiplicand& (0+255),b
   933  0071BC  0E4E               	movlw	78
   934  0071BE  6FBD               	movwf	(___lmul@multiplicand+1)& (0+255),b
   935  0071C0  0EC6               	movlw	198
   936  0071C2  6FBE               	movwf	(___lmul@multiplicand+2)& (0+255),b
   937  0071C4  0E41               	movlw	65
   938  0071C6  6FBF               	movwf	(___lmul@multiplicand+3)& (0+255),b
   939  0071C8  EC95  F039         	call	___lmul	;wreg free
   940  0071CC  C0B8  F060         	movff	?___lmul,_randx
   941  0071D0  C0B9  F061         	movff	?___lmul+1,_randx+1
   942  0071D4  C0BA  F062         	movff	?___lmul+2,_randx+2
   943  0071D8  C0BB  F063         	movff	?___lmul+3,_randx+3
   944  0071DC  0E39               	movlw	57
   945  0071DE  0100               	movlb	0	; () banked
   946  0071E0  2760               	addwf	_randx& (0+255),f,b
   947  0071E2  0E30               	movlw	48
   948  0071E4  2361               	addwfc	(_randx+1)& (0+255),f,b
   949  0071E6  0E00               	movlw	0
   950  0071E8  2362               	addwfc	(_randx+2)& (0+255),f,b
   951  0071EA  0E00               	movlw	0
   952  0071EC  2363               	addwfc	(_randx+3)& (0+255),f,b
   953  0071EE                     
   954                           ; BSR set to: 0
   955  0071EE  0EFF               	movlw	255
   956  0071F0  1562               	andwf	(_randx+2)& (0+255),w,b
   957  0071F2  6FC4               	movwf	?_rand& (0+255),b
   958  0071F4  0E7F               	movlw	127
   959  0071F6  1563               	andwf	(_randx+3)& (0+255),w,b
   960  0071F8  6FC5               	movwf	(?_rand+1)& (0+255),b
   961  0071FA                     
   962                           ; BSR set to: 0
   963  0071FA  0012               	return		;funcret
   964  0071FC                     __end_of_rand:
   965                           	opt callstack 0
   966                           
   967 ;; *************** function ___lmul *****************
   968 ;; Defined at:
   969 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  multiplier      4    0[BANK0 ] unsigned long 
   972 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;  product         4    8[BANK0 ] unsigned long 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  4    0[BANK0 ] unsigned long 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   984 ;;      Params:         0       8       0       0       0       0       0
   985 ;;      Locals:         0       4       0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0
   987 ;;      Totals:         0      12       0       0       0       0       0
   988 ;;Total ram usage:       12 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_rand
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text3
   998  00732A                     __ptext3:
   999                           	opt callstack 0
  1000  00732A                     ___lmul:
  1001                           	opt callstack 28
  1002  00732A  0E00               	movlw	0
  1003  00732C  0100               	movlb	0	; () banked
  1004  00732E  6FC0               	movwf	___lmul@product& (0+255),b
  1005  007330  0E00               	movlw	0
  1006  007332  6FC1               	movwf	(___lmul@product+1)& (0+255),b
  1007  007334  0E00               	movlw	0
  1008  007336  6FC2               	movwf	(___lmul@product+2)& (0+255),b
  1009  007338  0E00               	movlw	0
  1010  00733A  6FC3               	movwf	(___lmul@product+3)& (0+255),b
  1011  00733C                     l1749:
  1012                           
  1013                           ; BSR set to: 0
  1014  00733C  A1B8               	btfss	___lmul@multiplier& (0+255),0,b
  1015  00733E  EFA3  F039         	goto	u691
  1016  007342  EFA5  F039         	goto	u690
  1017  007346                     u691:
  1018  007346  EFAD  F039         	goto	l1753
  1019  00734A                     u690:
  1020  00734A                     
  1021                           ; BSR set to: 0
  1022  00734A  51BC               	movf	___lmul@multiplicand& (0+255),w,b
  1023  00734C  27C0               	addwf	___lmul@product& (0+255),f,b
  1024  00734E  51BD               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1025  007350  23C1               	addwfc	(___lmul@product+1)& (0+255),f,b
  1026  007352  51BE               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1027  007354  23C2               	addwfc	(___lmul@product+2)& (0+255),f,b
  1028  007356  51BF               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1029  007358  23C3               	addwfc	(___lmul@product+3)& (0+255),f,b
  1030  00735A                     l1753:
  1031                           
  1032                           ; BSR set to: 0
  1033  00735A  90D8               	bcf	status,0,c
  1034  00735C  37BC               	rlcf	___lmul@multiplicand& (0+255),f,b
  1035  00735E  37BD               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1036  007360  37BE               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1037  007362  37BF               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1038  007364                     
  1039                           ; BSR set to: 0
  1040  007364  90D8               	bcf	status,0,c
  1041  007366  33BB               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1042  007368  33BA               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1043  00736A  33B9               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1044  00736C  33B8               	rrcf	___lmul@multiplier& (0+255),f,b
  1045  00736E  51B8               	movf	___lmul@multiplier& (0+255),w,b
  1046  007370  11B9               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1047  007372  11BA               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1048  007374  11BB               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1049  007376  A4D8               	btfss	status,2,c
  1050  007378  EFC0  F039         	goto	u701
  1051  00737C  EFC2  F039         	goto	u700
  1052  007380                     u701:
  1053  007380  EF9E  F039         	goto	l1749
  1054  007384                     u700:
  1055  007384                     
  1056                           ; BSR set to: 0
  1057  007384  C0C0  F0B8         	movff	___lmul@product,?___lmul
  1058  007388  C0C1  F0B9         	movff	___lmul@product+1,?___lmul+1
  1059  00738C  C0C2  F0BA         	movff	___lmul@product+2,?___lmul+2
  1060  007390  C0C3  F0BB         	movff	___lmul@product+3,?___lmul+3
  1061  007394                     
  1062                           ; BSR set to: 0
  1063  007394  0012               	return		;funcret
  1064  007396                     __end_of___lmul:
  1065                           	opt callstack 0
  1066                           
  1067 ;; *************** function ___awmod *****************
  1068 ;; Defined at:
  1069 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  dividend        2   14[BANK0 ] int 
  1072 ;;  divisor         2   16[BANK0 ] int 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  sign            1   19[BANK0 ] unsigned char 
  1075 ;;  counter         1   18[BANK0 ] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  2   14[BANK0 ] int 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1085 ;;      Params:         0       4       0       0       0       0       0
  1086 ;;      Locals:         0       2       0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0
  1088 ;;      Totals:         0       6       0       0       0       0       0
  1089 ;;Total ram usage:        6 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_rempliMines
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text4
  1099  0074AA                     __ptext4:
  1100                           	opt callstack 0
  1101  0074AA                     ___awmod:
  1102                           	opt callstack 29
  1103  0074AA  0E00               	movlw	0
  1104  0074AC  0100               	movlb	0	; () banked
  1105  0074AE  6FCB               	movwf	___awmod@sign& (0+255),b
  1106  0074B0                     
  1107                           ; BSR set to: 0
  1108  0074B0  BFC7               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1109  0074B2  EF5F  F03A         	goto	u960
  1110  0074B6  EF5D  F03A         	goto	u961
  1111  0074BA                     u961:
  1112  0074BA  EF65  F03A         	goto	l1919
  1113  0074BE                     u960:
  1114  0074BE                     
  1115                           ; BSR set to: 0
  1116  0074BE  6DC6               	negf	___awmod@dividend& (0+255),b
  1117  0074C0  1FC7               	comf	(___awmod@dividend+1)& (0+255),f,b
  1118  0074C2  B0D8               	btfsc	status,0,c
  1119  0074C4  2BC7               	incf	(___awmod@dividend+1)& (0+255),f,b
  1120  0074C6                     
  1121                           ; BSR set to: 0
  1122  0074C6  0E01               	movlw	1
  1123  0074C8  6FCB               	movwf	___awmod@sign& (0+255),b
  1124  0074CA                     l1919:
  1125                           
  1126                           ; BSR set to: 0
  1127  0074CA  BFC9               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1128  0074CC  EF6C  F03A         	goto	u970
  1129  0074D0  EF6A  F03A         	goto	u971
  1130  0074D4                     u971:
  1131  0074D4  EF70  F03A         	goto	l1923
  1132  0074D8                     u970:
  1133  0074D8                     
  1134                           ; BSR set to: 0
  1135  0074D8  6DC8               	negf	___awmod@divisor& (0+255),b
  1136  0074DA  1FC9               	comf	(___awmod@divisor+1)& (0+255),f,b
  1137  0074DC  B0D8               	btfsc	status,0,c
  1138  0074DE  2BC9               	incf	(___awmod@divisor+1)& (0+255),f,b
  1139  0074E0                     l1923:
  1140                           
  1141                           ; BSR set to: 0
  1142  0074E0  51C8               	movf	___awmod@divisor& (0+255),w,b
  1143  0074E2  11C9               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1144  0074E4  B4D8               	btfsc	status,2,c
  1145  0074E6  EF77  F03A         	goto	u981
  1146  0074EA  EF79  F03A         	goto	u980
  1147  0074EE                     u981:
  1148  0074EE  EF9D  F03A         	goto	l1939
  1149  0074F2                     u980:
  1150  0074F2                     
  1151                           ; BSR set to: 0
  1152  0074F2  0E01               	movlw	1
  1153  0074F4  6FCA               	movwf	___awmod@counter& (0+255),b
  1154  0074F6  EF81  F03A         	goto	l1929
  1155  0074FA                     l1927:
  1156                           
  1157                           ; BSR set to: 0
  1158  0074FA  90D8               	bcf	status,0,c
  1159  0074FC  37C8               	rlcf	___awmod@divisor& (0+255),f,b
  1160  0074FE  37C9               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1161  007500  2BCA               	incf	___awmod@counter& (0+255),f,b
  1162  007502                     l1929:
  1163                           
  1164                           ; BSR set to: 0
  1165  007502  AFC9               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1166  007504  EF86  F03A         	goto	u991
  1167  007508  EF88  F03A         	goto	u990
  1168  00750C                     u991:
  1169  00750C  EF7D  F03A         	goto	l1927
  1170  007510                     u990:
  1171  007510                     l1931:
  1172                           
  1173                           ; BSR set to: 0
  1174  007510  51C8               	movf	___awmod@divisor& (0+255),w,b
  1175  007512  5DC6               	subwf	___awmod@dividend& (0+255),w,b
  1176  007514  51C9               	movf	(___awmod@divisor+1)& (0+255),w,b
  1177  007516  59C7               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1178  007518  A0D8               	btfss	status,0,c
  1179  00751A  EF91  F03A         	goto	u1001
  1180  00751E  EF93  F03A         	goto	u1000
  1181  007522                     u1001:
  1182  007522  EF97  F03A         	goto	l1935
  1183  007526                     u1000:
  1184  007526                     
  1185                           ; BSR set to: 0
  1186  007526  51C8               	movf	___awmod@divisor& (0+255),w,b
  1187  007528  5FC6               	subwf	___awmod@dividend& (0+255),f,b
  1188  00752A  51C9               	movf	(___awmod@divisor+1)& (0+255),w,b
  1189  00752C  5BC7               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1190  00752E                     l1935:
  1191                           
  1192                           ; BSR set to: 0
  1193  00752E  90D8               	bcf	status,0,c
  1194  007530  33C9               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1195  007532  33C8               	rrcf	___awmod@divisor& (0+255),f,b
  1196  007534                     
  1197                           ; BSR set to: 0
  1198  007534  2FCA               	decfsz	___awmod@counter& (0+255),f,b
  1199  007536  EF88  F03A         	goto	l1931
  1200  00753A                     l1939:
  1201                           
  1202                           ; BSR set to: 0
  1203  00753A  51CB               	movf	___awmod@sign& (0+255),w,b
  1204  00753C  B4D8               	btfsc	status,2,c
  1205  00753E  EFA3  F03A         	goto	u1011
  1206  007542  EFA5  F03A         	goto	u1010
  1207  007546                     u1011:
  1208  007546  EFA9  F03A         	goto	l1943
  1209  00754A                     u1010:
  1210  00754A                     
  1211                           ; BSR set to: 0
  1212  00754A  6DC6               	negf	___awmod@dividend& (0+255),b
  1213  00754C  1FC7               	comf	(___awmod@dividend+1)& (0+255),f,b
  1214  00754E  B0D8               	btfsc	status,0,c
  1215  007550  2BC7               	incf	(___awmod@dividend+1)& (0+255),f,b
  1216  007552                     l1943:
  1217                           
  1218                           ; BSR set to: 0
  1219  007552  C0C6  F0C6         	movff	___awmod@dividend,?___awmod
  1220  007556  C0C7  F0C7         	movff	___awmod@dividend+1,?___awmod+1
  1221  00755A                     
  1222                           ; BSR set to: 0
  1223  00755A  0012               	return		;funcret
  1224  00755C                     __end_of___awmod:
  1225                           	opt callstack 0
  1226                           
  1227 ;; *************** function _metToucheCombien *****************
  1228 ;; Defined at:
  1229 ;;		line 151 in file "main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  j               1   20[BANK0 ] unsigned char 
  1234 ;;  i               1   19[BANK0 ] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1244 ;;      Params:         0       0       0       0       0       0       0
  1245 ;;      Locals:         0       2       0       0       0       0       0
  1246 ;;      Temps:          0       3       0       0       0       0       0
  1247 ;;      Totals:         0       5       0       0       0       0       0
  1248 ;;Total ram usage:        5 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    2
  1251 ;; This function calls:
  1252 ;;		_calculToucheCombien
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text5
  1259  00780C                     __ptext5:
  1260                           	opt callstack 0
  1261  00780C                     _metToucheCombien:
  1262                           	opt callstack 28
  1263  00780C                     
  1264                           ;main.c: 153: for(char i=0;i<4;i++)
  1265  00780C  0E00               	movlw	0
  1266  00780E  0100               	movlb	0	; force () banked
  1267  007810  6FCB               	movwf	metToucheCombien@i& (0+255),b
  1268  007812                     
  1269                           ; BSR set to: 0
  1270  007812  0E03               	movlw	3
  1271  007814  0100               	movlb	0	; force () banked
  1272  007816  65CB               	cpfsgt	metToucheCombien@i& (0+255),b
  1273  007818  EF10  F03C         	goto	u1101
  1274  00781C  EF12  F03C         	goto	u1100
  1275  007820                     u1101:
  1276  007820  EF14  F03C         	goto	l2045
  1277  007824                     u1100:
  1278  007824  EFB4  F03C         	goto	l94
  1279  007828                     l2045:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 154: {;main.c: 155: for(char j=0;j<20;j++)
  1283  007828  0E00               	movlw	0
  1284  00782A  0100               	movlb	0	; force () banked
  1285  00782C  6FCC               	movwf	metToucheCombien@j& (0+255),b
  1286  00782E                     
  1287                           ; BSR set to: 0
  1288  00782E  0E13               	movlw	19
  1289  007830  0100               	movlb	0	; force () banked
  1290  007832  65CC               	cpfsgt	metToucheCombien@j& (0+255),b
  1291  007834  EF1E  F03C         	goto	u1111
  1292  007838  EF20  F03C         	goto	u1110
  1293  00783C                     u1111:
  1294  00783C  EF22  F03C         	goto	l2051
  1295  007840                     u1110:
  1296  007840  EFA9  F03C         	goto	l2063
  1297  007844                     l2051:
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;main.c: 156: {;main.c: 157: if(m_tabMines[i][j]!=2)
  1301  007844  0100               	movlb	0	; force () banked
  1302  007846  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1303  007848  0D15               	mullw	21
  1304  00784A  0E64               	movlw	low _m_tabMines
  1305  00784C  0100               	movlb	0	; force () banked
  1306  00784E  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1307  007850  0E00               	movlw	high _m_tabMines
  1308  007852  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1309  007854  50F3               	movf	243,w,c
  1310  007856  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1311  007858  50F4               	movf	244,w,c
  1312  00785A  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1313  00785C  0100               	movlb	0	; force () banked
  1314  00785E  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1315  007860  0100               	movlb	0	; force () banked
  1316  007862  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1317  007864  6ED9               	movwf	fsr2l,c
  1318  007866  0100               	movlb	0	; force () banked
  1319  007868  0E00               	movlw	0
  1320  00786A  0100               	movlb	0	; force () banked
  1321  00786C  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1322  00786E  6EDA               	movwf	fsr2h,c
  1323  007870  0E02               	movlw	2
  1324  007872  18DE               	xorwf	postinc2,w,c
  1325  007874  B4D8               	btfsc	status,2,c
  1326  007876  EF3F  F03C         	goto	u1121
  1327  00787A  EF41  F03C         	goto	u1120
  1328  00787E                     u1121:
  1329  00787E  EF9E  F03C         	goto	l2059
  1330  007882                     u1120:
  1331  007882                     
  1332                           ; BSR set to: 0
  1333                           ;main.c: 158: {;main.c: 159: m_tabMines[i][j]=(calculToucheCombien(i,j)+0x30);
  1334  007882  C0CB  F0BE         	movff	metToucheCombien@i,calculToucheCombien@ligne
  1335  007886  0100               	movlb	0	; force () banked
  1336  007888  6BBF               	clrf	(calculToucheCombien@ligne+1)& (0+255),b
  1337  00788A  C0CC  F0C0         	movff	metToucheCombien@j,calculToucheCombien@colonne
  1338  00788E  0100               	movlb	0	; force () banked
  1339  007890  6BC1               	clrf	(calculToucheCombien@colonne+1)& (0+255),b
  1340  007892  EC84  F03D         	call	_calculToucheCombien	;wreg free
  1341  007896  0100               	movlb	0	; force () banked
  1342  007898  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1343  00789A  0E30               	movlw	48
  1344  00789C  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1345  00789E  0100               	movlb	0	; force () banked
  1346  0078A0  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1347  0078A2  0D15               	mullw	21
  1348  0078A4  0E64               	movlw	low _m_tabMines
  1349  0078A6  0100               	movlb	0	; force () banked
  1350  0078A8  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1351  0078AA  0E00               	movlw	high _m_tabMines
  1352  0078AC  6FCA               	movwf	(??_metToucheCombien+2)& (0+255),b
  1353  0078AE  50F3               	movf	243,w,c
  1354  0078B0  27C9               	addwf	(??_metToucheCombien+1)& (0+255),f,b
  1355  0078B2  50F4               	movf	244,w,c
  1356  0078B4  23CA               	addwfc	(??_metToucheCombien+2)& (0+255),f,b
  1357  0078B6  0100               	movlb	0	; force () banked
  1358  0078B8  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1359  0078BA  0100               	movlb	0	; force () banked
  1360  0078BC  25C9               	addwf	(??_metToucheCombien+1)& (0+255),w,b
  1361  0078BE  6ED9               	movwf	fsr2l,c
  1362  0078C0  0100               	movlb	0	; force () banked
  1363  0078C2  0E00               	movlw	0
  1364  0078C4  0100               	movlb	0	; force () banked
  1365  0078C6  21CA               	addwfc	(??_metToucheCombien+2)& (0+255),w,b
  1366  0078C8  6EDA               	movwf	fsr2h,c
  1367  0078CA  C0C8  FFDF         	movff	??_metToucheCombien,indf2
  1368  0078CE                     
  1369                           ; BSR set to: 0
  1370                           ;main.c: 160: if(m_tabMines[i][j]==0x30)
  1371  0078CE  0100               	movlb	0	; force () banked
  1372  0078D0  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1373  0078D2  0D15               	mullw	21
  1374  0078D4  0E64               	movlw	low _m_tabMines
  1375  0078D6  0100               	movlb	0	; force () banked
  1376  0078D8  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1377  0078DA  0E00               	movlw	high _m_tabMines
  1378  0078DC  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1379  0078DE  50F3               	movf	243,w,c
  1380  0078E0  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1381  0078E2  50F4               	movf	244,w,c
  1382  0078E4  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1383  0078E6  0100               	movlb	0	; force () banked
  1384  0078E8  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1385  0078EA  0100               	movlb	0	; force () banked
  1386  0078EC  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1387  0078EE  6ED9               	movwf	fsr2l,c
  1388  0078F0  0100               	movlb	0	; force () banked
  1389  0078F2  0E00               	movlw	0
  1390  0078F4  0100               	movlb	0	; force () banked
  1391  0078F6  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1392  0078F8  6EDA               	movwf	fsr2h,c
  1393  0078FA  0E30               	movlw	48
  1394  0078FC  18DE               	xorwf	postinc2,w,c
  1395  0078FE  A4D8               	btfss	status,2,c
  1396  007900  EF84  F03C         	goto	u1131
  1397  007904  EF86  F03C         	goto	u1130
  1398  007908                     u1131:
  1399  007908  EF9E  F03C         	goto	l2059
  1400  00790C                     u1130:
  1401  00790C                     
  1402                           ; BSR set to: 0
  1403                           ;main.c: 161: {;main.c: 162: m_tabMines[i][j]=' ';
  1404  00790C  0100               	movlb	0	; force () banked
  1405  00790E  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1406  007910  0D15               	mullw	21
  1407  007912  0E64               	movlw	low _m_tabMines
  1408  007914  0100               	movlb	0	; force () banked
  1409  007916  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1410  007918  0E00               	movlw	high _m_tabMines
  1411  00791A  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1412  00791C  50F3               	movf	243,w,c
  1413  00791E  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1414  007920  50F4               	movf	244,w,c
  1415  007922  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1416  007924  0100               	movlb	0	; force () banked
  1417  007926  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1418  007928  0100               	movlb	0	; force () banked
  1419  00792A  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1420  00792C  6ED9               	movwf	fsr2l,c
  1421  00792E  0100               	movlb	0	; force () banked
  1422  007930  0E00               	movlw	0
  1423  007932  0100               	movlb	0	; force () banked
  1424  007934  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1425  007936  6EDA               	movwf	fsr2h,c
  1426  007938  0E20               	movlw	32
  1427  00793A  6EDF               	movwf	indf2,c
  1428  00793C                     l2059:
  1429                           
  1430                           ; BSR set to: 0
  1431  00793C  0100               	movlb	0	; force () banked
  1432  00793E  2BCC               	incf	metToucheCombien@j& (0+255),f,b
  1433  007940                     
  1434                           ; BSR set to: 0
  1435  007940  0E13               	movlw	19
  1436  007942  0100               	movlb	0	; force () banked
  1437  007944  65CC               	cpfsgt	metToucheCombien@j& (0+255),b
  1438  007946  EFA7  F03C         	goto	u1141
  1439  00794A  EFA9  F03C         	goto	u1140
  1440  00794E                     u1141:
  1441  00794E  EF22  F03C         	goto	l2051
  1442  007952                     u1140:
  1443  007952                     l2063:
  1444                           
  1445                           ; BSR set to: 0
  1446  007952  0100               	movlb	0	; force () banked
  1447  007954  2BCB               	incf	metToucheCombien@i& (0+255),f,b
  1448  007956                     
  1449                           ; BSR set to: 0
  1450  007956  0E03               	movlw	3
  1451  007958  0100               	movlb	0	; force () banked
  1452  00795A  65CB               	cpfsgt	metToucheCombien@i& (0+255),b
  1453  00795C  EFB2  F03C         	goto	u1151
  1454  007960  EFB4  F03C         	goto	u1150
  1455  007964                     u1151:
  1456  007964  EF14  F03C         	goto	l2045
  1457  007968                     u1150:
  1458  007968                     l94:
  1459                           
  1460                           ; BSR set to: 0
  1461  007968  0012               	return		;funcret
  1462  00796A                     __end_of_metToucheCombien:
  1463                           	opt callstack 0
  1464                           
  1465 ;; *************** function _calculToucheCombien *****************
  1466 ;; Defined at:
  1467 ;;		line 174 in file "main.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  ligne           2    6[BANK0 ] int 
  1470 ;;  colonne         2    8[BANK0 ] int 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  countMine       1   15[BANK0 ] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      unsigned char 
  1475 ;; Registers used:
  1476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1482 ;;      Params:         0       4       0       0       0       0       0
  1483 ;;      Locals:         0       1       0       0       0       0       0
  1484 ;;      Temps:          0       5       0       0       0       0       0
  1485 ;;      Totals:         0      10       0       0       0       0       0
  1486 ;;Total ram usage:       10 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    1
  1489 ;; This function calls:
  1490 ;;		___wmul
  1491 ;; This function is called by:
  1492 ;;		_metToucheCombien
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           	psect	text6
  1497  007B08                     __ptext6:
  1498                           	opt callstack 0
  1499  007B08                     _calculToucheCombien:
  1500                           	opt callstack 28
  1501  007B08                     
  1502                           ;main.c: 176: char countMine=0;
  1503  007B08  0E00               	movlw	0
  1504  007B0A  0100               	movlb	0	; force () banked
  1505  007B0C  6FC7               	movwf	calculToucheCombien@countMine& (0+255),b
  1506  007B0E                     
  1507                           ; BSR set to: 0
  1508                           ;main.c: 177: if((m_tabMines[ligne-1][colonne-1]==2)&&(ligne-1>=0)&&(colonne-1>=0))
  1509  007B0E  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1510  007B12  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1511  007B16  0E00               	movlw	0
  1512  007B18  0100               	movlb	0	; force () banked
  1513  007B1A  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1514  007B1C  0E15               	movlw	21
  1515  007B1E  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1516  007B20  EC9A  F037         	call	___wmul	;wreg free
  1517  007B24  0EEA               	movlw	234
  1518  007B26  0100               	movlb	0	; force () banked
  1519  007B28  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1520  007B2A  0EFF               	movlw	255
  1521  007B2C  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1522  007B2E  0E64               	movlw	low _m_tabMines
  1523  007B30  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1524  007B32  0E00               	movlw	high _m_tabMines
  1525  007B34  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1526  007B36  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1527  007B38  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1528  007B3A  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1529  007B3C  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1530  007B3E  0100               	movlb	0	; force () banked
  1531  007B40  51B8               	movf	?___wmul& (0+255),w,b
  1532  007B42  0100               	movlb	0	; force () banked
  1533  007B44  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1534  007B46  0100               	movlb	0	; force () banked
  1535  007B48  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1536  007B4A  0100               	movlb	0	; force () banked
  1537  007B4C  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1538  007B4E  0100               	movlb	0	; force () banked
  1539  007B50  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1540  007B52  0100               	movlb	0	; force () banked
  1541  007B54  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1542  007B56  6ED9               	movwf	fsr2l,c
  1543  007B58  0100               	movlb	0	; force () banked
  1544  007B5A  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1545  007B5C  0100               	movlb	0	; force () banked
  1546  007B5E  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1547  007B60  6EDA               	movwf	fsr2h,c
  1548  007B62  0E02               	movlw	2
  1549  007B64  18DE               	xorwf	postinc2,w,c
  1550  007B66  A4D8               	btfss	status,2,c
  1551  007B68  EFB8  F03D         	goto	u721
  1552  007B6C  EFBA  F03D         	goto	u720
  1553  007B70                     u721:
  1554  007B70  EFD6  F03D         	goto	l1797
  1555  007B74                     u720:
  1556  007B74                     
  1557                           ; BSR set to: 0
  1558  007B74  0EFF               	movlw	255
  1559  007B76  0100               	movlb	0	; force () banked
  1560  007B78  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1561  007B7A  0EFF               	movlw	255
  1562  007B7C  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1563  007B7E  0B80               	andlw	128
  1564  007B80  A4D8               	btfss	status,2,c
  1565  007B82  EFC5  F03D         	goto	u731
  1566  007B86  EFC7  F03D         	goto	u730
  1567  007B8A                     u731:
  1568  007B8A  EFD6  F03D         	goto	l1797
  1569  007B8E                     u730:
  1570  007B8E                     
  1571                           ; BSR set to: 0
  1572  007B8E  0EFF               	movlw	255
  1573  007B90  0100               	movlb	0	; force () banked
  1574  007B92  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1575  007B94  0EFF               	movlw	255
  1576  007B96  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1577  007B98  0B80               	andlw	128
  1578  007B9A  A4D8               	btfss	status,2,c
  1579  007B9C  EFD2  F03D         	goto	u741
  1580  007BA0  EFD4  F03D         	goto	u740
  1581  007BA4                     u741:
  1582  007BA4  EFD6  F03D         	goto	l1797
  1583  007BA8                     u740:
  1584  007BA8                     
  1585                           ; BSR set to: 0
  1586                           ;main.c: 178: {;main.c: 179: countMine++;
  1587  007BA8  0100               	movlb	0	; force () banked
  1588  007BAA  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1589  007BAC                     l1797:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 180: };main.c: 181: if((m_tabMines[ligne][colonne-1]==2)&&(colonne-1>=0))
  1593  007BAC  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1594  007BB0  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1595  007BB4  0E00               	movlw	0
  1596  007BB6  0100               	movlb	0	; force () banked
  1597  007BB8  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1598  007BBA  0E15               	movlw	21
  1599  007BBC  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1600  007BBE  EC9A  F037         	call	___wmul	;wreg free
  1601  007BC2  0EFF               	movlw	255
  1602  007BC4  0100               	movlb	0	; force () banked
  1603  007BC6  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1604  007BC8  0EFF               	movlw	255
  1605  007BCA  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1606  007BCC  0E64               	movlw	low _m_tabMines
  1607  007BCE  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1608  007BD0  0E00               	movlw	high _m_tabMines
  1609  007BD2  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1610  007BD4  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1611  007BD6  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1612  007BD8  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1613  007BDA  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1614  007BDC  0100               	movlb	0	; force () banked
  1615  007BDE  51B8               	movf	?___wmul& (0+255),w,b
  1616  007BE0  0100               	movlb	0	; force () banked
  1617  007BE2  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1618  007BE4  0100               	movlb	0	; force () banked
  1619  007BE6  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1620  007BE8  0100               	movlb	0	; force () banked
  1621  007BEA  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1622  007BEC  0100               	movlb	0	; force () banked
  1623  007BEE  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1624  007BF0  0100               	movlb	0	; force () banked
  1625  007BF2  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1626  007BF4  6ED9               	movwf	fsr2l,c
  1627  007BF6  0100               	movlb	0	; force () banked
  1628  007BF8  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1629  007BFA  0100               	movlb	0	; force () banked
  1630  007BFC  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1631  007BFE  6EDA               	movwf	fsr2h,c
  1632  007C00  0E02               	movlw	2
  1633  007C02  18DE               	xorwf	postinc2,w,c
  1634  007C04  A4D8               	btfss	status,2,c
  1635  007C06  EF07  F03E         	goto	u751
  1636  007C0A  EF09  F03E         	goto	u750
  1637  007C0E                     u751:
  1638  007C0E  EF18  F03E         	goto	l1803
  1639  007C12                     u750:
  1640  007C12                     
  1641                           ; BSR set to: 0
  1642  007C12  0EFF               	movlw	255
  1643  007C14  0100               	movlb	0	; force () banked
  1644  007C16  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1645  007C18  0EFF               	movlw	255
  1646  007C1A  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1647  007C1C  0B80               	andlw	128
  1648  007C1E  A4D8               	btfss	status,2,c
  1649  007C20  EF14  F03E         	goto	u761
  1650  007C24  EF16  F03E         	goto	u760
  1651  007C28                     u761:
  1652  007C28  EF18  F03E         	goto	l1803
  1653  007C2C                     u760:
  1654  007C2C                     
  1655                           ; BSR set to: 0
  1656                           ;main.c: 182: {;main.c: 183: countMine++;
  1657  007C2C  0100               	movlb	0	; force () banked
  1658  007C2E  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1659  007C30                     l1803:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 184: };main.c: 185: if((m_tabMines[ligne+1][colonne-1]==2)&&(colonne-1>=0)&&(li
      +                          gne+1<20))
  1663  007C30  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1664  007C34  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1665  007C38  0E00               	movlw	0
  1666  007C3A  0100               	movlb	0	; force () banked
  1667  007C3C  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1668  007C3E  0E15               	movlw	21
  1669  007C40  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1670  007C42  EC9A  F037         	call	___wmul	;wreg free
  1671  007C46  0E64               	movlw	low _m_tabMines
  1672  007C48  0100               	movlb	0	; force () banked
  1673  007C4A  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1674  007C4C  0E00               	movlw	high _m_tabMines
  1675  007C4E  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1676  007C50  0E14               	movlw	20
  1677  007C52  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1678  007C54  0E00               	movlw	0
  1679  007C56  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1680  007C58  0100               	movlb	0	; force () banked
  1681  007C5A  51B8               	movf	?___wmul& (0+255),w,b
  1682  007C5C  0100               	movlb	0	; force () banked
  1683  007C5E  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1684  007C60  0100               	movlb	0	; force () banked
  1685  007C62  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1686  007C64  0100               	movlb	0	; force () banked
  1687  007C66  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1688  007C68  0100               	movlb	0	; force () banked
  1689  007C6A  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1690  007C6C  0100               	movlb	0	; force () banked
  1691  007C6E  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  1692  007C70  6ED9               	movwf	fsr2l,c
  1693  007C72  0100               	movlb	0	; force () banked
  1694  007C74  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1695  007C76  0100               	movlb	0	; force () banked
  1696  007C78  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1697  007C7A  6EDA               	movwf	fsr2h,c
  1698  007C7C  0E02               	movlw	2
  1699  007C7E  18DE               	xorwf	postinc2,w,c
  1700  007C80  A4D8               	btfss	status,2,c
  1701  007C82  EF45  F03E         	goto	u771
  1702  007C86  EF47  F03E         	goto	u770
  1703  007C8A                     u771:
  1704  007C8A  EF6E  F03E         	goto	l1811
  1705  007C8E                     u770:
  1706  007C8E                     
  1707                           ; BSR set to: 0
  1708  007C8E  0EFF               	movlw	255
  1709  007C90  0100               	movlb	0	; force () banked
  1710  007C92  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1711  007C94  0EFF               	movlw	255
  1712  007C96  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1713  007C98  0B80               	andlw	128
  1714  007C9A  A4D8               	btfss	status,2,c
  1715  007C9C  EF52  F03E         	goto	u781
  1716  007CA0  EF54  F03E         	goto	u780
  1717  007CA4                     u781:
  1718  007CA4  EF6E  F03E         	goto	l1811
  1719  007CA8                     u780:
  1720  007CA8                     
  1721                           ; BSR set to: 0
  1722  007CA8  0E01               	movlw	1
  1723  007CAA  0100               	movlb	0	; force () banked
  1724  007CAC  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1725  007CAE  0100               	movlb	0	; force () banked
  1726  007CB0  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1727  007CB2  0E00               	movlw	0
  1728  007CB4  0100               	movlb	0	; force () banked
  1729  007CB6  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1730  007CB8  0100               	movlb	0	; force () banked
  1731  007CBA  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1732  007CBC  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1733  007CBE  EF6C  F03E         	goto	u790
  1734  007CC2  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1735  007CC4  E107               	bnz	u791
  1736  007CC6  0E14               	movlw	20
  1737  007CC8  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1738  007CCA  B0D8               	btfsc	status,0,c
  1739  007CCC  EF6A  F03E         	goto	u791
  1740  007CD0  EF6C  F03E         	goto	u790
  1741  007CD4                     u791:
  1742  007CD4  EF6E  F03E         	goto	l1811
  1743  007CD8                     u790:
  1744  007CD8                     
  1745                           ; BSR set to: 0
  1746                           ;main.c: 186: {;main.c: 187: countMine++;
  1747  007CD8  0100               	movlb	0	; force () banked
  1748  007CDA  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1749  007CDC                     l1811:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 188: };main.c: 189: if((m_tabMines[ligne-1][colonne]==2)&&(ligne-1>=0))
  1753  007CDC  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1754  007CE0  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1755  007CE4  0E00               	movlw	0
  1756  007CE6  0100               	movlb	0	; force () banked
  1757  007CE8  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1758  007CEA  0E15               	movlw	21
  1759  007CEC  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1760  007CEE  EC9A  F037         	call	___wmul	;wreg free
  1761  007CF2  0EEB               	movlw	235
  1762  007CF4  0100               	movlb	0	; force () banked
  1763  007CF6  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1764  007CF8  0EFF               	movlw	255
  1765  007CFA  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1766  007CFC  0E64               	movlw	low _m_tabMines
  1767  007CFE  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1768  007D00  0E00               	movlw	high _m_tabMines
  1769  007D02  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1770  007D04  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1771  007D06  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1772  007D08  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1773  007D0A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1774  007D0C  0100               	movlb	0	; force () banked
  1775  007D0E  51B8               	movf	?___wmul& (0+255),w,b
  1776  007D10  0100               	movlb	0	; force () banked
  1777  007D12  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1778  007D14  0100               	movlb	0	; force () banked
  1779  007D16  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1780  007D18  0100               	movlb	0	; force () banked
  1781  007D1A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1782  007D1C  0100               	movlb	0	; force () banked
  1783  007D1E  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1784  007D20  0100               	movlb	0	; force () banked
  1785  007D22  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1786  007D24  6ED9               	movwf	fsr2l,c
  1787  007D26  0100               	movlb	0	; force () banked
  1788  007D28  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1789  007D2A  0100               	movlb	0	; force () banked
  1790  007D2C  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1791  007D2E  6EDA               	movwf	fsr2h,c
  1792  007D30  0E02               	movlw	2
  1793  007D32  18DE               	xorwf	postinc2,w,c
  1794  007D34  A4D8               	btfss	status,2,c
  1795  007D36  EF9F  F03E         	goto	u801
  1796  007D3A  EFA1  F03E         	goto	u800
  1797  007D3E                     u801:
  1798  007D3E  EFB0  F03E         	goto	l1817
  1799  007D42                     u800:
  1800  007D42                     
  1801                           ; BSR set to: 0
  1802  007D42  0EFF               	movlw	255
  1803  007D44  0100               	movlb	0	; force () banked
  1804  007D46  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1805  007D48  0EFF               	movlw	255
  1806  007D4A  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1807  007D4C  0B80               	andlw	128
  1808  007D4E  A4D8               	btfss	status,2,c
  1809  007D50  EFAC  F03E         	goto	u811
  1810  007D54  EFAE  F03E         	goto	u810
  1811  007D58                     u811:
  1812  007D58  EFB0  F03E         	goto	l1817
  1813  007D5C                     u810:
  1814  007D5C                     
  1815                           ; BSR set to: 0
  1816                           ;main.c: 190: {;main.c: 191: countMine++;
  1817  007D5C  0100               	movlb	0	; force () banked
  1818  007D5E  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1819  007D60                     l1817:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 192: };main.c: 193: if((m_tabMines[ligne-1][colonne+1]==2)&&(ligne-1>=0)&&(colo
      +                          nne+1<20))
  1823  007D60  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1824  007D64  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1825  007D68  0E00               	movlw	0
  1826  007D6A  0100               	movlb	0	; force () banked
  1827  007D6C  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1828  007D6E  0E15               	movlw	21
  1829  007D70  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1830  007D72  EC9A  F037         	call	___wmul	;wreg free
  1831  007D76  0EEC               	movlw	236
  1832  007D78  0100               	movlb	0	; force () banked
  1833  007D7A  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1834  007D7C  0EFF               	movlw	255
  1835  007D7E  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1836  007D80  0E64               	movlw	low _m_tabMines
  1837  007D82  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1838  007D84  0E00               	movlw	high _m_tabMines
  1839  007D86  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1840  007D88  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1841  007D8A  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1842  007D8C  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1843  007D8E  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1844  007D90  0100               	movlb	0	; force () banked
  1845  007D92  51B8               	movf	?___wmul& (0+255),w,b
  1846  007D94  0100               	movlb	0	; force () banked
  1847  007D96  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1848  007D98  0100               	movlb	0	; force () banked
  1849  007D9A  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1850  007D9C  0100               	movlb	0	; force () banked
  1851  007D9E  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1852  007DA0  0100               	movlb	0	; force () banked
  1853  007DA2  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1854  007DA4  0100               	movlb	0	; force () banked
  1855  007DA6  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1856  007DA8  6ED9               	movwf	fsr2l,c
  1857  007DAA  0100               	movlb	0	; force () banked
  1858  007DAC  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1859  007DAE  0100               	movlb	0	; force () banked
  1860  007DB0  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1861  007DB2  6EDA               	movwf	fsr2h,c
  1862  007DB4  0E02               	movlw	2
  1863  007DB6  18DE               	xorwf	postinc2,w,c
  1864  007DB8  A4D8               	btfss	status,2,c
  1865  007DBA  EFE1  F03E         	goto	u821
  1866  007DBE  EFE3  F03E         	goto	u820
  1867  007DC2                     u821:
  1868  007DC2  EF0A  F03F         	goto	l1825
  1869  007DC6                     u820:
  1870  007DC6                     
  1871                           ; BSR set to: 0
  1872  007DC6  0EFF               	movlw	255
  1873  007DC8  0100               	movlb	0	; force () banked
  1874  007DCA  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1875  007DCC  0EFF               	movlw	255
  1876  007DCE  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1877  007DD0  0B80               	andlw	128
  1878  007DD2  A4D8               	btfss	status,2,c
  1879  007DD4  EFEE  F03E         	goto	u831
  1880  007DD8  EFF0  F03E         	goto	u830
  1881  007DDC                     u831:
  1882  007DDC  EF0A  F03F         	goto	l1825
  1883  007DE0                     u830:
  1884  007DE0                     
  1885                           ; BSR set to: 0
  1886  007DE0  0E01               	movlw	1
  1887  007DE2  0100               	movlb	0	; force () banked
  1888  007DE4  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1889  007DE6  0100               	movlb	0	; force () banked
  1890  007DE8  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1891  007DEA  0E00               	movlw	0
  1892  007DEC  0100               	movlb	0	; force () banked
  1893  007DEE  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1894  007DF0  0100               	movlb	0	; force () banked
  1895  007DF2  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1896  007DF4  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1897  007DF6  EF08  F03F         	goto	u840
  1898  007DFA  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1899  007DFC  E107               	bnz	u841
  1900  007DFE  0E14               	movlw	20
  1901  007E00  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1902  007E02  B0D8               	btfsc	status,0,c
  1903  007E04  EF06  F03F         	goto	u841
  1904  007E08  EF08  F03F         	goto	u840
  1905  007E0C                     u841:
  1906  007E0C  EF0A  F03F         	goto	l1825
  1907  007E10                     u840:
  1908  007E10                     
  1909                           ; BSR set to: 0
  1910                           ;main.c: 194: {;main.c: 195: countMine++;
  1911  007E10  0100               	movlb	0	; force () banked
  1912  007E12  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1913  007E14                     l1825:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 196: };main.c: 197: if((m_tabMines[ligne][colonne+1]==2)&&(colonne+1<20))
  1917  007E14  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1918  007E18  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1919  007E1C  0E00               	movlw	0
  1920  007E1E  0100               	movlb	0	; force () banked
  1921  007E20  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1922  007E22  0E15               	movlw	21
  1923  007E24  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1924  007E26  EC9A  F037         	call	___wmul	;wreg free
  1925  007E2A  0E64               	movlw	low _m_tabMines
  1926  007E2C  0100               	movlb	0	; force () banked
  1927  007E2E  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1928  007E30  0E00               	movlw	high _m_tabMines
  1929  007E32  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1930  007E34  0E01               	movlw	1
  1931  007E36  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1932  007E38  0E00               	movlw	0
  1933  007E3A  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1934  007E3C  0100               	movlb	0	; force () banked
  1935  007E3E  51B8               	movf	?___wmul& (0+255),w,b
  1936  007E40  0100               	movlb	0	; force () banked
  1937  007E42  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1938  007E44  0100               	movlb	0	; force () banked
  1939  007E46  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1940  007E48  0100               	movlb	0	; force () banked
  1941  007E4A  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1942  007E4C  0100               	movlb	0	; force () banked
  1943  007E4E  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1944  007E50  0100               	movlb	0	; force () banked
  1945  007E52  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  1946  007E54  6ED9               	movwf	fsr2l,c
  1947  007E56  0100               	movlb	0	; force () banked
  1948  007E58  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1949  007E5A  0100               	movlb	0	; force () banked
  1950  007E5C  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1951  007E5E  6EDA               	movwf	fsr2h,c
  1952  007E60  0E02               	movlw	2
  1953  007E62  18DE               	xorwf	postinc2,w,c
  1954  007E64  A4D8               	btfss	status,2,c
  1955  007E66  EF37  F03F         	goto	u851
  1956  007E6A  EF39  F03F         	goto	u850
  1957  007E6E                     u851:
  1958  007E6E  EF53  F03F         	goto	l1831
  1959  007E72                     u850:
  1960  007E72                     
  1961                           ; BSR set to: 0
  1962  007E72  0E01               	movlw	1
  1963  007E74  0100               	movlb	0	; force () banked
  1964  007E76  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1965  007E78  0100               	movlb	0	; force () banked
  1966  007E7A  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1967  007E7C  0E00               	movlw	0
  1968  007E7E  0100               	movlb	0	; force () banked
  1969  007E80  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1970  007E82  0100               	movlb	0	; force () banked
  1971  007E84  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1972  007E86  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1973  007E88  EF51  F03F         	goto	u860
  1974  007E8C  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1975  007E8E  E107               	bnz	u861
  1976  007E90  0E14               	movlw	20
  1977  007E92  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1978  007E94  B0D8               	btfsc	status,0,c
  1979  007E96  EF4F  F03F         	goto	u861
  1980  007E9A  EF51  F03F         	goto	u860
  1981  007E9E                     u861:
  1982  007E9E  EF53  F03F         	goto	l1831
  1983  007EA2                     u860:
  1984  007EA2                     
  1985                           ; BSR set to: 0
  1986                           ;main.c: 198: {;main.c: 199: countMine++;
  1987  007EA2  0100               	movlb	0	; force () banked
  1988  007EA4  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1989  007EA6                     l1831:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 200: };main.c: 201: if((m_tabMines[ligne+1][colonne+1]==2)&&(colonne+1<20)&&(li
      +                          gne+1<20))
  1993  007EA6  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1994  007EAA  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1995  007EAE  0E00               	movlw	0
  1996  007EB0  0100               	movlb	0	; force () banked
  1997  007EB2  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1998  007EB4  0E15               	movlw	21
  1999  007EB6  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2000  007EB8  EC9A  F037         	call	___wmul	;wreg free
  2001  007EBC  0E64               	movlw	low _m_tabMines
  2002  007EBE  0100               	movlb	0	; force () banked
  2003  007EC0  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2004  007EC2  0E00               	movlw	high _m_tabMines
  2005  007EC4  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2006  007EC6  0E16               	movlw	22
  2007  007EC8  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2008  007ECA  0E00               	movlw	0
  2009  007ECC  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2010  007ECE  0100               	movlb	0	; force () banked
  2011  007ED0  51B8               	movf	?___wmul& (0+255),w,b
  2012  007ED2  0100               	movlb	0	; force () banked
  2013  007ED4  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2014  007ED6  0100               	movlb	0	; force () banked
  2015  007ED8  51B9               	movf	(?___wmul+1)& (0+255),w,b
  2016  007EDA  0100               	movlb	0	; force () banked
  2017  007EDC  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2018  007EDE  0100               	movlb	0	; force () banked
  2019  007EE0  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  2020  007EE2  0100               	movlb	0	; force () banked
  2021  007EE4  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  2022  007EE6  6ED9               	movwf	fsr2l,c
  2023  007EE8  0100               	movlb	0	; force () banked
  2024  007EEA  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  2025  007EEC  0100               	movlb	0	; force () banked
  2026  007EEE  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  2027  007EF0  6EDA               	movwf	fsr2h,c
  2028  007EF2  0E02               	movlw	2
  2029  007EF4  18DE               	xorwf	postinc2,w,c
  2030  007EF6  A4D8               	btfss	status,2,c
  2031  007EF8  EF80  F03F         	goto	u871
  2032  007EFC  EF82  F03F         	goto	u870
  2033  007F00                     u871:
  2034  007F00  EFB4  F03F         	goto	l1839
  2035  007F04                     u870:
  2036  007F04                     
  2037                           ; BSR set to: 0
  2038  007F04  0E01               	movlw	1
  2039  007F06  0100               	movlb	0	; force () banked
  2040  007F08  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  2041  007F0A  0100               	movlb	0	; force () banked
  2042  007F0C  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2043  007F0E  0E00               	movlw	0
  2044  007F10  0100               	movlb	0	; force () banked
  2045  007F12  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  2046  007F14  0100               	movlb	0	; force () banked
  2047  007F16  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2048  007F18  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  2049  007F1A  EF9A  F03F         	goto	u880
  2050  007F1E  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2051  007F20  E107               	bnz	u881
  2052  007F22  0E14               	movlw	20
  2053  007F24  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  2054  007F26  B0D8               	btfsc	status,0,c
  2055  007F28  EF98  F03F         	goto	u881
  2056  007F2C  EF9A  F03F         	goto	u880
  2057  007F30                     u881:
  2058  007F30  EFB4  F03F         	goto	l1839
  2059  007F34                     u880:
  2060  007F34                     
  2061                           ; BSR set to: 0
  2062  007F34  0E01               	movlw	1
  2063  007F36  0100               	movlb	0	; force () banked
  2064  007F38  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  2065  007F3A  0100               	movlb	0	; force () banked
  2066  007F3C  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2067  007F3E  0E00               	movlw	0
  2068  007F40  0100               	movlb	0	; force () banked
  2069  007F42  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  2070  007F44  0100               	movlb	0	; force () banked
  2071  007F46  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2072  007F48  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  2073  007F4A  EFB2  F03F         	goto	u890
  2074  007F4E  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2075  007F50  E107               	bnz	u891
  2076  007F52  0E14               	movlw	20
  2077  007F54  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  2078  007F56  B0D8               	btfsc	status,0,c
  2079  007F58  EFB0  F03F         	goto	u891
  2080  007F5C  EFB2  F03F         	goto	u890
  2081  007F60                     u891:
  2082  007F60  EFB4  F03F         	goto	l1839
  2083  007F64                     u890:
  2084  007F64                     
  2085                           ; BSR set to: 0
  2086                           ;main.c: 202: {;main.c: 203: countMine++;
  2087  007F64  0100               	movlb	0	; force () banked
  2088  007F66  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  2089  007F68                     l1839:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 204: };main.c: 205: if((m_tabMines[ligne+1][colonne]==2)&&(ligne+1<20))
  2093  007F68  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  2094  007F6C  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  2095  007F70  0E00               	movlw	0
  2096  007F72  0100               	movlb	0	; force () banked
  2097  007F74  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2098  007F76  0E15               	movlw	21
  2099  007F78  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2100  007F7A  EC9A  F037         	call	___wmul	;wreg free
  2101  007F7E  0E64               	movlw	low _m_tabMines
  2102  007F80  0100               	movlb	0	; force () banked
  2103  007F82  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2104  007F84  0E00               	movlw	high _m_tabMines
  2105  007F86  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2106  007F88  0E15               	movlw	21
  2107  007F8A  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2108  007F8C  0E00               	movlw	0
  2109  007F8E  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2110  007F90  0100               	movlb	0	; force () banked
  2111  007F92  51B8               	movf	?___wmul& (0+255),w,b
  2112  007F94  0100               	movlb	0	; force () banked
  2113  007F96  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2114  007F98  0100               	movlb	0	; force () banked
  2115  007F9A  51B9               	movf	(?___wmul+1)& (0+255),w,b
  2116  007F9C  0100               	movlb	0	; force () banked
  2117  007F9E  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2118  007FA0  0100               	movlb	0	; force () banked
  2119  007FA2  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  2120  007FA4  0100               	movlb	0	; force () banked
  2121  007FA6  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  2122  007FA8  6ED9               	movwf	fsr2l,c
  2123  007FAA  0100               	movlb	0	; force () banked
  2124  007FAC  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  2125  007FAE  0100               	movlb	0	; force () banked
  2126  007FB0  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  2127  007FB2  6EDA               	movwf	fsr2h,c
  2128  007FB4  0E02               	movlw	2
  2129  007FB6  18DE               	xorwf	postinc2,w,c
  2130  007FB8  A4D8               	btfss	status,2,c
  2131  007FBA  EFE1  F03F         	goto	u901
  2132  007FBE  EFE3  F03F         	goto	u900
  2133  007FC2                     u901:
  2134  007FC2  EFFD  F03F         	goto	l1845
  2135  007FC6                     u900:
  2136  007FC6                     
  2137                           ; BSR set to: 0
  2138  007FC6  0E01               	movlw	1
  2139  007FC8  0100               	movlb	0	; force () banked
  2140  007FCA  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  2141  007FCC  0100               	movlb	0	; force () banked
  2142  007FCE  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2143  007FD0  0E00               	movlw	0
  2144  007FD2  0100               	movlb	0	; force () banked
  2145  007FD4  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  2146  007FD6  0100               	movlb	0	; force () banked
  2147  007FD8  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2148  007FDA  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  2149  007FDC  EFFB  F03F         	goto	u910
  2150  007FE0  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2151  007FE2  E107               	bnz	u911
  2152  007FE4  0E14               	movlw	20
  2153  007FE6  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  2154  007FE8  B0D8               	btfsc	status,0,c
  2155  007FEA  EFF9  F03F         	goto	u911
  2156  007FEE  EFFB  F03F         	goto	u910
  2157  007FF2                     u911:
  2158  007FF2  EFFD  F03F         	goto	l1845
  2159  007FF6                     u910:
  2160  007FF6                     
  2161                           ; BSR set to: 0
  2162                           ;main.c: 206: {;main.c: 207: countMine++;
  2163  007FF6  0100               	movlb	0	; force () banked
  2164  007FF8  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  2165  007FFA                     l1845:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 208: };main.c: 209: return countMine;
  2169  007FFA  0100               	movlb	0	; force () banked
  2170  007FFC  51C7               	movf	calculToucheCombien@countMine& (0+255),w,b
  2171  007FFE                     
  2172                           ; BSR set to: 0
  2173  007FFE  0012               	return		;funcret
  2174  008000                     __end_of_calculToucheCombien:
  2175                           	opt callstack 0
  2176                           
  2177 ;; *************** function _lcd_init *****************
  2178 ;; Defined at:
  2179 ;;		line 300 in file "Lcd4Lignes.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         0       0       0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0
  2196 ;;      Totals:         0       0       0       0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    5
  2200 ;; This function calls:
  2201 ;;		_lcd_initCGRam
  2202 ;;		_lcd_resetSequence
  2203 ;;		_lcd_wrCom
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text7
  2210  006F5C                     __ptext7:
  2211                           	opt callstack 0
  2212  006F5C                     _lcd_init:
  2213                           	opt callstack 25
  2214  006F5C                     
  2215                           ;Lcd4Lignes.c: 303: lcd_resetSequence();
  2216  006F5C  EC2A  F039         	call	_lcd_resetSequence	;wreg free
  2217                           
  2218                           ;Lcd4Lignes.c: 304: lcd_wrCom(0x28);
  2219  006F60  0E28               	movlw	40
  2220  006F62  EC5F  F039         	call	_lcd_wrCom
  2221                           
  2222                           ;Lcd4Lignes.c: 305: lcd_wrCom(0x0F);
  2223  006F66  0E0F               	movlw	15
  2224  006F68  EC5F  F039         	call	_lcd_wrCom
  2225                           
  2226                           ;Lcd4Lignes.c: 306: lcd_wrCom(0x01);
  2227  006F6C  0E01               	movlw	1
  2228  006F6E  EC5F  F039         	call	_lcd_wrCom
  2229                           
  2230                           ;Lcd4Lignes.c: 307: lcd_wrCom(0x06);
  2231  006F72  0E06               	movlw	6
  2232  006F74  EC5F  F039         	call	_lcd_wrCom
  2233                           
  2234                           ;Lcd4Lignes.c: 308: lcd_wrCom(0x80);
  2235  006F78  0E80               	movlw	128
  2236  006F7A  EC5F  F039         	call	_lcd_wrCom
  2237  006F7E                     
  2238                           ;Lcd4Lignes.c: 309: lcd_initCGRam();
  2239  006F7E  EC04  F03A         	call	_lcd_initCGRam	;wreg free
  2240  006F82  0012               	return		;funcret
  2241  006F84                     __end_of_lcd_init:
  2242                           	opt callstack 0
  2243                           
  2244 ;; *************** function _lcd_resetSequence *****************
  2245 ;; Defined at:
  2246 ;;		line 263 in file "Lcd4Lignes.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, status,2, status,0, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2260 ;;      Params:         0       0       0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0
  2262 ;;      Temps:          0       1       0       0       0       0       0
  2263 ;;      Totals:         0       1       0       0       0       0       0
  2264 ;;Total ram usage:        1 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    1
  2267 ;; This function calls:
  2268 ;;		_lcd_ecrireDonnees
  2269 ;;		_lcd_strobeEnableBit
  2270 ;; This function is called by:
  2271 ;;		_lcd_init
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text8
  2276  007254                     __ptext8:
  2277                           	opt callstack 0
  2278  007254                     _lcd_resetSequence:
  2279                           	opt callstack 28
  2280  007254                     
  2281                           ;Lcd4Lignes.c: 268: TRISD = 0b00000000;
  2282  007254  0E00               	movlw	0
  2283  007256  6E95               	movwf	149,c	;volatile
  2284  007258                     
  2285                           ;Lcd4Lignes.c: 270: _delay((unsigned long)((40)*(1000000/4000.0)));
  2286  007258  0E0D               	movlw	13
  2287  00725A  0100               	movlb	0	; force () banked
  2288  00725C  6FBA               	movwf	??_lcd_resetSequence& (0+255),b
  2289  00725E  0EFB               	movlw	251
  2290  007260                     u1267:
  2291  007260  2EE8               	decfsz	wreg,f,c
  2292  007262  D7FE               	bra	u1267
  2293  007264  2FBA               	decfsz	??_lcd_resetSequence& (0+255),f,b
  2294  007266  D7FC               	bra	u1267
  2295  007268  F000 F000          	nop2	
  2296  00726C                     
  2297                           ;Lcd4Lignes.c: 271: PORTAbits.RA0 = 0;
  2298  00726C  9080               	bcf	128,0,c	;volatile
  2299  00726E                     
  2300                           ;Lcd4Lignes.c: 272: PORTAbits.RA1 = 0;
  2301  00726E  9280               	bcf	128,1,c	;volatile
  2302  007270                     
  2303                           ;Lcd4Lignes.c: 274: lcd_ecrireDonnees(0x03);
  2304  007270  0E03               	movlw	3
  2305  007272  EC8C  F037         	call	_lcd_ecrireDonnees
  2306  007276                     
  2307                           ;Lcd4Lignes.c: 275: lcd_strobeEnableBit();
  2308  007276  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  2309  00727A                     
  2310                           ;Lcd4Lignes.c: 276: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2311  00727A  0E03               	movlw	3
  2312  00727C                     u1277:
  2313  00727C  2EE8               	decfsz	wreg,f,c
  2314  00727E  D7FE               	bra	u1277
  2315  007280  F000               	nop	
  2316  007282                     
  2317                           ;Lcd4Lignes.c: 279: lcd_ecrireDonnees(0x03);
  2318  007282  0E03               	movlw	3
  2319  007284  EC8C  F037         	call	_lcd_ecrireDonnees
  2320  007288                     
  2321                           ;Lcd4Lignes.c: 280: lcd_strobeEnableBit();
  2322  007288  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  2323  00728C                     
  2324                           ;Lcd4Lignes.c: 281: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2325  00728C  0E03               	movlw	3
  2326  00728E                     u1287:
  2327  00728E  2EE8               	decfsz	wreg,f,c
  2328  007290  D7FE               	bra	u1287
  2329  007292  F000               	nop	
  2330  007294                     
  2331                           ;Lcd4Lignes.c: 283: lcd_ecrireDonnees(0x03);
  2332  007294  0E03               	movlw	3
  2333  007296  EC8C  F037         	call	_lcd_ecrireDonnees
  2334  00729A                     
  2335                           ;Lcd4Lignes.c: 284: lcd_strobeEnableBit();
  2336  00729A  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  2337  00729E                     
  2338                           ;Lcd4Lignes.c: 285: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2339  00729E  0E03               	movlw	3
  2340  0072A0                     u1297:
  2341  0072A0  2EE8               	decfsz	wreg,f,c
  2342  0072A2  D7FE               	bra	u1297
  2343  0072A4  F000               	nop	
  2344  0072A6                     
  2345                           ;Lcd4Lignes.c: 287: lcd_ecrireDonnees(0x02);
  2346  0072A6  0E02               	movlw	2
  2347  0072A8  EC8C  F037         	call	_lcd_ecrireDonnees
  2348  0072AC                     
  2349                           ;Lcd4Lignes.c: 288: lcd_strobeEnableBit();
  2350  0072AC  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  2351  0072B0                     
  2352                           ;Lcd4Lignes.c: 289: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2353  0072B0  0E03               	movlw	3
  2354  0072B2                     u1307:
  2355  0072B2  2EE8               	decfsz	wreg,f,c
  2356  0072B4  D7FE               	bra	u1307
  2357  0072B6  F000               	nop	
  2358  0072B8                     
  2359                           ;Lcd4Lignes.c: 291: TRISD = 0b00001111;
  2360  0072B8  0E0F               	movlw	15
  2361  0072BA  6E95               	movwf	149,c	;volatile
  2362  0072BC  0012               	return		;funcret
  2363  0072BE                     __end_of_lcd_resetSequence:
  2364                           	opt callstack 0
  2365                           
  2366 ;; *************** function _lcd_initCGRam *****************
  2367 ;; Defined at:
  2368 ;;		line 459 in file "Lcd4Lignes.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  j               1    6[BANK0 ] unsigned char 
  2373 ;;  i               1    5[BANK0 ] unsigned char 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      void 
  2376 ;; Registers used:
  2377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2383 ;;      Params:         0       0       0       0       0       0       0
  2384 ;;      Locals:         0       2       0       0       0       0       0
  2385 ;;      Temps:          0       2       0       0       0       0       0
  2386 ;;      Totals:         0       4       0       0       0       0       0
  2387 ;;Total ram usage:        4 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    4
  2390 ;; This function calls:
  2391 ;;		_lcd_curseurHome
  2392 ;;		_lcd_wrCom
  2393 ;;		_lcd_wrData
  2394 ;; This function is called by:
  2395 ;;		_lcd_init
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text9
  2400  007408                     __ptext9:
  2401                           	opt callstack 0
  2402  007408                     _lcd_initCGRam:
  2403                           	opt callstack 25
  2404  007408                     
  2405                           ;Lcd4Lignes.c: 461: char i,j;;Lcd4Lignes.c: 463: lcd_wrCom(0x40);
  2406  007408  0E40               	movlw	64
  2407  00740A  EC5F  F039         	call	_lcd_wrCom
  2408  00740E                     
  2409                           ;Lcd4Lignes.c: 464: for(i=0;i<8;i++)
  2410  00740E  0E00               	movlw	0
  2411  007410  0100               	movlb	0	; force () banked
  2412  007412  6FBD               	movwf	lcd_initCGRam@i& (0+255),b
  2413  007414                     
  2414                           ; BSR set to: 0
  2415  007414  0E07               	movlw	7
  2416  007416  0100               	movlb	0	; force () banked
  2417  007418  65BD               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2418  00741A  EF11  F03A         	goto	u921
  2419  00741E  EF13  F03A         	goto	u920
  2420  007422                     u921:
  2421  007422  EF15  F03A         	goto	l1893
  2422  007426                     u920:
  2423  007426  EF52  F03A         	goto	l1909
  2424  00742A                     l1893:
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;Lcd4Lignes.c: 465: {;Lcd4Lignes.c: 466: for(j=0;j<8;j++)
  2428  00742A  0E00               	movlw	0
  2429  00742C  0100               	movlb	0	; force () banked
  2430  00742E  6FBE               	movwf	lcd_initCGRam@j& (0+255),b
  2431  007430                     
  2432                           ; BSR set to: 0
  2433  007430  0E07               	movlw	7
  2434  007432  0100               	movlb	0	; force () banked
  2435  007434  65BE               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2436  007436  EF1F  F03A         	goto	u931
  2437  00743A  EF21  F03A         	goto	u930
  2438  00743E                     u931:
  2439  00743E  EF23  F03A         	goto	l1899
  2440  007442                     u930:
  2441  007442  EF47  F03A         	goto	l1905
  2442  007446                     l1899:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;Lcd4Lignes.c: 467: lcd_wrData(matCGRAM[i][j]);
  2446  007446  0100               	movlb	0	; force () banked
  2447  007448  51BD               	movf	lcd_initCGRam@i& (0+255),w,b
  2448  00744A  0D08               	mullw	8
  2449  00744C  0E54               	movlw	low _matCGRAM
  2450  00744E  0100               	movlb	0	; force () banked
  2451  007450  6FBB               	movwf	??_lcd_initCGRam& (0+255),b
  2452  007452  0E01               	movlw	high _matCGRAM
  2453  007454  6FBC               	movwf	(??_lcd_initCGRam+1)& (0+255),b
  2454  007456  50F3               	movf	243,w,c
  2455  007458  27BB               	addwf	??_lcd_initCGRam& (0+255),f,b
  2456  00745A  50F4               	movf	244,w,c
  2457  00745C  23BC               	addwfc	(??_lcd_initCGRam+1)& (0+255),f,b
  2458  00745E  0100               	movlb	0	; force () banked
  2459  007460  51BE               	movf	lcd_initCGRam@j& (0+255),w,b
  2460  007462  0100               	movlb	0	; force () banked
  2461  007464  25BB               	addwf	??_lcd_initCGRam& (0+255),w,b
  2462  007466  6ED9               	movwf	fsr2l,c
  2463  007468  0100               	movlb	0	; force () banked
  2464  00746A  0E00               	movlw	0
  2465  00746C  0100               	movlb	0	; force () banked
  2466  00746E  21BC               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
  2467  007470  6EDA               	movwf	fsr2h,c
  2468  007472  50DF               	movf	indf2,w,c
  2469  007474  ECD8  F037         	call	_lcd_wrData
  2470  007478  0100               	movlb	0	; force () banked
  2471  00747A  2BBE               	incf	lcd_initCGRam@j& (0+255),f,b
  2472  00747C                     
  2473                           ; BSR set to: 0
  2474  00747C  0E07               	movlw	7
  2475  00747E  0100               	movlb	0	; force () banked
  2476  007480  65BE               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2477  007482  EF45  F03A         	goto	u941
  2478  007486  EF47  F03A         	goto	u940
  2479  00748A                     u941:
  2480  00748A  EF23  F03A         	goto	l1899
  2481  00748E                     u940:
  2482  00748E                     l1905:
  2483                           
  2484                           ; BSR set to: 0
  2485  00748E  0100               	movlb	0	; force () banked
  2486  007490  2BBD               	incf	lcd_initCGRam@i& (0+255),f,b
  2487  007492                     
  2488                           ; BSR set to: 0
  2489  007492  0E07               	movlw	7
  2490  007494  0100               	movlb	0	; force () banked
  2491  007496  65BD               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2492  007498  EF50  F03A         	goto	u951
  2493  00749C  EF52  F03A         	goto	u950
  2494  0074A0                     u951:
  2495  0074A0  EF15  F03A         	goto	l1893
  2496  0074A4                     u950:
  2497  0074A4                     l1909:
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;Lcd4Lignes.c: 468: };Lcd4Lignes.c: 469: lcd_curseurHome();
  2501  0074A4  EC80  F037         	call	_lcd_curseurHome	;wreg free
  2502  0074A8  0012               	return		;funcret
  2503  0074AA                     __end_of_lcd_initCGRam:
  2504                           	opt callstack 0
  2505                           
  2506 ;; *************** function _lcd_curseurHome *****************
  2507 ;; Defined at:
  2508 ;;		line 330 in file "Lcd4Lignes.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2522 ;;      Params:         0       0       0       0       0       0       0
  2523 ;;      Locals:         0       0       0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0
  2525 ;;      Totals:         0       0       0       0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		_lcd_wrCom
  2531 ;; This function is called by:
  2532 ;;		_lcd_initCGRam
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text10
  2537  006F00                     __ptext10:
  2538                           	opt callstack 0
  2539  006F00                     _lcd_curseurHome:
  2540                           	opt callstack 25
  2541  006F00                     
  2542                           ;Lcd4Lignes.c: 332: lcd_wrCom(0x02);
  2543  006F00  0E02               	movlw	2
  2544  006F02  EC5F  F039         	call	_lcd_wrCom
  2545  006F06  0012               	return		;funcret
  2546  006F08                     __end_of_lcd_curseurHome:
  2547                           	opt callstack 0
  2548                           
  2549 ;; *************** function _initialisation *****************
  2550 ;; Defined at:
  2551 ;;		line 312 in file "main.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2565 ;;      Params:         0       0       0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    1
  2572 ;; This function calls:
  2573 ;;		_srand
  2574 ;; This function is called by:
  2575 ;;		_main
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text11
  2580  007066                     __ptext11:
  2581                           	opt callstack 0
  2582  007066                     _initialisation:
  2583                           	opt callstack 29
  2584  007066                     
  2585                           ;main.c: 314: TRISD = 0;
  2586  007066  0E00               	movlw	0
  2587  007068  6E95               	movwf	149,c	;volatile
  2588                           
  2589                           ;main.c: 316: ANSELH = 0;
  2590  00706A  0E00               	movlw	0
  2591  00706C  6E7F               	movwf	127,c	;volatile
  2592  00706E                     
  2593                           ;main.c: 317: TRISB = 0xFF;
  2594  00706E  6893               	setf	147,c	;volatile
  2595                           
  2596                           ;main.c: 319: ANSEL = 0;
  2597  007070  0E00               	movlw	0
  2598  007072  6E7E               	movwf	126,c	;volatile
  2599                           
  2600                           ;main.c: 320: TRISA = 0;
  2601  007074  0E00               	movlw	0
  2602  007076  6E92               	movwf	146,c	;volatile
  2603  007078                     
  2604                           ;main.c: 324: T1CONbits.TMR1ON = 1;
  2605  007078  80CD               	bsf	205,0,c	;volatile
  2606  00707A                     
  2607                           ;main.c: 325: srand(TMR1);
  2608  00707A  CFCE F0B8          	movff	4046,srand@x	;volatile
  2609  00707E  CFCF F0B9          	movff	4047,srand@x+1	;volatile
  2610  007082  EC84  F037         	call	_srand	;wreg free
  2611  007086                     
  2612                           ;main.c: 328: ANSELbits.ANS7 = 1;
  2613  007086  8E7E               	bsf	126,7,c	;volatile
  2614  007088                     
  2615                           ;main.c: 330: ADCON0bits.ADON = 1;
  2616  007088  80C2               	bsf	194,0,c	;volatile
  2617  00708A                     
  2618                           ;main.c: 331: ADCON1 = 0;
  2619  00708A  0E00               	movlw	0
  2620  00708C  6EC1               	movwf	193,c	;volatile
  2621  00708E                     
  2622                           ;main.c: 333: ADCON2bits.ADFM = 0;
  2623  00708E  9EC0               	bcf	192,7,c	;volatile
  2624  007090                     
  2625                           ;main.c: 334: ADCON2bits.ACQT = 0;
  2626  007090  0EC7               	movlw	-57
  2627  007092  16C0               	andwf	192,f,c	;volatile
  2628  007094                     
  2629                           ;main.c: 335: ADCON2bits.ADCS = 0;
  2630  007094  0EF8               	movlw	-8
  2631  007096  16C0               	andwf	192,f,c	;volatile
  2632  007098                     
  2633                           ;main.c: 339: T0CONbits.TMR0ON = 1;
  2634  007098  8ED5               	bsf	213,7,c	;volatile
  2635  00709A                     
  2636                           ;main.c: 340: T0CONbits.T08BIT = 0;
  2637  00709A  9CD5               	bcf	213,6,c	;volatile
  2638  00709C                     
  2639                           ;main.c: 341: T0CONbits.T0CS = 0;
  2640  00709C  9AD5               	bcf	213,5,c	;volatile
  2641  00709E                     
  2642                           ;main.c: 342: T0CONbits.PSA = 0;
  2643  00709E  96D5               	bcf	213,3,c	;volatile
  2644  0070A0                     
  2645                           ;main.c: 343: T0CONbits.T0PS = 0b010;
  2646  0070A0  50D5               	movf	213,w,c	;volatile
  2647  0070A2  0BF8               	andlw	-8
  2648  0070A4  0902               	iorlw	2
  2649  0070A6  6ED5               	movwf	213,c	;volatile
  2650  0070A8                     
  2651                           ;main.c: 344: INTCONbits.TMR0IE = 1;
  2652  0070A8  8AF2               	bsf	242,5,c	;volatile
  2653  0070AA                     
  2654                           ;main.c: 345: INTCONbits.TMR0IF = 0;
  2655  0070AA  94F2               	bcf	242,2,c	;volatile
  2656  0070AC                     
  2657                           ;main.c: 346: INTCONbits.PEIE = 1;
  2658  0070AC  8CF2               	bsf	242,6,c	;volatile
  2659  0070AE                     
  2660                           ;main.c: 347: INTCONbits.GIE = 1;
  2661  0070AE  8EF2               	bsf	242,7,c	;volatile
  2662  0070B0  0012               	return		;funcret
  2663  0070B2                     __end_of_initialisation:
  2664                           	opt callstack 0
  2665                           
  2666 ;; *************** function _srand *****************
  2667 ;; Defined at:
  2668 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  x               2    0[BANK0 ] unsigned int 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		status,2
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2682 ;;      Params:         0       2       0       0       0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0
  2685 ;;      Totals:         0       2       0       0       0       0       0
  2686 ;;Total ram usage:        2 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_initialisation
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text12
  2696  006F08                     __ptext12:
  2697                           	opt callstack 0
  2698  006F08                     _srand:
  2699                           	opt callstack 29
  2700  006F08  C0B8  F060         	movff	srand@x,_randx
  2701  006F0C  C0B9  F061         	movff	srand@x+1,_randx+1
  2702  006F10  0100               	movlb	0	; () banked
  2703  006F12  6B62               	clrf	(_randx+2)& (0+255),b
  2704  006F14  6B63               	clrf	(_randx+3)& (0+255),b
  2705  006F16                     
  2706                           ; BSR set to: 0
  2707  006F16  0012               	return		;funcret
  2708  006F18                     __end_of_srand:
  2709                           	opt callstack 0
  2710                           
  2711 ;; *************** function _initTabVue *****************
  2712 ;; Defined at:
  2713 ;;		line 100 in file "main.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  j               2   11[BANK0 ] int 
  2718 ;;  i               2   15[BANK0 ] int 
  2719 ;;  i               2   13[BANK0 ] int 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2729 ;;      Params:         0       0       0       0       0       0       0
  2730 ;;      Locals:         0       6       0       0       0       0       0
  2731 ;;      Temps:          0       2       0       0       0       0       0
  2732 ;;      Totals:         0       8       0       0       0       0       0
  2733 ;;Total ram usage:        8 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    5
  2736 ;; This function calls:
  2737 ;;		___wmul
  2738 ;;		_lcd_gotoXY
  2739 ;;		_lcd_putMessage
  2740 ;; This function is called by:
  2741 ;;		_main
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text13
  2746  00796A                     __ptext13:
  2747                           	opt callstack 0
  2748  00796A                     _initTabVue:
  2749                           	opt callstack 25
  2750  00796A                     
  2751                           ;main.c: 102: for(int i=0;i<4;i++)
  2752  00796A  0E00               	movlw	0
  2753  00796C  0100               	movlb	0	; force () banked
  2754  00796E  6FC6               	movwf	(initTabVue@i+1)& (0+255),b
  2755  007970  0E00               	movlw	0
  2756  007972  6FC5               	movwf	initTabVue@i& (0+255),b
  2757  007974                     
  2758                           ; BSR set to: 0
  2759  007974  0100               	movlb	0	; force () banked
  2760  007976  BFC6               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2761  007978  EFC7  F03C         	goto	u1021
  2762  00797C  51C6               	movf	(initTabVue@i+1)& (0+255),w,b
  2763  00797E  E109               	bnz	u1020
  2764  007980  0E04               	movlw	4
  2765  007982  5DC5               	subwf	initTabVue@i& (0+255),w,b
  2766  007984  A0D8               	btfss	status,0,c
  2767  007986  EFC7  F03C         	goto	u1021
  2768  00798A  EFC9  F03C         	goto	u1020
  2769  00798E                     u1021:
  2770  00798E  EFCB  F03C         	goto	l1995
  2771  007992                     u1020:
  2772  007992  EF3D  F03D         	goto	l2013
  2773  007996                     l1995:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 103: {;main.c: 104: for(int j=0;j<20;j++)
  2777  007996  0E00               	movlw	0
  2778  007998  0100               	movlb	0	; force () banked
  2779  00799A  6FC4               	movwf	(initTabVue@j+1)& (0+255),b
  2780  00799C  0E00               	movlw	0
  2781  00799E  6FC3               	movwf	initTabVue@j& (0+255),b
  2782  0079A0                     
  2783                           ; BSR set to: 0
  2784  0079A0  0100               	movlb	0	; force () banked
  2785  0079A2  BFC4               	btfsc	(initTabVue@j+1)& (0+255),7,b
  2786  0079A4  EFDD  F03C         	goto	u1031
  2787  0079A8  51C4               	movf	(initTabVue@j+1)& (0+255),w,b
  2788  0079AA  E109               	bnz	u1030
  2789  0079AC  0E14               	movlw	20
  2790  0079AE  5DC3               	subwf	initTabVue@j& (0+255),w,b
  2791  0079B0  A0D8               	btfss	status,0,c
  2792  0079B2  EFDD  F03C         	goto	u1031
  2793  0079B6  EFDF  F03C         	goto	u1030
  2794  0079BA                     u1031:
  2795  0079BA  EFE1  F03C         	goto	l2001
  2796  0079BE                     u1030:
  2797  0079BE  EF17  F03D         	goto	l2007
  2798  0079C2                     l2001:
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 105: {;main.c: 106: m_tabVue[i][j] = 1;
  2802  0079C2  C0C5  F0B8         	movff	initTabVue@i,___wmul@multiplier
  2803  0079C6  C0C6  F0B9         	movff	initTabVue@i+1,___wmul@multiplier+1
  2804  0079CA  0E00               	movlw	0
  2805  0079CC  0100               	movlb	0	; force () banked
  2806  0079CE  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2807  0079D0  0E15               	movlw	21
  2808  0079D2  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2809  0079D4  EC9A  F037         	call	___wmul	;wreg free
  2810  0079D8  0E00               	movlw	low _m_tabVue
  2811  0079DA  0100               	movlb	0	; force () banked
  2812  0079DC  6FC1               	movwf	??_initTabVue& (0+255),b
  2813  0079DE  0E01               	movlw	high _m_tabVue
  2814  0079E0  6FC2               	movwf	(??_initTabVue+1)& (0+255),b
  2815  0079E2  0100               	movlb	0	; force () banked
  2816  0079E4  51B8               	movf	?___wmul& (0+255),w,b
  2817  0079E6  0100               	movlb	0	; force () banked
  2818  0079E8  27C1               	addwf	??_initTabVue& (0+255),f,b
  2819  0079EA  0100               	movlb	0	; force () banked
  2820  0079EC  51B9               	movf	(?___wmul+1)& (0+255),w,b
  2821  0079EE  0100               	movlb	0	; force () banked
  2822  0079F0  23C2               	addwfc	(??_initTabVue+1)& (0+255),f,b
  2823  0079F2  0100               	movlb	0	; force () banked
  2824  0079F4  51C3               	movf	initTabVue@j& (0+255),w,b
  2825  0079F6  0100               	movlb	0	; force () banked
  2826  0079F8  25C1               	addwf	??_initTabVue& (0+255),w,b
  2827  0079FA  6ED9               	movwf	fsr2l,c
  2828  0079FC  0100               	movlb	0	; force () banked
  2829  0079FE  51C4               	movf	(initTabVue@j+1)& (0+255),w,b
  2830  007A00  0100               	movlb	0	; force () banked
  2831  007A02  21C2               	addwfc	(??_initTabVue+1)& (0+255),w,b
  2832  007A04  6EDA               	movwf	fsr2h,c
  2833  007A06  0E01               	movlw	1
  2834  007A08  6EDF               	movwf	indf2,c
  2835  007A0A                     
  2836                           ; BSR set to: 0
  2837  007A0A  0100               	movlb	0	; force () banked
  2838  007A0C  4BC3               	infsnz	initTabVue@j& (0+255),f,b
  2839  007A0E  2BC4               	incf	(initTabVue@j+1)& (0+255),f,b
  2840  007A10                     
  2841                           ; BSR set to: 0
  2842  007A10  0100               	movlb	0	; force () banked
  2843  007A12  BFC4               	btfsc	(initTabVue@j+1)& (0+255),7,b
  2844  007A14  EF15  F03D         	goto	u1041
  2845  007A18  51C4               	movf	(initTabVue@j+1)& (0+255),w,b
  2846  007A1A  E109               	bnz	u1040
  2847  007A1C  0E14               	movlw	20
  2848  007A1E  5DC3               	subwf	initTabVue@j& (0+255),w,b
  2849  007A20  A0D8               	btfss	status,0,c
  2850  007A22  EF15  F03D         	goto	u1041
  2851  007A26  EF17  F03D         	goto	u1040
  2852  007A2A                     u1041:
  2853  007A2A  EFE1  F03C         	goto	l2001
  2854  007A2E                     u1040:
  2855  007A2E                     l2007:
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 107: };main.c: 108: m_tabVue[i][20]=0;
  2859  007A2E  C0C5  F0B8         	movff	initTabVue@i,___wmul@multiplier
  2860  007A32  C0C6  F0B9         	movff	initTabVue@i+1,___wmul@multiplier+1
  2861  007A36  0E00               	movlw	0
  2862  007A38  0100               	movlb	0	; force () banked
  2863  007A3A  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2864  007A3C  0E15               	movlw	21
  2865  007A3E  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2866  007A40  EC9A  F037         	call	___wmul	;wreg free
  2867  007A44  0E14               	movlw	low (_m_tabVue+20)
  2868  007A46  0100               	movlb	0	; force () banked
  2869  007A48  25B8               	addwf	?___wmul& (0+255),w,b
  2870  007A4A  6ED9               	movwf	fsr2l,c
  2871  007A4C  0E01               	movlw	high (_m_tabVue+20)
  2872  007A4E  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
  2873  007A50  6EDA               	movwf	fsr2h,c
  2874  007A52  0E00               	movlw	0
  2875  007A54  6EDF               	movwf	indf2,c
  2876  007A56                     
  2877                           ; BSR set to: 0
  2878  007A56  0100               	movlb	0	; force () banked
  2879  007A58  4BC5               	infsnz	initTabVue@i& (0+255),f,b
  2880  007A5A  2BC6               	incf	(initTabVue@i+1)& (0+255),f,b
  2881  007A5C                     
  2882                           ; BSR set to: 0
  2883  007A5C  0100               	movlb	0	; force () banked
  2884  007A5E  BFC6               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2885  007A60  EF3B  F03D         	goto	u1051
  2886  007A64  51C6               	movf	(initTabVue@i+1)& (0+255),w,b
  2887  007A66  E109               	bnz	u1050
  2888  007A68  0E04               	movlw	4
  2889  007A6A  5DC5               	subwf	initTabVue@i& (0+255),w,b
  2890  007A6C  A0D8               	btfss	status,0,c
  2891  007A6E  EF3B  F03D         	goto	u1051
  2892  007A72  EF3D  F03D         	goto	u1050
  2893  007A76                     u1051:
  2894  007A76  EFCB  F03C         	goto	l1995
  2895  007A7A                     u1050:
  2896  007A7A                     l2013:
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;main.c: 109: };main.c: 111: for(int i=0;i<4;i++)
  2900  007A7A  0E00               	movlw	0
  2901  007A7C  0100               	movlb	0	; force () banked
  2902  007A7E  6FC8               	movwf	(initTabVue@i_355+1)& (0+255),b
  2903  007A80  0E00               	movlw	0
  2904  007A82  6FC7               	movwf	initTabVue@i_355& (0+255),b
  2905  007A84                     
  2906                           ; BSR set to: 0
  2907  007A84  0100               	movlb	0	; force () banked
  2908  007A86  BFC8               	btfsc	(initTabVue@i_355+1)& (0+255),7,b
  2909  007A88  EF4F  F03D         	goto	u1061
  2910  007A8C  51C8               	movf	(initTabVue@i_355+1)& (0+255),w,b
  2911  007A8E  E109               	bnz	u1060
  2912  007A90  0E04               	movlw	4
  2913  007A92  5DC7               	subwf	initTabVue@i_355& (0+255),w,b
  2914  007A94  A0D8               	btfss	status,0,c
  2915  007A96  EF4F  F03D         	goto	u1061
  2916  007A9A  EF51  F03D         	goto	u1060
  2917  007A9E                     u1061:
  2918  007A9E  EF53  F03D         	goto	l2019
  2919  007AA2                     u1060:
  2920  007AA2  EF83  F03D         	goto	l77
  2921  007AA6                     l2019:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 112: {;main.c: 113: lcd_gotoXY(1,i+1);
  2925  007AA6  0100               	movlb	0	; force () banked
  2926  007AA8  29C7               	incf	initTabVue@i_355& (0+255),w,b
  2927  007AAA  0100               	movlb	0	; force () banked
  2928  007AAC  6FBB               	movwf	lcd_gotoXY@y& (0+255),b
  2929  007AAE  0E01               	movlw	1
  2930  007AB0  ECCB  F039         	call	_lcd_gotoXY
  2931  007AB4                     
  2932                           ;main.c: 114: lcd_putMessage(m_tabVue[i]);
  2933  007AB4  C0C7  F0B8         	movff	initTabVue@i_355,___wmul@multiplier
  2934  007AB8  C0C8  F0B9         	movff	initTabVue@i_355+1,___wmul@multiplier+1
  2935  007ABC  0E00               	movlw	0
  2936  007ABE  0100               	movlb	0	; force () banked
  2937  007AC0  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2938  007AC2  0E15               	movlw	21
  2939  007AC4  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2940  007AC6  EC9A  F037         	call	___wmul	;wreg free
  2941  007ACA  0E00               	movlw	low _m_tabVue
  2942  007ACC  0100               	movlb	0	; force () banked
  2943  007ACE  25B8               	addwf	?___wmul& (0+255),w,b
  2944  007AD0  0100               	movlb	0	; force () banked
  2945  007AD2  6FBE               	movwf	lcd_putMessage@chaine& (0+255),b
  2946  007AD4  0E01               	movlw	high _m_tabVue
  2947  007AD6  0100               	movlb	0	; force () banked
  2948  007AD8  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
  2949  007ADA  0100               	movlb	0	; force () banked
  2950  007ADC  6FBF               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  2951  007ADE  EC59  F038         	call	_lcd_putMessage	;wreg free
  2952  007AE2  0100               	movlb	0	; force () banked
  2953  007AE4  4BC7               	infsnz	initTabVue@i_355& (0+255),f,b
  2954  007AE6  2BC8               	incf	(initTabVue@i_355+1)& (0+255),f,b
  2955  007AE8                     
  2956                           ; BSR set to: 0
  2957  007AE8  0100               	movlb	0	; force () banked
  2958  007AEA  BFC8               	btfsc	(initTabVue@i_355+1)& (0+255),7,b
  2959  007AEC  EF81  F03D         	goto	u1071
  2960  007AF0  51C8               	movf	(initTabVue@i_355+1)& (0+255),w,b
  2961  007AF2  E109               	bnz	u1070
  2962  007AF4  0E04               	movlw	4
  2963  007AF6  5DC7               	subwf	initTabVue@i_355& (0+255),w,b
  2964  007AF8  A0D8               	btfss	status,0,c
  2965  007AFA  EF81  F03D         	goto	u1071
  2966  007AFE  EF83  F03D         	goto	u1070
  2967  007B02                     u1071:
  2968  007B02  EF53  F03D         	goto	l2019
  2969  007B06                     u1070:
  2970  007B06                     l77:
  2971                           
  2972                           ; BSR set to: 0
  2973  007B06  0012               	return		;funcret
  2974  007B08                     __end_of_initTabVue:
  2975                           	opt callstack 0
  2976                           
  2977 ;; *************** function _lcd_putMessage *****************
  2978 ;; Defined at:
  2979 ;;		line 429 in file "Lcd4Lignes.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  chaine          2    6[BANK0 ] PTR const unsigned char 
  2982 ;;		 -> m_tabVue(84), m_tabMines(84), 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  j               1    8[BANK0 ] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      void 
  2987 ;; Registers used:
  2988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2994 ;;      Params:         0       2       0       0       0       0       0
  2995 ;;      Locals:         0       1       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0
  2997 ;;      Totals:         0       3       0       0       0       0       0
  2998 ;;Total ram usage:        3 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    4
  3001 ;; This function calls:
  3002 ;;		_lcd_ecritChar
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;;		_initTabVue
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text14
  3010  0070B2                     __ptext14:
  3011                           	opt callstack 0
  3012  0070B2                     _lcd_putMessage:
  3013                           	opt callstack 26
  3014  0070B2                     
  3015                           ;Lcd4Lignes.c: 431: unsigned char j;;Lcd4Lignes.c: 433: for(j = 0; chaine[j] != 0; j++)
  3016  0070B2  0E00               	movlw	0
  3017  0070B4  0100               	movlb	0	; force () banked
  3018  0070B6  6FC0               	movwf	lcd_putMessage@j& (0+255),b
  3019  0070B8  EF6D  F038         	goto	l1777
  3020  0070BC                     l1773:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;Lcd4Lignes.c: 434: lcd_ecritChar(chaine[j]);
  3024  0070BC  0100               	movlb	0	; force () banked
  3025  0070BE  51C0               	movf	lcd_putMessage@j& (0+255),w,b
  3026  0070C0  0100               	movlb	0	; force () banked
  3027  0070C2  25BE               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3028  0070C4  6ED9               	movwf	fsr2l,c
  3029  0070C6  0100               	movlb	0	; force () banked
  3030  0070C8  0E00               	movlw	0
  3031  0070CA  0100               	movlb	0	; force () banked
  3032  0070CC  21BF               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3033  0070CE  6EDA               	movwf	fsr2h,c
  3034  0070D0  50DF               	movf	indf2,w,c
  3035  0070D2  ECA9  F038         	call	_lcd_ecritChar
  3036  0070D6  0100               	movlb	0	; force () banked
  3037  0070D8  2BC0               	incf	lcd_putMessage@j& (0+255),f,b
  3038  0070DA                     l1777:
  3039                           
  3040                           ; BSR set to: 0
  3041  0070DA  0100               	movlb	0	; force () banked
  3042  0070DC  51C0               	movf	lcd_putMessage@j& (0+255),w,b
  3043  0070DE  0100               	movlb	0	; force () banked
  3044  0070E0  25BE               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3045  0070E2  6ED9               	movwf	fsr2l,c
  3046  0070E4  0100               	movlb	0	; force () banked
  3047  0070E6  0E00               	movlw	0
  3048  0070E8  0100               	movlb	0	; force () banked
  3049  0070EA  21BF               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3050  0070EC  6EDA               	movwf	fsr2h,c
  3051  0070EE  50DF               	movf	indf2,w,c
  3052  0070F0  A4D8               	btfss	status,2,c
  3053  0070F2  EF7D  F038         	goto	u711
  3054  0070F6  EF7F  F038         	goto	u710
  3055  0070FA                     u711:
  3056  0070FA  EF5E  F038         	goto	l1773
  3057  0070FE                     u710:
  3058  0070FE                     
  3059                           ; BSR set to: 0
  3060  0070FE  0012               	return		;funcret
  3061  007100                     __end_of_lcd_putMessage:
  3062                           	opt callstack 0
  3063                           
  3064 ;; *************** function _lcd_ecritChar *****************
  3065 ;; Defined at:
  3066 ;;		line 401 in file "Lcd4Lignes.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  car             1    wreg     unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  car             1    3[BANK0 ] unsigned char 
  3071 ;;  posRam          1    4[BANK0 ] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3081 ;;      Params:         0       0       0       0       0       0       0
  3082 ;;      Locals:         0       2       0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0
  3084 ;;      Totals:         0       2       0       0       0       0       0
  3085 ;;Total ram usage:        2 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    3
  3088 ;; This function calls:
  3089 ;;		_lcd_wrCom
  3090 ;;		_lcd_wrData
  3091 ;; This function is called by:
  3092 ;;		_lcd_putMessage
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text15
  3097  007152                     __ptext15:
  3098                           	opt callstack 0
  3099  007152                     _lcd_ecritChar:
  3100                           	opt callstack 26
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;incstack = 0
  3104                           ;lcd_ecritChar@car stored from wreg
  3105  007152  0100               	movlb	0	; force () banked
  3106  007154  6FBB               	movwf	lcd_ecritChar@car& (0+255),b
  3107  007156                     
  3108                           ;Lcd4Lignes.c: 403: unsigned char posRam;;Lcd4Lignes.c: 405: posRam = lcd_wrData(car);
  3109  007156  0100               	movlb	0	; force () banked
  3110  007158  51BB               	movf	lcd_ecritChar@car& (0+255),w,b
  3111  00715A  ECD8  F037         	call	_lcd_wrData
  3112  00715E  0100               	movlb	0	; force () banked
  3113  007160  6FBC               	movwf	lcd_ecritChar@posRam& (0+255),b
  3114                           
  3115                           ;Lcd4Lignes.c: 406: switch(posRam)
  3116  007162  EFC2  F038         	goto	l1739
  3117  007166                     l1731:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;Lcd4Lignes.c: 409: lcd_wrCom(0xC0|0x80);
  3121  007166  0EC0               	movlw	192
  3122  007168  EC5F  F039         	call	_lcd_wrCom
  3123                           
  3124                           ;Lcd4Lignes.c: 410: break;
  3125  00716C  EFD2  F038         	goto	l208
  3126  007170                     l1733:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;Lcd4Lignes.c: 412: lcd_wrCom(0x94|0x80);
  3130  007170  0E94               	movlw	148
  3131  007172  EC5F  F039         	call	_lcd_wrCom
  3132                           
  3133                           ;Lcd4Lignes.c: 413: break;
  3134  007176  EFD2  F038         	goto	l208
  3135  00717A                     l1735:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Lcd4Lignes.c: 415: lcd_wrCom(0xD4|0x80);
  3139  00717A  0ED4               	movlw	212
  3140  00717C  EC5F  F039         	call	_lcd_wrCom
  3141                           
  3142                           ;Lcd4Lignes.c: 416: break;
  3143  007180  EFD2  F038         	goto	l208
  3144  007184                     l1739:
  3145                           
  3146                           ; BSR set to: 0
  3147  007184  0100               	movlb	0	; force () banked
  3148  007186  51BC               	movf	lcd_ecritChar@posRam& (0+255),w,b
  3149                           
  3150                           ; Switch size 1, requested type "simple"
  3151                           ; Number of cases is 3, Range of values is 148 to 212
  3152                           ; switch strategies available:
  3153                           ; Name         Instructions Cycles
  3154                           ; simple_byte           10     6 (average)
  3155                           ;	Chosen strategy is simple_byte
  3156  007188  0A94               	xorlw	148	; case 148
  3157  00718A  B4D8               	btfsc	status,2,c
  3158  00718C  EFB3  F038         	goto	l1731
  3159  007190  0A54               	xorlw	84	; case 192
  3160  007192  B4D8               	btfsc	status,2,c
  3161  007194  EFBD  F038         	goto	l1735
  3162  007198  0A14               	xorlw	20	; case 212
  3163  00719A  B4D8               	btfsc	status,2,c
  3164  00719C  EFB8  F038         	goto	l1733
  3165  0071A0  EFD2  F038         	goto	l208
  3166  0071A4                     l208:
  3167  0071A4  0012               	return		;funcret
  3168  0071A6                     __end_of_lcd_ecritChar:
  3169                           	opt callstack 0
  3170                           
  3171 ;; *************** function _lcd_wrData *****************
  3172 ;; Defined at:
  3173 ;;		line 230 in file "Lcd4Lignes.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  caractere       1    wreg     unsigned char 
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  caractere       1    2[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      unsigned char 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3187 ;;      Params:         0       0       0       0       0       0       0
  3188 ;;      Locals:         0       1       0       0       0       0       0
  3189 ;;      Temps:          0       0       0       0       0       0       0
  3190 ;;      Totals:         0       1       0       0       0       0       0
  3191 ;;Total ram usage:        1 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    2
  3194 ;; This function calls:
  3195 ;;		_lcd_busy
  3196 ;;		_lcd_ecrireDonnees
  3197 ;;		_lcd_strobeEnableBit
  3198 ;; This function is called by:
  3199 ;;		_lcd_ecritChar
  3200 ;;		_lcd_initCGRam
  3201 ;;		_lcd_effaceChar
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text16
  3206  006FB0                     __ptext16:
  3207                           	opt callstack 0
  3208  006FB0                     _lcd_wrData:
  3209                           	opt callstack 26
  3210                           
  3211                           ;incstack = 0
  3212                           ;lcd_wrData@caractere stored from wreg
  3213  006FB0  0100               	movlb	0	; force () banked
  3214  006FB2  6FBA               	movwf	lcd_wrData@caractere& (0+255),b
  3215  006FB4                     
  3216                           ;Lcd4Lignes.c: 232: lcd_busy();
  3217  006FB4  EC12  F038         	call	_lcd_busy	;wreg free
  3218  006FB8                     
  3219                           ;Lcd4Lignes.c: 233: TRISD = 0b00000000;
  3220  006FB8  0E00               	movlw	0
  3221  006FBA  6E95               	movwf	149,c	;volatile
  3222  006FBC                     
  3223                           ;Lcd4Lignes.c: 236: PORTAbits.RA0 = 1;
  3224  006FBC  8080               	bsf	128,0,c	;volatile
  3225  006FBE                     
  3226                           ;Lcd4Lignes.c: 237: PORTAbits.RA1 = 0;
  3227  006FBE  9280               	bcf	128,1,c	;volatile
  3228  006FC0                     
  3229                           ;Lcd4Lignes.c: 239: lcd_ecrireDonnees(caractere >> 4);
  3230  006FC0  0100               	movlb	0	; force () banked
  3231  006FC2  39BA               	swapf	lcd_wrData@caractere& (0+255),w,b
  3232  006FC4  0B0F               	andlw	15
  3233  006FC6  EC8C  F037         	call	_lcd_ecrireDonnees
  3234  006FCA                     
  3235                           ;Lcd4Lignes.c: 240: lcd_strobeEnableBit();
  3236  006FCA  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  3237  006FCE                     
  3238                           ;Lcd4Lignes.c: 243: lcd_ecrireDonnees(caractere);
  3239  006FCE  0100               	movlb	0	; force () banked
  3240  006FD0  51BA               	movf	lcd_wrData@caractere& (0+255),w,b
  3241  006FD2  EC8C  F037         	call	_lcd_ecrireDonnees
  3242  006FD6                     
  3243                           ;Lcd4Lignes.c: 244: lcd_strobeEnableBit();
  3244  006FD6  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  3245  006FDA                     
  3246                           ;Lcd4Lignes.c: 247: TRISD = 0b00001111;
  3247  006FDA  0E0F               	movlw	15
  3248  006FDC  6E95               	movwf	149,c	;volatile
  3249  006FDE                     
  3250                           ;Lcd4Lignes.c: 248: _delay((unsigned long)((2)*(1000000/4000000.0)));
  3251                           ;Lcd4Lignes.c: 249: return(lcd_busy());
  3252  006FDE  EC12  F038         	call	_lcd_busy	;wreg free
  3253  006FE2  0012               	return		;funcret
  3254  006FE4                     __end_of_lcd_wrData:
  3255                           	opt callstack 0
  3256                           
  3257 ;; *************** function _lcd_gotoXY *****************
  3258 ;; Defined at:
  3259 ;;		line 356 in file "Lcd4Lignes.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  x               1    wreg     unsigned char 
  3262 ;;  y               1    3[BANK0 ] unsigned char 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  x               1    4[BANK0 ] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         0       1       0       0       0       0       0
  3275 ;;      Locals:         0       1       0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0       0       0
  3277 ;;      Totals:         0       2       0       0       0       0       0
  3278 ;;Total ram usage:        2 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    3
  3281 ;; This function calls:
  3282 ;;		_lcd_wrCom
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;;		_initTabVue
  3286 ;;		_lcd_effaceLigne
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text17
  3291  007396                     __ptext17:
  3292                           	opt callstack 0
  3293  007396                     _lcd_gotoXY:
  3294                           	opt callstack 27
  3295                           
  3296                           ;incstack = 0
  3297                           ;lcd_gotoXY@x stored from wreg
  3298  007396  0100               	movlb	0	; force () banked
  3299  007398  6FBC               	movwf	lcd_gotoXY@x& (0+255),b
  3300  00739A                     
  3301                           ;Lcd4Lignes.c: 358: switch(y)
  3302  00739A  EFEF  F039         	goto	l1769
  3303  00739E                     l1759:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;Lcd4Lignes.c: 361: lcd_wrCom((x-1+0x80)|0x80);
  3307  00739E  0100               	movlb	0	; force () banked
  3308  0073A0  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3309  0073A2  0F7F               	addlw	127
  3310  0073A4  0980               	iorlw	128
  3311  0073A6  EC5F  F039         	call	_lcd_wrCom
  3312                           
  3313                           ;Lcd4Lignes.c: 362: break;
  3314  0073AA  EF03  F03A         	goto	l197
  3315  0073AE                     l1761:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Lcd4Lignes.c: 364: lcd_wrCom((x-1+0xC0)|0x80);
  3319  0073AE  0100               	movlb	0	; force () banked
  3320  0073B0  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3321  0073B2  0FBF               	addlw	191
  3322  0073B4  0980               	iorlw	128
  3323  0073B6  EC5F  F039         	call	_lcd_wrCom
  3324                           
  3325                           ;Lcd4Lignes.c: 365: break;
  3326  0073BA  EF03  F03A         	goto	l197
  3327  0073BE                     l1763:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;Lcd4Lignes.c: 367: lcd_wrCom((x-1+0x94)|0x80);
  3331  0073BE  0100               	movlb	0	; force () banked
  3332  0073C0  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3333  0073C2  0F93               	addlw	147
  3334  0073C4  0980               	iorlw	128
  3335  0073C6  EC5F  F039         	call	_lcd_wrCom
  3336                           
  3337                           ;Lcd4Lignes.c: 368: break;
  3338  0073CA  EF03  F03A         	goto	l197
  3339  0073CE                     l1765:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;Lcd4Lignes.c: 370: lcd_wrCom((x-1+0xD4)|0x80);
  3343  0073CE  0100               	movlb	0	; force () banked
  3344  0073D0  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3345  0073D2  0FD3               	addlw	211
  3346  0073D4  0980               	iorlw	128
  3347  0073D6  EC5F  F039         	call	_lcd_wrCom
  3348                           
  3349                           ;Lcd4Lignes.c: 371: break;
  3350  0073DA  EF03  F03A         	goto	l197
  3351  0073DE                     l1769:
  3352  0073DE  0100               	movlb	0	; force () banked
  3353  0073E0  51BB               	movf	lcd_gotoXY@y& (0+255),w,b
  3354                           
  3355                           ; Switch size 1, requested type "simple"
  3356                           ; Number of cases is 4, Range of values is 1 to 4
  3357                           ; switch strategies available:
  3358                           ; Name         Instructions Cycles
  3359                           ; simple_byte           13     7 (average)
  3360                           ;	Chosen strategy is simple_byte
  3361  0073E2  0A01               	xorlw	1	; case 1
  3362  0073E4  B4D8               	btfsc	status,2,c
  3363  0073E6  EFCF  F039         	goto	l1759
  3364  0073EA  0A03               	xorlw	3	; case 2
  3365  0073EC  B4D8               	btfsc	status,2,c
  3366  0073EE  EFD7  F039         	goto	l1761
  3367  0073F2  0A01               	xorlw	1	; case 3
  3368  0073F4  B4D8               	btfsc	status,2,c
  3369  0073F6  EFDF  F039         	goto	l1763
  3370  0073FA  0A07               	xorlw	7	; case 4
  3371  0073FC  B4D8               	btfsc	status,2,c
  3372  0073FE  EFE7  F039         	goto	l1765
  3373  007402  EF03  F03A         	goto	l197
  3374  007406                     l197:
  3375  007406  0012               	return		;funcret
  3376  007408                     __end_of_lcd_gotoXY:
  3377                           	opt callstack 0
  3378                           
  3379 ;; *************** function _lcd_wrCom *****************
  3380 ;; Defined at:
  3381 ;;		line 198 in file "Lcd4Lignes.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  commande        1    wreg     unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  commande        1    2[BANK0 ] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3395 ;;      Params:         0       0       0       0       0       0       0
  3396 ;;      Locals:         0       1       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0
  3398 ;;      Totals:         0       1       0       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    2
  3402 ;; This function calls:
  3403 ;;		_lcd_busy
  3404 ;;		_lcd_ecrireDonnees
  3405 ;;		_lcd_strobeEnableBit
  3406 ;; This function is called by:
  3407 ;;		_lcd_init
  3408 ;;		_lcd_curseurHome
  3409 ;;		_lcd_gotoXY
  3410 ;;		_lcd_ecritChar
  3411 ;;		_lcd_initCGRam
  3412 ;;		_lcd_effaceAffichage
  3413 ;;		_lcd_cacheCurseur
  3414 ;;		_lcd_montreCurseur
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text18
  3419  0072BE                     __ptext18:
  3420                           	opt callstack 0
  3421  0072BE                     _lcd_wrCom:
  3422                           	opt callstack 26
  3423                           
  3424                           ;incstack = 0
  3425                           ;lcd_wrCom@commande stored from wreg
  3426  0072BE  0100               	movlb	0	; force () banked
  3427  0072C0  6FBA               	movwf	lcd_wrCom@commande& (0+255),b
  3428  0072C2                     
  3429                           ;Lcd4Lignes.c: 200: lcd_busy();
  3430  0072C2  EC12  F038         	call	_lcd_busy	;wreg free
  3431  0072C6                     
  3432                           ;Lcd4Lignes.c: 202: TRISD = 0b00000000;
  3433  0072C6  0E00               	movlw	0
  3434  0072C8  6E95               	movwf	149,c	;volatile
  3435  0072CA                     
  3436                           ;Lcd4Lignes.c: 205: PORTAbits.RA0 = 0;
  3437  0072CA  9080               	bcf	128,0,c	;volatile
  3438  0072CC                     
  3439                           ;Lcd4Lignes.c: 206: PORTAbits.RA1 = 0;
  3440  0072CC  9280               	bcf	128,1,c	;volatile
  3441  0072CE                     
  3442                           ;Lcd4Lignes.c: 208: lcd_ecrireDonnees(commande >> 4);
  3443  0072CE  0100               	movlb	0	; force () banked
  3444  0072D0  39BA               	swapf	lcd_wrCom@commande& (0+255),w,b
  3445  0072D2  0B0F               	andlw	15
  3446  0072D4  EC8C  F037         	call	_lcd_ecrireDonnees
  3447  0072D8                     
  3448                           ;Lcd4Lignes.c: 209: lcd_strobeEnableBit();
  3449  0072D8  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  3450  0072DC                     
  3451                           ;Lcd4Lignes.c: 212: lcd_ecrireDonnees(commande);
  3452  0072DC  0100               	movlb	0	; force () banked
  3453  0072DE  51BA               	movf	lcd_wrCom@commande& (0+255),w,b
  3454  0072E0  EC8C  F037         	call	_lcd_ecrireDonnees
  3455  0072E4                     
  3456                           ;Lcd4Lignes.c: 213: lcd_strobeEnableBit();
  3457  0072E4  EC7C  F037         	call	_lcd_strobeEnableBit	;wreg free
  3458  0072E8                     
  3459                           ;Lcd4Lignes.c: 214: _delay((unsigned long)((40)*(1000000/4000000.0)));
  3460  0072E8  0E03               	movlw	3
  3461  0072EA                     u1317:
  3462  0072EA  2EE8               	decfsz	wreg,f,c
  3463  0072EC  D7FE               	bra	u1317
  3464  0072EE  F000               	nop	
  3465  0072F0                     
  3466                           ;Lcd4Lignes.c: 216: if ((commande == 0x01) || commande == 0x02)
  3467  0072F0  0100               	movlb	0	; force () banked
  3468  0072F2  05BA               	decf	lcd_wrCom@commande& (0+255),w,b
  3469  0072F4  B4D8               	btfsc	status,2,c
  3470  0072F6  EF7F  F039         	goto	u671
  3471  0072FA  EF81  F039         	goto	u670
  3472  0072FE                     u671:
  3473  0072FE  EF8B  F039         	goto	l1689
  3474  007302                     u670:
  3475  007302                     
  3476                           ; BSR set to: 0
  3477  007302  0E02               	movlw	2
  3478  007304  0100               	movlb	0	; force () banked
  3479  007306  19BA               	xorwf	lcd_wrCom@commande& (0+255),w,b
  3480  007308  A4D8               	btfss	status,2,c
  3481  00730A  EF89  F039         	goto	u681
  3482  00730E  EF8B  F039         	goto	u680
  3483  007312                     u681:
  3484  007312  EF90  F039         	goto	l1691
  3485  007316                     u680:
  3486  007316                     l1689:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;Lcd4Lignes.c: 217: _delay((unsigned long)((2)*(1000000/4000.0)));
  3490  007316  0EA6               	movlw	166
  3491  007318                     u1327:
  3492  007318  2EE8               	decfsz	wreg,f,c
  3493  00731A  D7FE               	bra	u1327
  3494  00731C  F000 F000          	nop2	
  3495  007320                     l1691:
  3496                           
  3497                           ;Lcd4Lignes.c: 219: TRISD = 0b00001111;
  3498  007320  0E0F               	movlw	15
  3499  007322  6E95               	movwf	149,c	;volatile
  3500  007324                     
  3501                           ;Lcd4Lignes.c: 221: return(lcd_busy());
  3502  007324  EC12  F038         	call	_lcd_busy	;wreg free
  3503  007328  0012               	return		;funcret
  3504  00732A                     __end_of_lcd_wrCom:
  3505                           	opt callstack 0
  3506                           
  3507 ;; *************** function _lcd_strobeEnableBit *****************
  3508 ;; Defined at:
  3509 ;;		line 473 in file "Lcd4Lignes.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;		None
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		None
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3523 ;;      Params:         0       0       0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0       0       0
  3526 ;;      Totals:         0       0       0       0       0       0       0
  3527 ;;Total ram usage:        0 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_lcd_wrCom
  3533 ;;		_lcd_wrData
  3534 ;;		_lcd_resetSequence
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text19
  3539  006EF8                     __ptext19:
  3540                           	opt callstack 0
  3541  006EF8                     _lcd_strobeEnableBit:
  3542                           	opt callstack 27
  3543  006EF8                     
  3544                           ;Lcd4Lignes.c: 475: PORTAbits.RA2 = 1;
  3545  006EF8  8480               	bsf	128,2,c	;volatile
  3546                           
  3547                           ;Lcd4Lignes.c: 476: __nop();
  3548  006EFA  F000               	nop	
  3549                           
  3550                           ;Lcd4Lignes.c: 477: PORTAbits.RA2 = 0;
  3551  006EFC  9480               	bcf	128,2,c	;volatile
  3552  006EFE  0012               	return		;funcret
  3553  006F00                     __end_of_lcd_strobeEnableBit:
  3554                           	opt callstack 0
  3555                           
  3556 ;; *************** function _lcd_ecrireDonnees *****************
  3557 ;; Defined at:
  3558 ;;		line 149 in file "Lcd4Lignes.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  donnee          1    wreg     unsigned char 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  donnee          1    1[BANK0 ] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         0       0       0       0       0       0       0
  3573 ;;      Locals:         0       1       0       0       0       0       0
  3574 ;;      Temps:          0       1       0       0       0       0       0
  3575 ;;      Totals:         0       2       0       0       0       0       0
  3576 ;;Total ram usage:        2 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_lcd_wrCom
  3582 ;;		_lcd_wrData
  3583 ;;		_lcd_resetSequence
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text20
  3588  006F18                     __ptext20:
  3589                           	opt callstack 0
  3590  006F18                     _lcd_ecrireDonnees:
  3591                           	opt callstack 27
  3592                           
  3593                           ;incstack = 0
  3594                           ;lcd_ecrireDonnees@donnee stored from wreg
  3595  006F18  0100               	movlb	0	; force () banked
  3596  006F1A  6FB9               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  3597  006F1C                     
  3598                           ;Lcd4Lignes.c: 152: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  3599  006F1C  CF83 F0B8          	movff	3971,??_lcd_ecrireDonnees	;volatile
  3600  006F20  0EF0               	movlw	240
  3601  006F22  0100               	movlb	0	; force () banked
  3602  006F24  17B8               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  3603  006F26  0100               	movlb	0	; force () banked
  3604  006F28  51B9               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  3605  006F2A  0B0F               	andlw	15
  3606  006F2C  0100               	movlb	0	; force () banked
  3607  006F2E  11B8               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  3608  006F30  6E83               	movwf	131,c	;volatile
  3609  006F32                     
  3610                           ; BSR set to: 0
  3611  006F32  0012               	return		;funcret
  3612  006F34                     __end_of_lcd_ecrireDonnees:
  3613                           	opt callstack 0
  3614                           
  3615 ;; *************** function _lcd_busy *****************
  3616 ;; Defined at:
  3617 ;;		line 166 in file "Lcd4Lignes.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;		None
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  adresse         1    1[BANK0 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      unsigned char 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3631 ;;      Params:         0       0       0       0       0       0       0
  3632 ;;      Locals:         0       1       0       0       0       0       0
  3633 ;;      Temps:          0       1       0       0       0       0       0
  3634 ;;      Totals:         0       2       0       0       0       0       0
  3635 ;;Total ram usage:        2 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    1
  3638 ;; This function calls:
  3639 ;;		_lcd_lireDonnees
  3640 ;; This function is called by:
  3641 ;;		_lcd_wrCom
  3642 ;;		_lcd_wrData
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text21
  3647  007024                     __ptext21:
  3648                           	opt callstack 0
  3649  007024                     _lcd_busy:
  3650                           	opt callstack 26
  3651  007024                     
  3652                           ;Lcd4Lignes.c: 168: unsigned char adresse;;Lcd4Lignes.c: 170: PORTAbits.RA0 = 0;
  3653  007024  9080               	bcf	128,0,c	;volatile
  3654                           
  3655                           ;Lcd4Lignes.c: 171: PORTAbits.RA1 = 1;
  3656  007026  8280               	bsf	128,1,c	;volatile
  3657  007028                     l159:
  3658                           
  3659                           ;Lcd4Lignes.c: 174: {;Lcd4Lignes.c: 175: PORTAbits.RA2 = 1;
  3660  007028  8480               	bsf	128,2,c	;volatile
  3661                           
  3662                           ;Lcd4Lignes.c: 176: __nop();
  3663  00702A  F000               	nop	
  3664  00702C                     
  3665                           ;Lcd4Lignes.c: 177: adresse = lcd_lireDonnees() << 4;
  3666  00702C  EC79  F037         	call	_lcd_lireDonnees	;wreg free
  3667  007030  0100               	movlb	0	; force () banked
  3668  007032  6FB8               	movwf	??_lcd_busy& (0+255),b
  3669  007034  39B8               	swapf	??_lcd_busy& (0+255),w,b
  3670  007036  0BF0               	andlw	240
  3671  007038  0100               	movlb	0	; force () banked
  3672  00703A  6FB9               	movwf	lcd_busy@adresse& (0+255),b
  3673  00703C                     
  3674                           ; BSR set to: 0
  3675                           ;Lcd4Lignes.c: 178: PORTAbits.RA2 = 0;
  3676  00703C  9480               	bcf	128,2,c	;volatile
  3677  00703E                     
  3678                           ;Lcd4Lignes.c: 180: PORTAbits.RA2 = 1;
  3679  00703E  8480               	bsf	128,2,c	;volatile
  3680  007040                     
  3681                           ;Lcd4Lignes.c: 181: __nop();
  3682  007040  F000               	nop	
  3683                           
  3684                           ;Lcd4Lignes.c: 182: adresse |= lcd_lireDonnees();
  3685  007042  EC79  F037         	call	_lcd_lireDonnees	;wreg free
  3686  007046  0100               	movlb	0	; force () banked
  3687  007048  13B9               	iorwf	lcd_busy@adresse& (0+255),f,b
  3688  00704A                     
  3689                           ; BSR set to: 0
  3690                           ;Lcd4Lignes.c: 183: PORTAbits.RA2 = 0;
  3691  00704A  9480               	bcf	128,2,c	;volatile
  3692  00704C                     
  3693                           ;Lcd4Lignes.c: 185: };Lcd4Lignes.c: 186: while(adresse&0x80);
  3694  00704C  0100               	movlb	0	; force () banked
  3695  00704E  BFB9               	btfsc	lcd_busy@adresse& (0+255),7,b
  3696  007050  EF2C  F038         	goto	u661
  3697  007054  EF2E  F038         	goto	u660
  3698  007058                     u661:
  3699  007058  EF14  F038         	goto	l159
  3700  00705C                     u660:
  3701  00705C                     
  3702                           ; BSR set to: 0
  3703                           ;Lcd4Lignes.c: 188: PORTAbits.RA1 = 0;
  3704  00705C  9280               	bcf	128,1,c	;volatile
  3705  00705E                     
  3706                           ; BSR set to: 0
  3707                           ;Lcd4Lignes.c: 189: return(adresse&0x7f);
  3708  00705E  0100               	movlb	0	; force () banked
  3709  007060  51B9               	movf	lcd_busy@adresse& (0+255),w,b
  3710  007062  0B7F               	andlw	127
  3711  007064                     
  3712                           ; BSR set to: 0
  3713  007064  0012               	return		;funcret
  3714  007066                     __end_of_lcd_busy:
  3715                           	opt callstack 0
  3716                           
  3717 ;; *************** function _lcd_lireDonnees *****************
  3718 ;; Defined at:
  3719 ;;		line 135 in file "Lcd4Lignes.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      unsigned char 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3733 ;;      Params:         0       0       0       0       0       0       0
  3734 ;;      Locals:         0       0       0       0       0       0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0
  3736 ;;      Totals:         0       0       0       0       0       0       0
  3737 ;;Total ram usage:        0 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_lcd_busy
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text22
  3747  006EF2                     __ptext22:
  3748                           	opt callstack 0
  3749  006EF2                     _lcd_lireDonnees:
  3750                           	opt callstack 26
  3751  006EF2                     
  3752                           ;Lcd4Lignes.c: 138: return (PORTD & 0x0f);
  3753  006EF2  5083               	movf	131,w,c	;volatile
  3754  006EF4  0B0F               	andlw	15
  3755  006EF6  0012               	return		;funcret
  3756  006EF8                     __end_of_lcd_lireDonnees:
  3757                           	opt callstack 0
  3758                           
  3759 ;; *************** function ___wmul *****************
  3760 ;; Defined at:
  3761 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3764 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  product         2    4[BANK0 ] unsigned int 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  2    0[BANK0 ] unsigned int 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, prodl, prodh
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3776 ;;      Params:         0       4       0       0       0       0       0
  3777 ;;      Locals:         0       2       0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0       0       0
  3779 ;;      Totals:         0       6       0       0       0       0       0
  3780 ;;Total ram usage:        6 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_main
  3786 ;;		_initTabVue
  3787 ;;		_calculToucheCombien
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text23
  3792  006F34                     __ptext23:
  3793                           	opt callstack 0
  3794  006F34                     ___wmul:
  3795                           	opt callstack 28
  3796  006F34  0100               	movlb	0	; () banked
  3797  006F36  51B8               	movf	___wmul@multiplier& (0+255),w,b
  3798  006F38  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  3799  006F3A  CFF3 F0BC          	movff	prodl,___wmul@product
  3800  006F3E  CFF4 F0BD          	movff	prodh,___wmul@product+1
  3801  006F42  51B8               	movf	___wmul@multiplier& (0+255),w,b
  3802  006F44  03BB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3803  006F46  50F3               	movf	243,w,c
  3804  006F48  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  3805  006F4A  51B9               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3806  006F4C  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  3807  006F4E  50F3               	movf	243,w,c
  3808  006F50  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  3809  006F52                     
  3810                           ; BSR set to: 0
  3811  006F52  C0BC  F0B8         	movff	___wmul@product,?___wmul
  3812  006F56  C0BD  F0B9         	movff	___wmul@product+1,?___wmul+1
  3813  006F5A                     
  3814                           ; BSR set to: 0
  3815  006F5A  0012               	return		;funcret
  3816  006F5C                     __end_of___wmul:
  3817                           	opt callstack 0
  3818                           
  3819 ;; *************** function _deplace *****************
  3820 ;; Defined at:
  3821 ;;		line 218 in file "main.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  x               2    2[BANK0 ] PTR unsigned char 
  3824 ;;		 -> main@posX(1), 
  3825 ;;  y               2    4[BANK0 ] PTR unsigned char 
  3826 ;;		 -> main@posY(1), 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3838 ;;      Params:         0       4       0       0       0       0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0
  3840 ;;      Temps:          0       1       0       0       0       0       0
  3841 ;;      Totals:         0       5       0       0       0       0       0
  3842 ;;Total ram usage:        5 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    1
  3845 ;; This function calls:
  3846 ;;		_getAnalog
  3847 ;; This function is called by:
  3848 ;;		_main
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text24
  3853  00755C                     __ptext24:
  3854                           	opt callstack 0
  3855  00755C                     _deplace:
  3856                           	opt callstack 29
  3857  00755C                     
  3858                           ;main.c: 220: if(getAnalog(7)>150)
  3859  00755C  0E07               	movlw	7
  3860  00755E  ECC2  F037         	call	_getAnalog
  3861  007562  0100               	movlb	0	; force () banked
  3862  007564  6FBE               	movwf	??_deplace& (0+255),b
  3863  007566  0E96               	movlw	150
  3864  007568  65BE               	cpfsgt	??_deplace& (0+255),b
  3865  00756A  EFB9  F03A         	goto	u1161
  3866  00756E  EFBB  F03A         	goto	u1160
  3867  007572                     u1161:
  3868  007572  EFC0  F03A         	goto	l2071
  3869  007576                     u1160:
  3870  007576                     
  3871                           ; BSR set to: 0
  3872                           ;main.c: 221: {;main.c: 222: (*x)++;
  3873  007576  C0BA  FFD9         	movff	deplace@x,fsr2l
  3874  00757A  C0BB  FFDA         	movff	deplace@x+1,fsr2h
  3875  00757E  2ADF               	incf	indf2,f,c
  3876  007580                     l2071:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;main.c: 224: };main.c: 225: if(getAnalog(7)<100)
  3880  007580  0E07               	movlw	7
  3881  007582  ECC2  F037         	call	_getAnalog
  3882  007586  0100               	movlb	0	; force () banked
  3883  007588  6FBE               	movwf	??_deplace& (0+255),b
  3884  00758A  0E64               	movlw	100
  3885  00758C  61BE               	cpfslt	??_deplace& (0+255),b
  3886  00758E  EFCB  F03A         	goto	u1171
  3887  007592  EFCD  F03A         	goto	u1170
  3888  007596                     u1171:
  3889  007596  EFD2  F03A         	goto	l2075
  3890  00759A                     u1170:
  3891  00759A                     
  3892                           ; BSR set to: 0
  3893                           ;main.c: 226: {;main.c: 227: (*x)--;
  3894  00759A  C0BA  FFD9         	movff	deplace@x,fsr2l
  3895  00759E  C0BB  FFDA         	movff	deplace@x+1,fsr2h
  3896  0075A2  06DF               	decf	indf2,f,c
  3897  0075A4                     l2075:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;main.c: 228: };main.c: 229: if(getAnalog(6)>150)
  3901  0075A4  0E06               	movlw	6
  3902  0075A6  ECC2  F037         	call	_getAnalog
  3903  0075AA  0100               	movlb	0	; force () banked
  3904  0075AC  6FBE               	movwf	??_deplace& (0+255),b
  3905  0075AE  0E96               	movlw	150
  3906  0075B0  65BE               	cpfsgt	??_deplace& (0+255),b
  3907  0075B2  EFDD  F03A         	goto	u1181
  3908  0075B6  EFDF  F03A         	goto	u1180
  3909  0075BA                     u1181:
  3910  0075BA  EFE4  F03A         	goto	l2079
  3911  0075BE                     u1180:
  3912  0075BE                     
  3913                           ; BSR set to: 0
  3914                           ;main.c: 230: {;main.c: 231: (*y)--;
  3915  0075BE  C0BC  FFD9         	movff	deplace@y,fsr2l
  3916  0075C2  C0BD  FFDA         	movff	deplace@y+1,fsr2h
  3917  0075C6  06DF               	decf	indf2,f,c
  3918  0075C8                     l2079:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;main.c: 232: };main.c: 233: if(getAnalog(6)<100)
  3922  0075C8  0E06               	movlw	6
  3923  0075CA  ECC2  F037         	call	_getAnalog
  3924  0075CE  0100               	movlb	0	; force () banked
  3925  0075D0  6FBE               	movwf	??_deplace& (0+255),b
  3926  0075D2  0E64               	movlw	100
  3927  0075D4  61BE               	cpfslt	??_deplace& (0+255),b
  3928  0075D6  EFEF  F03A         	goto	u1191
  3929  0075DA  EFF1  F03A         	goto	u1190
  3930  0075DE                     u1191:
  3931  0075DE  EFF6  F03A         	goto	l2083
  3932  0075E2                     u1190:
  3933  0075E2                     
  3934                           ; BSR set to: 0
  3935                           ;main.c: 234: {;main.c: 235: (*y)++;
  3936  0075E2  C0BC  FFD9         	movff	deplace@y,fsr2l
  3937  0075E6  C0BD  FFDA         	movff	deplace@y+1,fsr2h
  3938  0075EA  2ADF               	incf	indf2,f,c
  3939  0075EC                     l2083:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 236: };main.c: 238: if(*x>=20)
  3943  0075EC  C0BA  FFD9         	movff	deplace@x,fsr2l
  3944  0075F0  C0BB  FFDA         	movff	deplace@x+1,fsr2h
  3945  0075F4  0E13               	movlw	19
  3946  0075F6  64DF               	cpfsgt	indf2,c
  3947  0075F8  EF00  F03B         	goto	u1201
  3948  0075FC  EF02  F03B         	goto	u1200
  3949  007600                     u1201:
  3950  007600  EF08  F03B         	goto	l2089
  3951  007604                     u1200:
  3952  007604                     
  3953                           ; BSR set to: 0
  3954                           ;main.c: 239: {;main.c: 240: *x=0;
  3955  007604  C0BA  FFD9         	movff	deplace@x,fsr2l
  3956  007608  C0BB  FFDA         	movff	deplace@x+1,fsr2h
  3957  00760C  0E00               	movlw	0
  3958  00760E  6EDF               	movwf	indf2,c
  3959  007610                     l2089:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;main.c: 245: };main.c: 246: if(*y>=4)
  3963  007610  C0BC  FFD9         	movff	deplace@y,fsr2l
  3964  007614  C0BD  FFDA         	movff	deplace@y+1,fsr2h
  3965  007618  0E03               	movlw	3
  3966  00761A  64DF               	cpfsgt	indf2,c
  3967  00761C  EF12  F03B         	goto	u1211
  3968  007620  EF14  F03B         	goto	u1210
  3969  007624                     u1211:
  3970  007624  EF1A  F03B         	goto	l116
  3971  007628                     u1210:
  3972  007628                     
  3973                           ; BSR set to: 0
  3974                           ;main.c: 247: {;main.c: 248: *y=0;
  3975  007628  C0BC  FFD9         	movff	deplace@y,fsr2l
  3976  00762C  C0BD  FFDA         	movff	deplace@y+1,fsr2h
  3977  007630  0E00               	movlw	0
  3978  007632  6EDF               	movwf	indf2,c
  3979  007634                     l116:
  3980                           
  3981                           ; BSR set to: 0
  3982  007634  0012               	return		;funcret
  3983  007636                     __end_of_deplace:
  3984                           	opt callstack 0
  3985                           
  3986 ;; *************** function _getAnalog *****************
  3987 ;; Defined at:
  3988 ;;		line 297 in file "main.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  canal           1    wreg     unsigned char 
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;  canal           1    1[BANK0 ] unsigned char 
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      unsigned char 
  3995 ;; Registers used:
  3996 ;;		wreg, status,2, status,0
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4002 ;;      Params:         0       0       0       0       0       0       0
  4003 ;;      Locals:         0       1       0       0       0       0       0
  4004 ;;      Temps:          0       1       0       0       0       0       0
  4005 ;;      Totals:         0       2       0       0       0       0       0
  4006 ;;Total ram usage:        2 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_deplace
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text25
  4016  006F84                     __ptext25:
  4017                           	opt callstack 0
  4018  006F84                     _getAnalog:
  4019                           	opt callstack 29
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;incstack = 0
  4023                           ;getAnalog@canal stored from wreg
  4024  006F84  0100               	movlb	0	; force () banked
  4025  006F86  6FB9               	movwf	getAnalog@canal& (0+255),b
  4026  006F88                     
  4027                           ;main.c: 299: ADCON0bits.CHS = canal;
  4028  006F88  C0B9  F0B8         	movff	getAnalog@canal,??_getAnalog
  4029  006F8C  0100               	movlb	0	; force () banked
  4030  006F8E  47B8               	rlncf	??_getAnalog& (0+255),f,b
  4031  006F90  47B8               	rlncf	??_getAnalog& (0+255),f,b
  4032  006F92  50C2               	movf	194,w,c	;volatile
  4033  006F94  19B8               	xorwf	??_getAnalog& (0+255),w,b
  4034  006F96  0BC3               	andlw	-61
  4035  006F98  19B8               	xorwf	??_getAnalog& (0+255),w,b
  4036  006F9A  6EC2               	movwf	194,c	;volatile
  4037  006F9C                     
  4038                           ;main.c: 301: ADCON0bits.GO_DONE = 1;
  4039  006F9C  82C2               	bsf	194,1,c	;volatile
  4040  006F9E                     l128:
  4041  006F9E  B2C2               	btfsc	194,1,c	;volatile
  4042  006FA0  EFD4  F037         	goto	u271
  4043  006FA4  EFD6  F037         	goto	u270
  4044  006FA8                     u271:
  4045  006FA8  EFCF  F037         	goto	l128
  4046  006FAC                     u270:
  4047  006FAC                     
  4048                           ;main.c: 304: return ADRESH;
  4049  006FAC  50C4               	movf	196,w,c	;volatile
  4050  006FAE  0012               	return		;funcret
  4051  006FB0                     __end_of_getAnalog:
  4052                           	opt callstack 0
  4053  0000                     
  4054                           	psect	param0
  4055  0000                     tosu	equ	0xFFF
  4056                           tosh	equ	0xFFE
  4057                           tosl	equ	0xFFD
  4058                           stkptr	equ	0xFFC
  4059                           pclatu	equ	0xFFB
  4060                           pclath	equ	0xFFA
  4061                           pcl	equ	0xFF9
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           indf0	equ	0xFEF
  4069                           postinc0	equ	0xFEE
  4070                           postdec0	equ	0xFED
  4071                           preinc0	equ	0xFEC
  4072                           plusw0	equ	0xFEB
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           indf1	equ	0xFE7
  4077                           postinc1	equ	0xFE6
  4078                           postdec1	equ	0xFE5
  4079                           preinc1	equ	0xFE4
  4080                           plusw1	equ	0xFE3
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           bsr	equ	0xFE0
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           postdec2	equ	0xFDD
  4087                           preinc2	equ	0xFDC
  4088                           plusw2	equ	0xFDB
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        152
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     33     121
    BANK1           256      0     148
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabVue(BANK1[84]), m_tabMines(BANK0[84]), 

    deplace@y	PTR unsigned char  size(2) Largest target is 1
		 -> main@posY(BANK0[1]), 

    deplace@x	PTR unsigned char  size(2) Largest target is 1
		 -> main@posX(BANK0[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_rempliMines
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _initTabVue->_lcd_putMessage
    _lcd_putMessage->___wmul
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees
    _deplace->_getAnalog

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   12161
                                             28 BANK0      5     5      0
                             ___wmul
                            _deplace
                         _initTabVue
                     _initialisation
                         _lcd_gotoXY
                           _lcd_init
                     _lcd_putMessage
                   _metToucheCombien
                        _rempliMines
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                          8     6      2    1030
                                             20 BANK0      8     6      2
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     5     5      0    3094
                                             16 BANK0      5     5      0
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 10     6      4    2782
                                              6 BANK0     10     6      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           8     8      0    3432
                                              9 BANK0      8     8      0
                             ___wmul
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (1) _lcd_putMessage                                       3     1      2     555
                                              6 BANK0      3     1      2
                             ___wmul (ARG)
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (2) _lcd_ecritChar                                        2     2      0     313
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoXY                                           2     1      1     646
                                              3 BANK0      2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (3) _lcd_wrCom                                            1     1      0     156
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (4) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _lcd_busy                                             2     2      0      46
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (5) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1983
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _deplace                                              5     1      4     387
                                              2 BANK0      5     1      4
                          _getAnalog
 ---------------------------------------------------------------------------------
 (2) _getAnalog                                            2     2      0      15
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _deplace
     _getAnalog
   _initTabVue
     ___wmul
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       ___wmul (ARG)
       _lcd_ecritChar (ARG)
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _initialisation
     _srand
   _lcd_gotoXY
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_putMessage
     ___wmul (ARG)
     _lcd_ecritChar (ARG)
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _metToucheCombien
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      94       7       57.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10D      15        0.0%
DATA                 0      0     10D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 10:42:27 2019

 __end_of_calculToucheCombien 8000                            l77 7B06                            l85 7712  
                          l94 7968           ___wmul@multiplicand 00BA                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
__size_of_lcd_strobeEnableBit 0008                           l105 7FFE                           l131 6FAE  
                         l116 7634                           l230 6EFE                           l214 70FE  
                         l134 70B0                           l128 6F9E                           l160 705C  
                         l208 71A4                           l153 6EF6                           l161 7064  
                         l170 6FE2                           l227 74A8                           l156 6F32  
                         l173 72BC                           l182 6F06                           l159 7028  
                         l167 7328                           l280 6F5A                           l176 6F82  
                         l291 7384                           l524 755A                           l292 7394  
                         l197 7406                           l944 6F16                           l947 71FA  
                __CFG_CPB$OFF 000000                           u270 6FAC                           u271 6FA8  
                __CFG_CPD$OFF 000000                           u700 7384                           u701 7380  
                         u710 70FE                           u711 70FA                           u800 7D42  
                         u720 7B74                           u801 7D3E                           u721 7B70  
                         u810 7D5C                           u730 7B8E                           u811 7D58  
                         u731 7B8A                           u660 705C                           u900 7FC6  
                         u820 7DC6                           u740 7BA8                           u661 7058  
                         u901 7FC2                           u821 7DC2                           u741 7BA4  
                         u670 7302                           u910 7FF6                           u830 7DE0  
                         u750 7C12                           u671 72FE                           u911 7FF2  
                         u831 7DDC                           u751 7C0E                           u680 7316  
                         u920 7426                           u840 7E10                           u760 7C2C  
                         u681 7312                           u921 7422                           u841 7E0C  
                         u761 7C28                           u930 7442                           u850 7E72  
                         u770 7C8E                           u690 734A                           u931 743E  
                         u851 7E6E                           u771 7C8A                           u691 7346  
                         u940 748E                           u860 7EA2                           u780 7CA8  
                         u941 748A                           u861 7E9E                           u781 7CA4  
                         u950 74A4                           u870 7F04                           u790 7CD8  
                         u951 74A0                           u871 7F00                           u791 7CD4  
                         u880 7F34                           u960 74BE                           u881 7F30  
                         u961 74BA                           u890 7F64                           u970 74D8  
                         u891 7F60                           u971 74D4                           u980 74F2  
                         u981 74EE                           u990 7510                           u991 750C  
                __CFG_BORV$18 000000                  ___awmod@sign 00CB                   lcd_gotoXY@x 00BC  
                         wreg 000FE8                   lcd_gotoXY@y 00BB                  __CFG_LVP$OFF 000000  
                        l2001 79C2                          l2011 7A5C                          l2003 7A0A  
                        l2021 7AB4                          l2005 7A10                          l2013 7A7A  
                        l2023 7AE2                          l2015 7A84                          l2007 7A2E  
                        l2031 7670                          l2111 772C                          l2103 7714  
                        l2025 7AE8                          l2009 7A56                          l2041 7812  
                        l2033 76AE                          l2121 776A                          l2113 773A  
                        l2105 7720                          l2019 7AA6                          l2051 7844  
                        l2035 76DE                          l2027 7636                          l2131 77E2  
                        l2123 7778                          l2115 773E                          l2107 7724  
                        l2061 7940                          l2053 7882                          l2045 7828  
                        l2029 7640                          l2037 76E2                          l2133 77F2  
                        l2125 77A6                          l2117 7748                          l2109 7728  
                        l2071 7580                          l2055 78CE                          l2063 7952  
                        l2047 782E                          l2039 780C                          l2127 77AC  
                        l2081 75E2                          l2073 759A                          l2065 7956  
                        l2057 790C                          l2129 77CA                          l1291 6F9C  
                        l2091 7628                          l2083 75EC                          l2075 75A4  
                        l2067 755C                          l2059 793C                          l1293 6F9C  
                        l2085 7604                          l2077 75BE                          l2069 7576  
                        l1701 6FB8                          l1295 6FAC                          l2079 75C8  
                        l1711 6FCA                          l1703 6FBC                          l1289 6F88  
                        l2089 7610                          l1633 6EF2                          l1641 702C  
                        l1721 6FDA                          l1713 6FCE                          l1705 6FBC  
                        l1801 7C2C                          l1651 704A                          l1643 703C  
                        l1723 6FDE                          l1715 6FCE                          l1707 6FBE  
                        l1731 7166                          l1811 7CDC                          l1803 7C30  
                        l1741 6F34                          l1653 704C                          l1645 703E  
                        l1637 6F1C                          l1661 6EF8                          l1717 6FD6  
                        l1709 6FC0                          l1733 7170                          l1901 7478  
                        l1821 7DE0                          l1813 7D42                          l1805 7C8E  
                        l1743 6F52                          l1655 704C                          l1647 703E  
                        l1639 7024                          l1671 72CC                          l1663 72C2  
                        l1719 6FDA                          l1735 717A                          l1727 6F00  
                        l1903 747C                          l1831 7EA6                          l1823 7E10  
                        l1815 7D5C                          l1807 7CA8                          l1911 74AA  
                        l1751 734A                          l1657 705E                          l1649 7040  
                        l1681 72E4                          l1673 72CE                          l1665 72C6  
                        l1761 73AE                          l1729 7156                          l1905 748E  
                        l1841 7FC6                          l1833 7F04                          l1825 7E14  
                        l1817 7D60                          l1809 7CD8                          l1921 74D8  
                        l1913 74B0                          l1753 735A                          l1691 7320  
                        l1683 72E8                          l1675 72D8                          l1667 72CA  
                        l1763 73BE                          l1739 7184                          l1771 70B2  
                        l1907 7492                          l1851 7254                          l1843 7FF6  
                        l1835 7F34                          l1827 7E72                          l1819 7DC6  
                        l1931 7510                          l1923 74E0                          l1915 74BE  
                        l1755 7364                          l1747 732A                          l1693 7324  
                        l1685 72F0                          l1677 72DC                          l1669 72CA  
                        l1765 73CE                          l1757 739A                          l1773 70BC  
                        l1909 74A4                          l1861 7276                          l1853 7258  
                        l1845 7FFA                          l1837 7F64                          l1829 7EA2  
                        l1941 754A                          l1933 7526                          l1925 74F2  
                        l1917 74C6                          l1749 733C                          l1781 71DC  
                        l1695 7324                          l1687 7302                          l1679 72DC  
                        l1759 739E                          l1775 70D6                          l1951 7078  
                        l1871 7294                          l1863 727A                          l1855 726C  
                        l1839 7F68                          l1791 7B74                          l1943 7552  
                        l1935 752E                          l1927 74FA                          l1919 74CA  
                        l1783 71EE                          l1689 7316                          l1769 73DE  
                        l1777 70DA                          l1849 6F08                          l1961 708E  
                        l1953 707A                          l1881 72B0                          l1873 729A  
                        l1865 7282                          l1857 726E                          l1793 7B8E  
                        l1937 7534                          l1929 7502                          l1699 6FB4  
                        l1971 709C                          l1963 7090                          l1955 7086  
                        l1947 7066                          l1883 72B8                          l1875 729E  
                        l1867 7288                          l1859 7270                          l1795 7BA8  
                        l1787 7B08                          l1939 753A                          l1779 71A6  
                        l1981 70AC                          l1973 709E                          l1965 7094  
                        l1957 7088                          l1949 706E                          l1893 742A  
                        l1885 7408                          l1877 72A6                          l1869 728C  
                        l1797 7BAC                          l1789 7B0E                          l1991 7974  
                        l1983 70AE                          l1975 70A0                          l1967 7098  
                        l1959 708A                          l1895 7430                          l1887 740E  
                        l1879 72AC                          l1799 7C12                          l1977 70A8  
                        l1969 709A                          l1889 7414                          l1985 6F5C  
                        l1995 7996                          l1979 70AA                          l1899 7446  
                        l1987 6F7E                          l1997 79A0                          l1989 796A  
                        u1000 7526                          u1001 7522                          u1010 754A  
                        u1011 7546                          u1020 7992                          u1100 7824  
                        u1021 798E                          u1101 7820                          u1030 79BE  
                        u1110 7840                          u1031 79BA                          u1111 783C  
                        u1200 7604                          u1040 7A2E                          u1120 7882  
                        u1201 7600                          u1041 7A2A                          u1121 787E  
                        u1210 7628                          u1050 7A7A                          u1130 790C  
                        u1211 7624                          u1051 7A76                          u1131 7908  
                        u1060 7AA2                          u1140 7952                          u1061 7A9E  
                        u1141 794E                          u1070 7B06                          u1150 7968  
                        u1230 7766                          u1071 7B02                          u1151 7964  
                        u1231 7762                          u1160 7576                          u1080 76AE  
                        u1240 77CA                          u1161 7572                          u1081 76AA  
                        u1241 77C6                          u1170 759A                          u1090 7712  
                        u1171 7596                          u1307 72B2                          u1091 770E  
                        u1180 75BE                          u1181 75BA                          u1317 72EA  
                        u1190 75E2                          u1191 75DE                          u1327 7318  
                        u1257 77FA                          u1267 7260                          u1277 727C  
                        u1287 728E                          u1297 72A0                          _RCIF 007CF5  
                        _TMR1 000FCE              ??_initialisation 00BA                          _main 7714  
                        _rand 71A6                          fsr2h 000FDA                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000               ?_lcd_putMessage 00BE  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             ??_lcd_ecritChar 00BB                         ?_main 00B8                         ?_rand 00C4  
             __end_of___awmod 755C                         _ANSEL 000F7E                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _PORTD 000F83                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TXREG 000FAD  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000               __end_of_deplace 7636           ___lmul@multiplicand 00BC  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               ??_lcd_initCGRam 00BB                         _randx 0060  
                       _srand 6F08                         main@i 00D6                         tablat 000FF5  
                       status 000FD8                __CFG_HFOFST$ON 000000                __CFG_PBADEN$ON 000000  
            _metToucheCombien 780C               __initialization 7100                  __end_of_main 780C  
                __end_of_rand 71FC          lcd_putMessage@chaine 00BE    calculToucheCombien@colonne 00C0  
                      ??_main 00D4                        ??_rand 00C6                 __activetblptr 000003  
                      _ADCON1 000FC1                        _ADRESH 000FC4                        ?_srand 00B8  
                      _ANSELH 000F7F                   initTabVue@i 00C5                   initTabVue@j 00C3  
              __CFG_WDTEN$OFF 000000                  ?_rempliMines 00CC                        _SPBRGH 000FB0  
              __CFG_XINST$OFF 000000                lcd_initCGRam@i 00BD                lcd_initCGRam@j 00BE  
              getAnalog@canal 00B9              __end_of_lcd_busy 7066              __end_of_lcd_init 6F84  
                      ___lmul 732A                        ___wmul 6F34                __CFG_STVREN$ON 000000  
                   ??___awmod 00CA                        clear_0 7146               ___awmod@divisor 00C8  
                   ??_deplace 00BE               ___awmod@counter 00CA                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                        srand@x 00B8  
           _lcd_resetSequence 7254                    __accesstop 0060       __end_of__initialization 714C  
         _lcd_strobeEnableBit 6EF8            ?_lcd_resetSequence 00B8                 ___rparam_used 000000  
                __pidataBANK0 71FC                  __pidataBANK1 6FE4           ??_lcd_resetSequence 00BA  
               __end_of_srand 6F18          ?_lcd_strobeEnableBit 00B8            __size_of_getAnalog 002C  
          __size_of_lcd_wrCom 006C     __end_of_lcd_resetSequence 72BE                       ??_srand 00BA  
    __size_of_lcd_lireDonnees 0006             _lcd_ecrireDonnees 6F18                    __pbssBANK1 0100  
            ??_lcd_putMessage 00C0            ?_lcd_ecrireDonnees 00B8      __size_of_lcd_curseurHome 0008  
         ??_lcd_ecrireDonnees 00B8                       ?___lmul 00B8                       ?___wmul 00B8  
              ___lmul@product 00C0         ??_lcd_strobeEnableBit 00B8  __size_of_calculToucheCombien 04F8  
    __end_of_metToucheCombien 796A                    _lcd_gotoXY 7396                    _lcd_wrData 6FB0  
   __end_of_lcd_ecrireDonnees 6F34                     ?_lcd_busy 00B8                     ?_lcd_init 00B8  
     lcd_ecrireDonnees@donnee 00B9                    _m_tabMines 0064             __end_of_getAnalog 6FB0  
        __size_of_rempliMines 00DE                       __Hparam 0000                       __Lparam 0000  
                  _initTabVue 796A             __end_of_lcd_wrCom 732A               __size_of___lmul 006C  
                     ___awmod 74AA               __size_of___wmul 0028                       __pcinit 7100  
                   _ANSELbits 000F7E                       __ramtop 0600                       _deplace 755C  
                     __ptext0 7714                       __ptext1 7636                       __ptext2 71A6  
                     __ptext3 732A                       __ptext4 74AA                       __ptext5 780C  
                     __ptext6 7B08                       __ptext7 6F5C                       __ptext8 7254  
                     __ptext9 7408         __end_of_lcd_ecritChar 71A6                     _T0CONbits 000FD5  
             lcd_busy@adresse 00B9                     _T1CONbits 000FCD              ___awmod@dividend 00C6  
            lcd_ecritChar@car 00BB                    ??_lcd_busy 00B8                    ??_lcd_init 00BF  
  __size_of_lcd_resetSequence 006A          end_of_initialization 714C         __end_of_lcd_initCGRam 74AA  
           ??_lcd_lireDonnees 00B8                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_initialisation 004C  
           ??_lcd_curseurHome 00BB           lcd_ecritChar@posRam 00BC                     _PORTAbits 000F80  
                 ?_lcd_gotoXY 00BB                     _TRISCbits 000F94                   ?_lcd_wrData 00B8  
  __size_of_lcd_ecrireDonnees 001C                     _TXSTAbits 000FAC                   ?_initTabVue 00B8  
              __end_of___lmul 7396                __end_of___wmul 6F5C                   _BAUDCONbits 000FB8  
         start_initialization 7100           _calculToucheCombien 7B08           __size_of_lcd_gotoXY 0072  
calculToucheCombien@countMine 00C7                      ??___lmul 00C0                      ??___wmul 00BC  
               rempliMines@nb 00CC           __size_of_lcd_wrData 0034                   __pdataBANK0 0060  
                 __pdataBANK1 0154              __CFG_LPT1OSC$OFF 000000          ?_calculToucheCombien 00BE  
               __pcstackBANK0 00B8             ?_metToucheCombien 00B8           __size_of_initTabVue 019E  
          ??_metToucheCombien 00C8             __size_of_lcd_busy 0042             __size_of_lcd_init 0028  
           __CFG_CCP2MX$PORTC 000000                     _getAnalog 6F84   __end_of_lcd_strobeEnableBit 6F00  
              _initialisation 7066                      ?___awmod 00C6                      ?_deplace 00BA  
                   _lcd_wrCom 72BE         ??_calculToucheCombien 00C2               _lcd_lireDonnees 6EF2  
         lcd_wrData@caractere 00BA                __size_of_srand 0010                 ??_rempliMines 00CE  
             _lcd_curseurHome 6F00                ___wmul@product 00BC        __end_of_initialisation 70B2  
                  ?_getAnalog 00B8              __CFG_WDTPS$32768 000000       __size_of_lcd_putMessage 004E  
                  ?_lcd_wrCom 00B8                    _ADCON0bits 000FC2                    _ADCON2bits 000FC0  
           ___wmul@multiplier 00B8                  ??_lcd_gotoXY 00BC                  ??_lcd_wrData 00BA  
           lcd_wrCom@commande 00BA             ___lmul@multiplier 00B8                     copy_data0 7114  
                   copy_data1 7134                      __Hparam0 0000        __size_of_lcd_ecritChar 0054  
                    __Lparam0 0000               ?_initialisation 00B8           __end_of_rempliMines 7714  
                ??_initTabVue 00C1            __CFG_BOREN$SBORDIS 000000                  rempliMines@i 00D1  
                rempliMines@x 00D2                  rempliMines@y 00D3            __end_of_lcd_gotoXY 7408  
          __end_of_lcd_wrData 6FE4              __size_of___awmod 00B2        __size_of_lcd_initCGRam 00A2  
             lcd_putMessage@j 00C0              __size_of_deplace 00DA       __end_of_lcd_lireDonnees 6EF8  
                    _matCGRAM 0154       __end_of_lcd_curseurHome 6F08                      __ptext10 6F00  
                    __ptext11 7066                      __ptext20 6F18                      __ptext12 6F08  
                    __ptext21 7024                      __ptext13 796A                      __ptext22 6EF2  
                    __ptext14 70B2                      __ptext23 6F34                      __ptext15 7152  
                    __ptext24 755C                      __ptext16 6FB0                      __ptext25 6F84  
                    __ptext17 7396                      __ptext18 72BE                      __ptext19 6EF8  
           metToucheCombien@i 00CB             metToucheCombien@j 00CC                      _lcd_busy 7024  
                    _lcd_init 6F5C            __end_of_initTabVue 7B08      calculToucheCombien@ligne 00BE  
                    _m_tabVue 0100                 __size_of_main 00F8                 __size_of_rand 0056  
             initTabVue@i_355 00C7                      deplace@x 00BA                      deplace@y 00BC  
                 ??_getAnalog 00B8                      main@posX 00D8                      main@posY 00D5  
                 ??_lcd_wrCom 00BA                 _lcd_ecritChar 7152                    _INTCONbits 000FF2  
               _lcd_initCGRam 7408                   _rempliMines 7636     __size_of_metToucheCombien 015E  
              _lcd_putMessage 70B2                ?_lcd_ecritChar 00B8              ?_lcd_lireDonnees 00B8  
            ?_lcd_curseurHome 00B8                ?_lcd_initCGRam 00B8             __CFG_FOSC$INTIO67 000000  
      __end_of_lcd_putMessage 7100  
