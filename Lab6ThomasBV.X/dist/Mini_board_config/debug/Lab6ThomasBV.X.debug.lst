

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 12:02:29 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2,minocg
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1,minocg
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1,minocg
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2,minocg
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,minocg
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,minocg
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,minocg
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1,minocg
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F45K20 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  006EDC                     __pidataBANK0:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _randx
    83  006EDC  0001               	dw	1
    84  006EDE  0000               	dw	0
    85                           
    86                           ;initializer for _m_tabMines
    87  006EE0  20                 	db	32
    88  006EE1  20                 	db	32
    89  006EE2  20                 	db	32
    90  006EE3  20                 	db	32
    91  006EE4  20                 	db	32
    92  006EE5  20                 	db	32
    93  006EE6  20                 	db	32
    94  006EE7  20                 	db	32
    95  006EE8  20                 	db	32
    96  006EE9  20                 	db	32
    97  006EEA  20                 	db	32
    98  006EEB  20                 	db	32
    99  006EEC  20                 	db	32
   100  006EED  20                 	db	32
   101  006EEE  20                 	db	32
   102  006EEF  20                 	db	32
   103  006EF0  20                 	db	32
   104  006EF1  20                 	db	32
   105  006EF2  20                 	db	32
   106  006EF3  20                 	db	32
   107  006EF4  00                 	db	0
   108  006EF5  20                 	db	32
   109  006EF6  20                 	db	32
   110  006EF7  20                 	db	32
   111  006EF8  20                 	db	32
   112  006EF9  20                 	db	32
   113  006EFA  20                 	db	32
   114  006EFB  20                 	db	32
   115  006EFC  20                 	db	32
   116  006EFD  20                 	db	32
   117  006EFE  20                 	db	32
   118  006EFF  20                 	db	32
   119  006F00  20                 	db	32
   120  006F01  20                 	db	32
   121  006F02  20                 	db	32
   122  006F03  20                 	db	32
   123  006F04  20                 	db	32
   124  006F05  20                 	db	32
   125  006F06  20                 	db	32
   126  006F07  20                 	db	32
   127  006F08  20                 	db	32
   128  006F09  00                 	db	0
   129  006F0A  20                 	db	32
   130  006F0B  20                 	db	32
   131  006F0C  20                 	db	32
   132  006F0D  20                 	db	32
   133  006F0E  20                 	db	32
   134  006F0F  20                 	db	32
   135  006F10  20                 	db	32
   136  006F11  20                 	db	32
   137  006F12  20                 	db	32
   138  006F13  20                 	db	32
   139  006F14  20                 	db	32
   140  006F15  20                 	db	32
   141  006F16  20                 	db	32
   142  006F17  20                 	db	32
   143  006F18  20                 	db	32
   144  006F19  20                 	db	32
   145  006F1A  20                 	db	32
   146  006F1B  20                 	db	32
   147  006F1C  20                 	db	32
   148  006F1D  20                 	db	32
   149  006F1E  00                 	db	0
   150  006F1F  20                 	db	32
   151  006F20  20                 	db	32
   152  006F21  20                 	db	32
   153  006F22  20                 	db	32
   154  006F23  20                 	db	32
   155  006F24  20                 	db	32
   156  006F25  20                 	db	32
   157  006F26  20                 	db	32
   158  006F27  20                 	db	32
   159  006F28  20                 	db	32
   160  006F29  20                 	db	32
   161  006F2A  20                 	db	32
   162  006F2B  20                 	db	32
   163  006F2C  20                 	db	32
   164  006F2D  20                 	db	32
   165  006F2E  20                 	db	32
   166  006F2F  20                 	db	32
   167  006F30  20                 	db	32
   168  006F31  20                 	db	32
   169  006F32  20                 	db	32
   170  006F33  00                 	db	0
   171                           
   172                           	psect	idataBANK1
   173  006CC4                     __pidataBANK1:
   174                           	opt callstack 0
   175                           
   176                           ;initializer for _matCGRAM
   177  006CC4  08                 	db	8
   178  006CC5  04                 	db	4
   179  006CC6  04                 	db	4
   180  006CC7  0A                 	db	10
   181  006CC8  11                 	db	17
   182  006CC9  1F                 	db	31
   183  006CCA  11                 	db	17
   184  006CCB  00                 	db	0
   185  006CCC  00                 	db	0
   186  006CCD  0E                 	db	14
   187  006CCE  1F                 	db	31
   188  006CCF  1F                 	db	31
   189  006CD0  1F                 	db	31
   190  006CD1  1F                 	db	31
   191  006CD2  0E                 	db	14
   192  006CD3  00                 	db	0
   193  006CD4  08                 	db	8
   194  006CD5  14                 	db	20
   195  006CD6  04                 	db	4
   196  006CD7  0E                 	db	14
   197  006CD8  1F                 	db	31
   198  006CD9  1F                 	db	31
   199  006CDA  1F                 	db	31
   200  006CDB  0E                 	db	14
   201  006CDC  0A                 	db	10
   202  006CDD  11                 	db	17
   203  006CDE  0A                 	db	10
   204  006CDF  0E                 	db	14
   205  006CE0  1B                 	db	27
   206  006CE1  0E                 	db	14
   207  006CE2  04                 	db	4
   208  006CE3  04                 	db	4
   209  006CE4  0A                 	db	10
   210  006CE5  0A                 	db	10
   211  006CE6  0A                 	db	10
   212  006CE7  0E                 	db	14
   213  006CE8  1B                 	db	27
   214  006CE9  11                 	db	17
   215  006CEA  1F                 	db	31
   216  006CEB  15                 	db	21
   217  006CEC  04                 	db	4
   218  006CED  0A                 	db	10
   219  006CEE  0E                 	db	14
   220  006CEF  11                 	db	17
   221  006CF0  1F                 	db	31
   222  006CF1  10                 	db	16
   223  006CF2  0E                 	db	14
   224  006CF3  00                 	db	0
   225  006CF4  08                 	db	8
   226  006CF5  04                 	db	4
   227  006CF6  0E                 	db	14
   228  006CF7  01                 	db	1
   229  006CF8  0F                 	db	15
   230  006CF9  11                 	db	17
   231  006CFA  0F                 	db	15
   232  006CFB  00                 	db	0
   233  006CFC  04                 	db	4
   234  006CFD  0A                 	db	10
   235  006CFE  0E                 	db	14
   236  006CFF  01                 	db	1
   237  006D00  0F                 	db	15
   238  006D01  11                 	db	17
   239  006D02  0F                 	db	15
   240  006D03  00                 	db	0
   241  0000                     _TRISCbits	set	3988
   242  0000                     _PORTAbits	set	3968
   243  0000                     _PORTD	set	3971
   244  0000                     _ANSELbits	set	3966
   245  0000                     _TRISA	set	3986
   246  0000                     _ANSEL	set	3966
   247  0000                     _TRISB	set	3987
   248  0000                     _ANSELH	set	3967
   249  0000                     _TRISD	set	3989
   250  0000                     _PORTBbits	set	3969
   251  0000                     _TMR1	set	4046
   252  0000                     _RCREG	set	4014
   253  0000                     _TXREG	set	4013
   254  0000                     _RCSTAbits	set	4011
   255  0000                     _TXSTAbits	set	4012
   256  0000                     _BAUDCONbits	set	4024
   257  0000                     _SPBRG	set	4015
   258  0000                     _SPBRGH	set	4016
   259  0000                     _ADCON2bits	set	4032
   260  0000                     _ADCON1	set	4033
   261  0000                     _T1CONbits	set	4045
   262  0000                     _ADRESH	set	4036
   263  0000                     _ADCON0bits	set	4034
   264  0000                     _RCIF	set	31989
   265  0000                     _T0CONbits	set	4053
   266  0000                     _INTCONbits	set	4082
   267                           
   268                           ; #config settings
   269  0000                     
   270                           	psect	cinit
   271  006DE0                     __pcinit:
   272                           	opt callstack 0
   273  006DE0                     start_initialization:
   274                           	opt callstack 0
   275  006DE0                     __initialization:
   276                           	opt callstack 0
   277                           
   278                           ; Initialize objects allocated to BANK1 (64 bytes)
   279                           ; load TBLPTR registers with __pidataBANK1
   280  006DE0  0EC4               	movlw	low __pidataBANK1
   281  006DE2  6EF6               	movwf	tblptrl,c
   282  006DE4  0E6C               	movlw	high __pidataBANK1
   283  006DE6  6EF7               	movwf	tblptrh,c
   284  006DE8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   285  006DEA  6EF8               	movwf	tblptru,c
   286  006DEC  EE01  F054         	lfsr	0,__pdataBANK1
   287  006DF0  EE10 F040          	lfsr	1,64
   288  006DF4                     copy_data0:
   289  006DF4  0009               	tblrd		*+
   290  006DF6  CFF5 FFEE          	movff	tablat,postinc0
   291  006DFA  50E5               	movf	postdec1,w,c
   292  006DFC  50E1               	movf	fsr1l,w,c
   293  006DFE  E1FA               	bnz	copy_data0
   294                           
   295                           ; Initialize objects allocated to BANK0 (88 bytes)
   296                           ; load TBLPTR registers with __pidataBANK0
   297  006E00  0EDC               	movlw	low __pidataBANK0
   298  006E02  6EF6               	movwf	tblptrl,c
   299  006E04  0E6E               	movlw	high __pidataBANK0
   300  006E06  6EF7               	movwf	tblptrh,c
   301  006E08  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   302  006E0A  6EF8               	movwf	tblptru,c
   303  006E0C  EE00  F060         	lfsr	0,__pdataBANK0
   304  006E10  EE10 F058          	lfsr	1,88
   305  006E14                     copy_data1:
   306  006E14  0009               	tblrd		*+
   307  006E16  CFF5 FFEE          	movff	tablat,postinc0
   308  006E1A  50E5               	movf	postdec1,w,c
   309  006E1C  50E1               	movf	fsr1l,w,c
   310  006E1E  E1FA               	bnz	copy_data1
   311                           
   312                           ; Clear objects allocated to BANK1 (84 bytes)
   313  006E20  EE01  F000         	lfsr	0,__pbssBANK1
   314  006E24  0E54               	movlw	84
   315  006E26                     clear_0:
   316  006E26  6AEE               	clrf	postinc0,c
   317  006E28  06E8               	decf	wreg,f,c
   318  006E2A  E1FD               	bnz	clear_0
   319  006E2C                     end_of_initialization:
   320                           	opt callstack 0
   321  006E2C                     __end_of__initialization:
   322                           	opt callstack 0
   323  006E2C  0100               	movlb	0
   324  006E2E  EFEC  F038         	goto	_main	;jump to C main() function
   325                           
   326                           	psect	dataBANK0
   327  000060                     __pdataBANK0:
   328                           	opt callstack 0
   329  000060                     _randx:
   330                           	opt callstack 0
   331  000060                     	ds	4
   332  000064                     _m_tabMines:
   333                           	opt callstack 0
   334  000064                     	ds	84
   335                           
   336                           	psect	bssBANK1
   337  000100                     __pbssBANK1:
   338                           	opt callstack 0
   339  000100                     _m_tabVue:
   340                           	opt callstack 0
   341  000100                     	ds	84
   342                           
   343                           	psect	dataBANK1
   344  000154                     __pdataBANK1:
   345                           	opt callstack 0
   346  000154                     _matCGRAM:
   347                           	opt callstack 0
   348  000154                     	ds	64
   349                           
   350                           	psect	cstackBANK0
   351  0000B8                     __pcstackBANK0:
   352                           	opt callstack 0
   353  0000B8                     ??_getAnalog:
   354  0000B8                     ??_lcd_ecrireDonnees:
   355  0000B8                     ??_lcd_busy:
   356  0000B8                     ?___wmul:
   357                           	opt callstack 0
   358  0000B8                     ?___lmul:
   359                           	opt callstack 0
   360  0000B8                     demine@y:
   361                           	opt callstack 0
   362  0000B8                     ___wmul@multiplier:
   363                           	opt callstack 0
   364  0000B8                     srand@x:
   365                           	opt callstack 0
   366  0000B8                     ___lmul@multiplier:
   367                           	opt callstack 0
   368                           
   369                           ; 4 bytes @ 0x0
   370  0000B8                     	ds	1
   371  0000B9                     ??_demine:
   372  0000B9                     getAnalog@canal:
   373                           	opt callstack 0
   374  0000B9                     lcd_ecrireDonnees@donnee:
   375                           	opt callstack 0
   376  0000B9                     lcd_busy@adresse:
   377                           	opt callstack 0
   378                           
   379                           ; 1 bytes @ 0x1
   380  0000B9                     	ds	1
   381  0000BA                     ??_lcd_resetSequence:
   382  0000BA                     lcd_wrCom@commande:
   383                           	opt callstack 0
   384  0000BA                     lcd_wrData@caractere:
   385                           	opt callstack 0
   386  0000BA                     ___wmul@multiplicand:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x2
   390  0000BA                     	ds	1
   391  0000BB                     ??_lcd_initCGRam:
   392  0000BB                     lcd_gotoXY@y:
   393                           	opt callstack 0
   394  0000BB                     lcd_ecritChar@car:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x3
   398  0000BB                     	ds	1
   399  0000BC                     lcd_gotoXY@x:
   400                           	opt callstack 0
   401  0000BC                     lcd_ecritChar@posRam:
   402                           	opt callstack 0
   403  0000BC                     ___wmul@product:
   404                           	opt callstack 0
   405  0000BC                     ___lmul@multiplicand:
   406                           	opt callstack 0
   407                           
   408                           ; 4 bytes @ 0x4
   409  0000BC                     	ds	1
   410  0000BD                     demine@x:
   411                           	opt callstack 0
   412  0000BD                     lcd_initCGRam@i:
   413                           	opt callstack 0
   414  0000BD                     deplace@x:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x5
   418  0000BD                     	ds	1
   419  0000BE                     ??_initTabVue:
   420  0000BE                     lcd_initCGRam@j:
   421                           	opt callstack 0
   422  0000BE                     calculToucheCombien@ligne:
   423                           	opt callstack 0
   424  0000BE                     lcd_putMessage@chaine:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x6
   428  0000BE                     	ds	1
   429  0000BF                     deplace@y:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x7
   433  0000BF                     	ds	1
   434  0000C0                     lcd_putMessage@j:
   435                           	opt callstack 0
   436  0000C0                     initTabVue@j:
   437                           	opt callstack 0
   438  0000C0                     calculToucheCombien@colonne:
   439                           	opt callstack 0
   440  0000C0                     ___lmul@product:
   441                           	opt callstack 0
   442                           
   443                           ; 4 bytes @ 0x8
   444  0000C0                     	ds	1
   445  0000C1                     ??_deplace:
   446  0000C1                     afficheTabVue@i:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x9
   450  0000C1                     	ds	1
   451  0000C2                     ??_calculToucheCombien:
   452  0000C2                     initTabVue@i:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0xA
   456  0000C2                     	ds	2
   457  0000C4                     ?_rand:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0xC
   461  0000C4                     	ds	2
   462  0000C6                     ?___awmod:
   463                           	opt callstack 0
   464  0000C6                     ___awmod@dividend:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0xE
   468  0000C6                     	ds	1
   469  0000C7                     calculToucheCombien@countMine:
   470                           	opt callstack 0
   471                           
   472                           ; 1 bytes @ 0xF
   473  0000C7                     	ds	1
   474  0000C8                     ??_metToucheCombien:
   475  0000C8                     ___awmod@divisor:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x10
   479  0000C8                     	ds	2
   480  0000CA                     ___awmod@counter:
   481                           	opt callstack 0
   482                           
   483                           ; 1 bytes @ 0x12
   484  0000CA                     	ds	1
   485  0000CB                     metToucheCombien@i:
   486                           	opt callstack 0
   487  0000CB                     ___awmod@sign:
   488                           	opt callstack 0
   489                           
   490                           ; 1 bytes @ 0x13
   491  0000CB                     	ds	1
   492  0000CC                     metToucheCombien@j:
   493                           	opt callstack 0
   494  0000CC                     rempliMines@nb:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x14
   498  0000CC                     	ds	2
   499  0000CE                     ??_rempliMines:
   500                           
   501                           ; 1 bytes @ 0x16
   502  0000CE                     	ds	3
   503  0000D1                     rempliMines@i:
   504                           	opt callstack 0
   505                           
   506                           ; 1 bytes @ 0x19
   507  0000D1                     	ds	1
   508  0000D2                     rempliMines@x:
   509                           	opt callstack 0
   510                           
   511                           ; 1 bytes @ 0x1A
   512  0000D2                     	ds	1
   513  0000D3                     rempliMines@y:
   514                           	opt callstack 0
   515                           
   516                           ; 1 bytes @ 0x1B
   517  0000D3                     	ds	1
   518  0000D4                     ??_main:
   519                           
   520                           ; 1 bytes @ 0x1C
   521  0000D4                     	ds	1
   522  0000D5                     main@posY:
   523                           	opt callstack 0
   524                           
   525                           ; 1 bytes @ 0x1D
   526  0000D5                     	ds	1
   527  0000D6                     main@posX:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x1E
   531  0000D6                     	ds	1
   532                           
   533 ;;
   534 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   535 ;;
   536 ;; *************** function _main *****************
   537 ;; Defined at:
   538 ;;		line 64 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  posX            1   30[BANK0 ] unsigned char 
   543 ;;  posY            1   29[BANK0 ] unsigned char 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   553 ;;      Params:         0       0       0       0       0       0       0
   554 ;;      Locals:         0       2       0       0       0       0       0
   555 ;;      Temps:          0       1       0       0       0       0       0
   556 ;;      Totals:         0       3       0       0       0       0       0
   557 ;;Total ram usage:        3 bytes
   558 ;; Hardware stack levels required when called:    6
   559 ;; This function calls:
   560 ;;		_afficheTabVue
   561 ;;		_demine
   562 ;;		_deplace
   563 ;;		_initTabVue
   564 ;;		_initialisation
   565 ;;		_lcd_init
   566 ;;		_metToucheCombien
   567 ;;		_rempliMines
   568 ;; This function is called by:
   569 ;;		Startup code after reset
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           	psect	text0
   574  0071D8                     __ptext0:
   575                           	opt callstack 0
   576  0071D8                     _main:
   577                           	opt callstack 25
   578  0071D8                     
   579                           ;main.c: 66: char posY=1;
   580  0071D8  0E01               	movlw	1
   581  0071DA  0100               	movlb	0	; force () banked
   582  0071DC  6FD5               	movwf	main@posY& (0+255),b
   583                           
   584                           ;main.c: 67: char posX=1;
   585  0071DE  0E01               	movlw	1
   586  0071E0  0100               	movlb	0	; force () banked
   587  0071E2  6FD6               	movwf	main@posX& (0+255),b
   588  0071E4                     
   589                           ; BSR set to: 0
   590                           ;main.c: 69: initialisation();
   591  0071E4  ECA3  F036         	call	_initialisation	;wreg free
   592  0071E8                     
   593                           ;main.c: 70: lcd_init();
   594  0071E8  EC1E  F036         	call	_lcd_init	;wreg free
   595  0071EC                     
   596                           ;main.c: 71: initTabVue();
   597  0071EC  EC4D  F03A         	call	_initTabVue	;wreg free
   598  0071F0                     
   599                           ;main.c: 72: afficheTabVue();
   600  0071F0  ECA5  F038         	call	_afficheTabVue	;wreg free
   601  0071F4                     
   602                           ;main.c: 73: rempliMines(5);
   603  0071F4  0E00               	movlw	0
   604  0071F6  0100               	movlb	0	; force () banked
   605  0071F8  6FCD               	movwf	(rempliMines@nb+1)& (0+255),b
   606  0071FA  0E05               	movlw	5
   607  0071FC  6FCC               	movwf	rempliMines@nb& (0+255),b
   608  0071FE  ECDE  F039         	call	_rempliMines	;wreg free
   609  007202                     
   610                           ;main.c: 74: metToucheCombien();
   611  007202  EC75  F03B         	call	_metToucheCombien	;wreg free
   612  007206                     l2138:
   613                           
   614                           ;main.c: 85: {;main.c: 86: deplace(&posX,&posY);
   615  007206  0ED6               	movlw	low main@posX
   616  007208  0100               	movlb	0	; force () banked
   617  00720A  6FBD               	movwf	deplace@x& (0+255),b
   618  00720C  0E00               	movlw	high main@posX
   619  00720E  6FBE               	movwf	(deplace@x+1)& (0+255),b
   620  007210  0ED5               	movlw	low main@posY
   621  007212  0100               	movlb	0	; force () banked
   622  007214  6FBF               	movwf	deplace@y& (0+255),b
   623  007216  0E00               	movlw	high main@posY
   624  007218  6FC0               	movwf	(deplace@y+1)& (0+255),b
   625  00721A  ECD6  F03A         	call	_deplace	;wreg free
   626  00721E                     
   627                           ;main.c: 87: if(PORTBbits.RB1==0)
   628  00721E  B281               	btfsc	129,1,c	;volatile
   629  007220  EF14  F039         	goto	u1271
   630  007224  EF16  F039         	goto	u1270
   631  007228                     u1271:
   632  007228  EF27  F039         	goto	l2148
   633  00722C                     u1270:
   634  00722C                     l71:
   635  00722C  A281               	btfss	129,1,c	;volatile
   636  00722E  EF1B  F039         	goto	u1281
   637  007232  EF1D  F039         	goto	u1280
   638  007236                     u1281:
   639  007236  EF16  F039         	goto	l71
   640  00723A                     u1280:
   641  00723A                     
   642                           ;main.c: 90: demine(posX-1,posY-1);
   643  00723A  0100               	movlb	0	; force () banked
   644  00723C  05D5               	decf	main@posY& (0+255),w,b
   645  00723E  0100               	movlb	0	; force () banked
   646  007240  6FB8               	movwf	demine@y& (0+255),b
   647  007242  0100               	movlb	0	; force () banked
   648  007244  05D6               	decf	main@posX& (0+255),w,b
   649  007246  EC9A  F037         	call	_demine
   650  00724A                     
   651                           ;main.c: 91: afficheTabVue();
   652  00724A  ECA5  F038         	call	_afficheTabVue	;wreg free
   653  00724E                     l2148:
   654                           
   655                           ;main.c: 92: };main.c: 93: _delay((unsigned long)((100)*(1000000/4000.0)));
   656  00724E  0E21               	movlw	33
   657  007250  0100               	movlb	0	; force () banked
   658  007252  6FD4               	movwf	??_main& (0+255),b
   659  007254  0E76               	movlw	118
   660  007256                     u1297:
   661  007256  2EE8               	decfsz	wreg,f,c
   662  007258  D7FE               	bra	u1297
   663  00725A  2FD4               	decfsz	??_main& (0+255),f,b
   664  00725C  D7FC               	bra	u1297
   665  00725E  F000               	nop	
   666  007260  EF03  F039         	goto	l2138
   667  007264  EF00  F000         	goto	start
   668  007268                     __end_of_main:
   669                           	opt callstack 0
   670                           
   671 ;; *************** function _rempliMines *****************
   672 ;; Defined at:
   673 ;;		line 136 in file "main.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  nb              2   20[BANK0 ] int 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  i               1   25[BANK0 ] unsigned char 
   678 ;;  y               1   27[BANK0 ] unsigned char 
   679 ;;  x               1   26[BANK0 ] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   689 ;;      Params:         0       2       0       0       0       0       0
   690 ;;      Locals:         0       3       0       0       0       0       0
   691 ;;      Temps:          0       3       0       0       0       0       0
   692 ;;      Totals:         0       8       0       0       0       0       0
   693 ;;Total ram usage:        8 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    2
   696 ;; This function calls:
   697 ;;		___awmod
   698 ;;		_rand
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text1
   705  0073BC                     __ptext1:
   706                           	opt callstack 0
   707  0073BC                     _rempliMines:
   708                           	opt callstack 28
   709  0073BC                     
   710                           ;main.c: 138: char x;;main.c: 139: char y;;main.c: 140: for(char i=0;i<nb;i++)
   711  0073BC  0E00               	movlw	0
   712  0073BE  0100               	movlb	0	; force () banked
   713  0073C0  6FD1               	movwf	rempliMines@i& (0+255),b
   714  0073C2  EF34  F03A         	goto	l2050
   715  0073C6                     l2042:
   716                           
   717                           ; BSR set to: 0
   718                           ;main.c: 143: {;main.c: 144: y=rand()%4;
   719  0073C6  EC43  F037         	call	_rand	;wreg free
   720  0073CA  0100               	movlb	0	; force () banked
   721  0073CC  51C4               	movf	?_rand& (0+255),w,b
   722  0073CE  0B03               	andlw	3
   723  0073D0  0100               	movlb	0	; force () banked
   724  0073D2  6FD3               	movwf	rempliMines@y& (0+255),b
   725                           
   726                           ;main.c: 145: x=rand()%20;
   727  0073D4  EC43  F037         	call	_rand	;wreg free
   728  0073D8  C0C4  F0C6         	movff	?_rand,___awmod@dividend
   729  0073DC  C0C5  F0C7         	movff	?_rand+1,___awmod@dividend+1
   730  0073E0  0E00               	movlw	0
   731  0073E2  0100               	movlb	0	; force () banked
   732  0073E4  6FC9               	movwf	(___awmod@divisor+1)& (0+255),b
   733  0073E6  0E14               	movlw	20
   734  0073E8  6FC8               	movwf	___awmod@divisor& (0+255),b
   735  0073EA  EC85  F039         	call	___awmod	;wreg free
   736  0073EE  0100               	movlb	0	; force () banked
   737  0073F0  51C6               	movf	?___awmod& (0+255),w,b
   738  0073F2  0100               	movlb	0	; force () banked
   739  0073F4  6FD2               	movwf	rempliMines@x& (0+255),b
   740  0073F6                     
   741                           ; BSR set to: 0
   742                           ;main.c: 146: }while(m_tabMines[y][x]!=' ');
   743  0073F6  0100               	movlb	0	; force () banked
   744  0073F8  51D3               	movf	rempliMines@y& (0+255),w,b
   745  0073FA  0D15               	mullw	21
   746  0073FC  0E64               	movlw	low _m_tabMines
   747  0073FE  0100               	movlb	0	; force () banked
   748  007400  6FCE               	movwf	??_rempliMines& (0+255),b
   749  007402  0E00               	movlw	high _m_tabMines
   750  007404  6FCF               	movwf	(??_rempliMines+1)& (0+255),b
   751  007406  50F3               	movf	243,w,c
   752  007408  27CE               	addwf	??_rempliMines& (0+255),f,b
   753  00740A  50F4               	movf	244,w,c
   754  00740C  23CF               	addwfc	(??_rempliMines+1)& (0+255),f,b
   755  00740E  0100               	movlb	0	; force () banked
   756  007410  51D2               	movf	rempliMines@x& (0+255),w,b
   757  007412  0100               	movlb	0	; force () banked
   758  007414  25CE               	addwf	??_rempliMines& (0+255),w,b
   759  007416  6ED9               	movwf	fsr2l,c
   760  007418  0100               	movlb	0	; force () banked
   761  00741A  0E00               	movlw	0
   762  00741C  0100               	movlb	0	; force () banked
   763  00741E  21CF               	addwfc	(??_rempliMines+1)& (0+255),w,b
   764  007420  6EDA               	movwf	fsr2h,c
   765  007422  0E20               	movlw	32
   766  007424  18DE               	xorwf	postinc2,w,c
   767  007426  A4D8               	btfss	status,2,c
   768  007428  EF18  F03A         	goto	u1101
   769  00742C  EF1A  F03A         	goto	u1100
   770  007430                     u1101:
   771  007430  EFE3  F039         	goto	l2042
   772  007434                     u1100:
   773  007434                     
   774                           ; BSR set to: 0
   775                           ;main.c: 147: m_tabMines[y][x]=2;
   776  007434  0100               	movlb	0	; force () banked
   777  007436  51D3               	movf	rempliMines@y& (0+255),w,b
   778  007438  0D15               	mullw	21
   779  00743A  0E64               	movlw	low _m_tabMines
   780  00743C  0100               	movlb	0	; force () banked
   781  00743E  6FCE               	movwf	??_rempliMines& (0+255),b
   782  007440  0E00               	movlw	high _m_tabMines
   783  007442  6FCF               	movwf	(??_rempliMines+1)& (0+255),b
   784  007444  50F3               	movf	243,w,c
   785  007446  27CE               	addwf	??_rempliMines& (0+255),f,b
   786  007448  50F4               	movf	244,w,c
   787  00744A  23CF               	addwfc	(??_rempliMines+1)& (0+255),f,b
   788  00744C  0100               	movlb	0	; force () banked
   789  00744E  51D2               	movf	rempliMines@x& (0+255),w,b
   790  007450  0100               	movlb	0	; force () banked
   791  007452  25CE               	addwf	??_rempliMines& (0+255),w,b
   792  007454  6ED9               	movwf	fsr2l,c
   793  007456  0100               	movlb	0	; force () banked
   794  007458  0E00               	movlw	0
   795  00745A  0100               	movlb	0	; force () banked
   796  00745C  21CF               	addwfc	(??_rempliMines+1)& (0+255),w,b
   797  00745E  6EDA               	movwf	fsr2h,c
   798  007460  0E02               	movlw	2
   799  007462  6EDF               	movwf	indf2,c
   800  007464                     
   801                           ; BSR set to: 0
   802  007464  0100               	movlb	0	; force () banked
   803  007466  2BD1               	incf	rempliMines@i& (0+255),f,b
   804  007468                     l2050:
   805                           
   806                           ; BSR set to: 0
   807  007468  0100               	movlb	0	; force () banked
   808  00746A  51D1               	movf	rempliMines@i& (0+255),w,b
   809  00746C  0100               	movlb	0	; force () banked
   810  00746E  6FCE               	movwf	??_rempliMines& (0+255),b
   811  007470  6BCF               	clrf	(??_rempliMines+1)& (0+255),b
   812  007472  0100               	movlb	0	; force () banked
   813  007474  51CC               	movf	rempliMines@nb& (0+255),w,b
   814  007476  0100               	movlb	0	; force () banked
   815  007478  5DCE               	subwf	??_rempliMines& (0+255),w,b
   816  00747A  51CF               	movf	(??_rempliMines+1)& (0+255),w,b
   817  00747C  0A80               	xorlw	128
   818  00747E  6FD0               	movwf	(??_rempliMines+2)& (0+255),b
   819  007480  0100               	movlb	0	; force () banked
   820  007482  51CD               	movf	(rempliMines@nb+1)& (0+255),w,b
   821  007484  0A80               	xorlw	128
   822  007486  0100               	movlb	0	; force () banked
   823  007488  59D0               	subwfb	(??_rempliMines+2)& (0+255),w,b
   824  00748A  A0D8               	btfss	status,0,c
   825  00748C  EF4A  F03A         	goto	u1111
   826  007490  EF4C  F03A         	goto	u1110
   827  007494                     u1111:
   828  007494  EFE3  F039         	goto	l2042
   829  007498                     u1110:
   830  007498                     
   831                           ; BSR set to: 0
   832  007498  0012               	return		;funcret
   833  00749A                     __end_of_rempliMines:
   834                           	opt callstack 0
   835                           
   836 ;; *************** function _rand *****************
   837 ;; Defined at:
   838 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  2   12[BANK0 ] int 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   852 ;;      Params:         0       2       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0
   855 ;;      Totals:         0       2       0       0       0       0       0
   856 ;;Total ram usage:        2 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    1
   859 ;; This function calls:
   860 ;;		___lmul
   861 ;; This function is called by:
   862 ;;		_rempliMines
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text2
   867  006E86                     __ptext2:
   868                           	opt callstack 0
   869  006E86                     _rand:
   870                           	opt callstack 28
   871  006E86  C060  F0B8         	movff	_randx,___lmul@multiplier
   872  006E8A  C061  F0B9         	movff	_randx+1,___lmul@multiplier+1
   873  006E8E  C062  F0BA         	movff	_randx+2,___lmul@multiplier+2
   874  006E92  C063  F0BB         	movff	_randx+3,___lmul@multiplier+3
   875  006E96  0E6D               	movlw	109
   876  006E98  0100               	movlb	0	; () banked
   877  006E9A  6FBC               	movwf	___lmul@multiplicand& (0+255),b
   878  006E9C  0E4E               	movlw	78
   879  006E9E  6FBD               	movwf	(___lmul@multiplicand+1)& (0+255),b
   880  006EA0  0EC6               	movlw	198
   881  006EA2  6FBE               	movwf	(___lmul@multiplicand+2)& (0+255),b
   882  006EA4  0E41               	movlw	65
   883  006EA6  6FBF               	movwf	(___lmul@multiplicand+3)& (0+255),b
   884  006EA8  EC36  F038         	call	___lmul	;wreg free
   885  006EAC  C0B8  F060         	movff	?___lmul,_randx
   886  006EB0  C0B9  F061         	movff	?___lmul+1,_randx+1
   887  006EB4  C0BA  F062         	movff	?___lmul+2,_randx+2
   888  006EB8  C0BB  F063         	movff	?___lmul+3,_randx+3
   889  006EBC  0E39               	movlw	57
   890  006EBE  0100               	movlb	0	; () banked
   891  006EC0  2760               	addwf	_randx& (0+255),f,b
   892  006EC2  0E30               	movlw	48
   893  006EC4  2361               	addwfc	(_randx+1)& (0+255),f,b
   894  006EC6  0E00               	movlw	0
   895  006EC8  2362               	addwfc	(_randx+2)& (0+255),f,b
   896  006ECA  0E00               	movlw	0
   897  006ECC  2363               	addwfc	(_randx+3)& (0+255),f,b
   898  006ECE                     
   899                           ; BSR set to: 0
   900  006ECE  0EFF               	movlw	255
   901  006ED0  1562               	andwf	(_randx+2)& (0+255),w,b
   902  006ED2  6FC4               	movwf	?_rand& (0+255),b
   903  006ED4  0E7F               	movlw	127
   904  006ED6  1563               	andwf	(_randx+3)& (0+255),w,b
   905  006ED8  6FC5               	movwf	(?_rand+1)& (0+255),b
   906  006EDA                     
   907                           ; BSR set to: 0
   908  006EDA  0012               	return		;funcret
   909  006EDC                     __end_of_rand:
   910                           	opt callstack 0
   911                           
   912 ;; *************** function ___lmul *****************
   913 ;; Defined at:
   914 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  multiplier      4    0[BANK0 ] unsigned long 
   917 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  product         4    8[BANK0 ] unsigned long 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  4    0[BANK0 ] unsigned long 
   922 ;; Registers used:
   923 ;;		wreg, status,2, status,0
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   929 ;;      Params:         0       8       0       0       0       0       0
   930 ;;      Locals:         0       4       0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0       0       0
   932 ;;      Totals:         0      12       0       0       0       0       0
   933 ;;Total ram usage:       12 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_rand
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text3
   943  00706C                     __ptext3:
   944                           	opt callstack 0
   945  00706C                     ___lmul:
   946                           	opt callstack 28
   947  00706C  0E00               	movlw	0
   948  00706E  0100               	movlb	0	; () banked
   949  007070  6FC0               	movwf	___lmul@product& (0+255),b
   950  007072  0E00               	movlw	0
   951  007074  6FC1               	movwf	(___lmul@product+1)& (0+255),b
   952  007076  0E00               	movlw	0
   953  007078  6FC2               	movwf	(___lmul@product+2)& (0+255),b
   954  00707A  0E00               	movlw	0
   955  00707C  6FC3               	movwf	(___lmul@product+3)& (0+255),b
   956  00707E                     l1762:
   957                           
   958                           ; BSR set to: 0
   959  00707E  A1B8               	btfss	___lmul@multiplier& (0+255),0,b
   960  007080  EF44  F038         	goto	u711
   961  007084  EF46  F038         	goto	u710
   962  007088                     u711:
   963  007088  EF4E  F038         	goto	l1766
   964  00708C                     u710:
   965  00708C                     
   966                           ; BSR set to: 0
   967  00708C  51BC               	movf	___lmul@multiplicand& (0+255),w,b
   968  00708E  27C0               	addwf	___lmul@product& (0+255),f,b
   969  007090  51BD               	movf	(___lmul@multiplicand+1)& (0+255),w,b
   970  007092  23C1               	addwfc	(___lmul@product+1)& (0+255),f,b
   971  007094  51BE               	movf	(___lmul@multiplicand+2)& (0+255),w,b
   972  007096  23C2               	addwfc	(___lmul@product+2)& (0+255),f,b
   973  007098  51BF               	movf	(___lmul@multiplicand+3)& (0+255),w,b
   974  00709A  23C3               	addwfc	(___lmul@product+3)& (0+255),f,b
   975  00709C                     l1766:
   976                           
   977                           ; BSR set to: 0
   978  00709C  90D8               	bcf	status,0,c
   979  00709E  37BC               	rlcf	___lmul@multiplicand& (0+255),f,b
   980  0070A0  37BD               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
   981  0070A2  37BE               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
   982  0070A4  37BF               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
   983  0070A6                     
   984                           ; BSR set to: 0
   985  0070A6  90D8               	bcf	status,0,c
   986  0070A8  33BB               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
   987  0070AA  33BA               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
   988  0070AC  33B9               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
   989  0070AE  33B8               	rrcf	___lmul@multiplier& (0+255),f,b
   990  0070B0  51B8               	movf	___lmul@multiplier& (0+255),w,b
   991  0070B2  11B9               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
   992  0070B4  11BA               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
   993  0070B6  11BB               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
   994  0070B8  A4D8               	btfss	status,2,c
   995  0070BA  EF61  F038         	goto	u721
   996  0070BE  EF63  F038         	goto	u720
   997  0070C2                     u721:
   998  0070C2  EF3F  F038         	goto	l1762
   999  0070C6                     u720:
  1000  0070C6                     
  1001                           ; BSR set to: 0
  1002  0070C6  C0C0  F0B8         	movff	___lmul@product,?___lmul
  1003  0070CA  C0C1  F0B9         	movff	___lmul@product+1,?___lmul+1
  1004  0070CE  C0C2  F0BA         	movff	___lmul@product+2,?___lmul+2
  1005  0070D2  C0C3  F0BB         	movff	___lmul@product+3,?___lmul+3
  1006  0070D6                     
  1007                           ; BSR set to: 0
  1008  0070D6  0012               	return		;funcret
  1009  0070D8                     __end_of___lmul:
  1010                           	opt callstack 0
  1011                           
  1012 ;; *************** function ___awmod *****************
  1013 ;; Defined at:
  1014 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  dividend        2   14[BANK0 ] int 
  1017 ;;  divisor         2   16[BANK0 ] int 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  sign            1   19[BANK0 ] unsigned char 
  1020 ;;  counter         1   18[BANK0 ] unsigned char 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  2   14[BANK0 ] int 
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1030 ;;      Params:         0       4       0       0       0       0       0
  1031 ;;      Locals:         0       2       0       0       0       0       0
  1032 ;;      Temps:          0       0       0       0       0       0       0
  1033 ;;      Totals:         0       6       0       0       0       0       0
  1034 ;;Total ram usage:        6 bytes
  1035 ;; Hardware stack levels used:    1
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_rempliMines
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text4
  1044  00730A                     __ptext4:
  1045                           	opt callstack 0
  1046  00730A                     ___awmod:
  1047                           	opt callstack 29
  1048  00730A  0E00               	movlw	0
  1049  00730C  0100               	movlb	0	; () banked
  1050  00730E  6FCB               	movwf	___awmod@sign& (0+255),b
  1051  007310                     
  1052                           ; BSR set to: 0
  1053  007310  BFC7               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1054  007312  EF8F  F039         	goto	u980
  1055  007316  EF8D  F039         	goto	u981
  1056  00731A                     u981:
  1057  00731A  EF95  F039         	goto	l1932
  1058  00731E                     u980:
  1059  00731E                     
  1060                           ; BSR set to: 0
  1061  00731E  6DC6               	negf	___awmod@dividend& (0+255),b
  1062  007320  1FC7               	comf	(___awmod@dividend+1)& (0+255),f,b
  1063  007322  B0D8               	btfsc	status,0,c
  1064  007324  2BC7               	incf	(___awmod@dividend+1)& (0+255),f,b
  1065  007326                     
  1066                           ; BSR set to: 0
  1067  007326  0E01               	movlw	1
  1068  007328  6FCB               	movwf	___awmod@sign& (0+255),b
  1069  00732A                     l1932:
  1070                           
  1071                           ; BSR set to: 0
  1072  00732A  BFC9               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1073  00732C  EF9C  F039         	goto	u990
  1074  007330  EF9A  F039         	goto	u991
  1075  007334                     u991:
  1076  007334  EFA0  F039         	goto	l1936
  1077  007338                     u990:
  1078  007338                     
  1079                           ; BSR set to: 0
  1080  007338  6DC8               	negf	___awmod@divisor& (0+255),b
  1081  00733A  1FC9               	comf	(___awmod@divisor+1)& (0+255),f,b
  1082  00733C  B0D8               	btfsc	status,0,c
  1083  00733E  2BC9               	incf	(___awmod@divisor+1)& (0+255),f,b
  1084  007340                     l1936:
  1085                           
  1086                           ; BSR set to: 0
  1087  007340  51C8               	movf	___awmod@divisor& (0+255),w,b
  1088  007342  11C9               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1089  007344  B4D8               	btfsc	status,2,c
  1090  007346  EFA7  F039         	goto	u1001
  1091  00734A  EFA9  F039         	goto	u1000
  1092  00734E                     u1001:
  1093  00734E  EFCD  F039         	goto	l1952
  1094  007352                     u1000:
  1095  007352                     
  1096                           ; BSR set to: 0
  1097  007352  0E01               	movlw	1
  1098  007354  6FCA               	movwf	___awmod@counter& (0+255),b
  1099  007356  EFB1  F039         	goto	l1942
  1100  00735A                     l1940:
  1101                           
  1102                           ; BSR set to: 0
  1103  00735A  90D8               	bcf	status,0,c
  1104  00735C  37C8               	rlcf	___awmod@divisor& (0+255),f,b
  1105  00735E  37C9               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1106  007360  2BCA               	incf	___awmod@counter& (0+255),f,b
  1107  007362                     l1942:
  1108                           
  1109                           ; BSR set to: 0
  1110  007362  AFC9               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1111  007364  EFB6  F039         	goto	u1011
  1112  007368  EFB8  F039         	goto	u1010
  1113  00736C                     u1011:
  1114  00736C  EFAD  F039         	goto	l1940
  1115  007370                     u1010:
  1116  007370                     l1944:
  1117                           
  1118                           ; BSR set to: 0
  1119  007370  51C8               	movf	___awmod@divisor& (0+255),w,b
  1120  007372  5DC6               	subwf	___awmod@dividend& (0+255),w,b
  1121  007374  51C9               	movf	(___awmod@divisor+1)& (0+255),w,b
  1122  007376  59C7               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1123  007378  A0D8               	btfss	status,0,c
  1124  00737A  EFC1  F039         	goto	u1021
  1125  00737E  EFC3  F039         	goto	u1020
  1126  007382                     u1021:
  1127  007382  EFC7  F039         	goto	l1948
  1128  007386                     u1020:
  1129  007386                     
  1130                           ; BSR set to: 0
  1131  007386  51C8               	movf	___awmod@divisor& (0+255),w,b
  1132  007388  5FC6               	subwf	___awmod@dividend& (0+255),f,b
  1133  00738A  51C9               	movf	(___awmod@divisor+1)& (0+255),w,b
  1134  00738C  5BC7               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1135  00738E                     l1948:
  1136                           
  1137                           ; BSR set to: 0
  1138  00738E  90D8               	bcf	status,0,c
  1139  007390  33C9               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1140  007392  33C8               	rrcf	___awmod@divisor& (0+255),f,b
  1141  007394                     
  1142                           ; BSR set to: 0
  1143  007394  2FCA               	decfsz	___awmod@counter& (0+255),f,b
  1144  007396  EFB8  F039         	goto	l1944
  1145  00739A                     l1952:
  1146                           
  1147                           ; BSR set to: 0
  1148  00739A  51CB               	movf	___awmod@sign& (0+255),w,b
  1149  00739C  B4D8               	btfsc	status,2,c
  1150  00739E  EFD3  F039         	goto	u1031
  1151  0073A2  EFD5  F039         	goto	u1030
  1152  0073A6                     u1031:
  1153  0073A6  EFD9  F039         	goto	l1956
  1154  0073AA                     u1030:
  1155  0073AA                     
  1156                           ; BSR set to: 0
  1157  0073AA  6DC6               	negf	___awmod@dividend& (0+255),b
  1158  0073AC  1FC7               	comf	(___awmod@dividend+1)& (0+255),f,b
  1159  0073AE  B0D8               	btfsc	status,0,c
  1160  0073B0  2BC7               	incf	(___awmod@dividend+1)& (0+255),f,b
  1161  0073B2                     l1956:
  1162                           
  1163                           ; BSR set to: 0
  1164  0073B2  C0C6  F0C6         	movff	___awmod@dividend,?___awmod
  1165  0073B6  C0C7  F0C7         	movff	___awmod@dividend+1,?___awmod+1
  1166  0073BA                     
  1167                           ; BSR set to: 0
  1168  0073BA  0012               	return		;funcret
  1169  0073BC                     __end_of___awmod:
  1170                           	opt callstack 0
  1171                           
  1172 ;; *************** function _metToucheCombien *****************
  1173 ;; Defined at:
  1174 ;;		line 162 in file "main.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  j               1   20[BANK0 ] unsigned char 
  1179 ;;  i               1   19[BANK0 ] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         0       2       0       0       0       0       0
  1191 ;;      Temps:          0       3       0       0       0       0       0
  1192 ;;      Totals:         0       5       0       0       0       0       0
  1193 ;;Total ram usage:        5 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    2
  1196 ;; This function calls:
  1197 ;;		_calculToucheCombien
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text5
  1204  0076EA                     __ptext5:
  1205                           	opt callstack 0
  1206  0076EA                     _metToucheCombien:
  1207                           	opt callstack 28
  1208  0076EA                     
  1209                           ;main.c: 164: for(char i=0;i<4;i++)
  1210  0076EA  0E00               	movlw	0
  1211  0076EC  0100               	movlb	0	; force () banked
  1212  0076EE  6FCB               	movwf	metToucheCombien@i& (0+255),b
  1213  0076F0                     
  1214                           ; BSR set to: 0
  1215  0076F0  0E03               	movlw	3
  1216  0076F2  0100               	movlb	0	; force () banked
  1217  0076F4  65CB               	cpfsgt	metToucheCombien@i& (0+255),b
  1218  0076F6  EF7F  F03B         	goto	u1121
  1219  0076FA  EF81  F03B         	goto	u1120
  1220  0076FE                     u1121:
  1221  0076FE  EF83  F03B         	goto	l2058
  1222  007702                     u1120:
  1223  007702  EF23  F03C         	goto	l105
  1224  007706                     l2058:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 165: {;main.c: 166: for(char j=0;j<20;j++)
  1228  007706  0E00               	movlw	0
  1229  007708  0100               	movlb	0	; force () banked
  1230  00770A  6FCC               	movwf	metToucheCombien@j& (0+255),b
  1231  00770C                     
  1232                           ; BSR set to: 0
  1233  00770C  0E13               	movlw	19
  1234  00770E  0100               	movlb	0	; force () banked
  1235  007710  65CC               	cpfsgt	metToucheCombien@j& (0+255),b
  1236  007712  EF8D  F03B         	goto	u1131
  1237  007716  EF8F  F03B         	goto	u1130
  1238  00771A                     u1131:
  1239  00771A  EF91  F03B         	goto	l2064
  1240  00771E                     u1130:
  1241  00771E  EF18  F03C         	goto	l2076
  1242  007722                     l2064:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 167: {;main.c: 168: if(m_tabMines[i][j]!=2)
  1246  007722  0100               	movlb	0	; force () banked
  1247  007724  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1248  007726  0D15               	mullw	21
  1249  007728  0E64               	movlw	low _m_tabMines
  1250  00772A  0100               	movlb	0	; force () banked
  1251  00772C  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1252  00772E  0E00               	movlw	high _m_tabMines
  1253  007730  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1254  007732  50F3               	movf	243,w,c
  1255  007734  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1256  007736  50F4               	movf	244,w,c
  1257  007738  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1258  00773A  0100               	movlb	0	; force () banked
  1259  00773C  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1260  00773E  0100               	movlb	0	; force () banked
  1261  007740  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1262  007742  6ED9               	movwf	fsr2l,c
  1263  007744  0100               	movlb	0	; force () banked
  1264  007746  0E00               	movlw	0
  1265  007748  0100               	movlb	0	; force () banked
  1266  00774A  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1267  00774C  6EDA               	movwf	fsr2h,c
  1268  00774E  0E02               	movlw	2
  1269  007750  18DE               	xorwf	postinc2,w,c
  1270  007752  B4D8               	btfsc	status,2,c
  1271  007754  EFAE  F03B         	goto	u1141
  1272  007758  EFB0  F03B         	goto	u1140
  1273  00775C                     u1141:
  1274  00775C  EF0D  F03C         	goto	l2072
  1275  007760                     u1140:
  1276  007760                     
  1277                           ; BSR set to: 0
  1278                           ;main.c: 169: {;main.c: 170: m_tabMines[i][j]=(calculToucheCombien(i,j)+0x30);
  1279  007760  C0CB  F0BE         	movff	metToucheCombien@i,calculToucheCombien@ligne
  1280  007764  0100               	movlb	0	; force () banked
  1281  007766  6BBF               	clrf	(calculToucheCombien@ligne+1)& (0+255),b
  1282  007768  C0CC  F0C0         	movff	metToucheCombien@j,calculToucheCombien@colonne
  1283  00776C  0100               	movlb	0	; force () banked
  1284  00776E  6BC1               	clrf	(calculToucheCombien@colonne+1)& (0+255),b
  1285  007770  EC24  F03C         	call	_calculToucheCombien	;wreg free
  1286  007774  0100               	movlb	0	; force () banked
  1287  007776  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1288  007778  0E30               	movlw	48
  1289  00777A  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1290  00777C  0100               	movlb	0	; force () banked
  1291  00777E  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1292  007780  0D15               	mullw	21
  1293  007782  0E64               	movlw	low _m_tabMines
  1294  007784  0100               	movlb	0	; force () banked
  1295  007786  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1296  007788  0E00               	movlw	high _m_tabMines
  1297  00778A  6FCA               	movwf	(??_metToucheCombien+2)& (0+255),b
  1298  00778C  50F3               	movf	243,w,c
  1299  00778E  27C9               	addwf	(??_metToucheCombien+1)& (0+255),f,b
  1300  007790  50F4               	movf	244,w,c
  1301  007792  23CA               	addwfc	(??_metToucheCombien+2)& (0+255),f,b
  1302  007794  0100               	movlb	0	; force () banked
  1303  007796  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1304  007798  0100               	movlb	0	; force () banked
  1305  00779A  25C9               	addwf	(??_metToucheCombien+1)& (0+255),w,b
  1306  00779C  6ED9               	movwf	fsr2l,c
  1307  00779E  0100               	movlb	0	; force () banked
  1308  0077A0  0E00               	movlw	0
  1309  0077A2  0100               	movlb	0	; force () banked
  1310  0077A4  21CA               	addwfc	(??_metToucheCombien+2)& (0+255),w,b
  1311  0077A6  6EDA               	movwf	fsr2h,c
  1312  0077A8  C0C8  FFDF         	movff	??_metToucheCombien,indf2
  1313  0077AC                     
  1314                           ; BSR set to: 0
  1315                           ;main.c: 171: if(m_tabMines[i][j]==0x30)
  1316  0077AC  0100               	movlb	0	; force () banked
  1317  0077AE  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1318  0077B0  0D15               	mullw	21
  1319  0077B2  0E64               	movlw	low _m_tabMines
  1320  0077B4  0100               	movlb	0	; force () banked
  1321  0077B6  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1322  0077B8  0E00               	movlw	high _m_tabMines
  1323  0077BA  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1324  0077BC  50F3               	movf	243,w,c
  1325  0077BE  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1326  0077C0  50F4               	movf	244,w,c
  1327  0077C2  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1328  0077C4  0100               	movlb	0	; force () banked
  1329  0077C6  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1330  0077C8  0100               	movlb	0	; force () banked
  1331  0077CA  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1332  0077CC  6ED9               	movwf	fsr2l,c
  1333  0077CE  0100               	movlb	0	; force () banked
  1334  0077D0  0E00               	movlw	0
  1335  0077D2  0100               	movlb	0	; force () banked
  1336  0077D4  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1337  0077D6  6EDA               	movwf	fsr2h,c
  1338  0077D8  0E30               	movlw	48
  1339  0077DA  18DE               	xorwf	postinc2,w,c
  1340  0077DC  A4D8               	btfss	status,2,c
  1341  0077DE  EFF3  F03B         	goto	u1151
  1342  0077E2  EFF5  F03B         	goto	u1150
  1343  0077E6                     u1151:
  1344  0077E6  EF0D  F03C         	goto	l2072
  1345  0077EA                     u1150:
  1346  0077EA                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 172: {;main.c: 173: m_tabMines[i][j]=' ';
  1349  0077EA  0100               	movlb	0	; force () banked
  1350  0077EC  51CB               	movf	metToucheCombien@i& (0+255),w,b
  1351  0077EE  0D15               	mullw	21
  1352  0077F0  0E64               	movlw	low _m_tabMines
  1353  0077F2  0100               	movlb	0	; force () banked
  1354  0077F4  6FC8               	movwf	??_metToucheCombien& (0+255),b
  1355  0077F6  0E00               	movlw	high _m_tabMines
  1356  0077F8  6FC9               	movwf	(??_metToucheCombien+1)& (0+255),b
  1357  0077FA  50F3               	movf	243,w,c
  1358  0077FC  27C8               	addwf	??_metToucheCombien& (0+255),f,b
  1359  0077FE  50F4               	movf	244,w,c
  1360  007800  23C9               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1361  007802  0100               	movlb	0	; force () banked
  1362  007804  51CC               	movf	metToucheCombien@j& (0+255),w,b
  1363  007806  0100               	movlb	0	; force () banked
  1364  007808  25C8               	addwf	??_metToucheCombien& (0+255),w,b
  1365  00780A  6ED9               	movwf	fsr2l,c
  1366  00780C  0100               	movlb	0	; force () banked
  1367  00780E  0E00               	movlw	0
  1368  007810  0100               	movlb	0	; force () banked
  1369  007812  21C9               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1370  007814  6EDA               	movwf	fsr2h,c
  1371  007816  0E20               	movlw	32
  1372  007818  6EDF               	movwf	indf2,c
  1373  00781A                     l2072:
  1374                           
  1375                           ; BSR set to: 0
  1376  00781A  0100               	movlb	0	; force () banked
  1377  00781C  2BCC               	incf	metToucheCombien@j& (0+255),f,b
  1378  00781E                     
  1379                           ; BSR set to: 0
  1380  00781E  0E13               	movlw	19
  1381  007820  0100               	movlb	0	; force () banked
  1382  007822  65CC               	cpfsgt	metToucheCombien@j& (0+255),b
  1383  007824  EF16  F03C         	goto	u1161
  1384  007828  EF18  F03C         	goto	u1160
  1385  00782C                     u1161:
  1386  00782C  EF91  F03B         	goto	l2064
  1387  007830                     u1160:
  1388  007830                     l2076:
  1389                           
  1390                           ; BSR set to: 0
  1391  007830  0100               	movlb	0	; force () banked
  1392  007832  2BCB               	incf	metToucheCombien@i& (0+255),f,b
  1393  007834                     
  1394                           ; BSR set to: 0
  1395  007834  0E03               	movlw	3
  1396  007836  0100               	movlb	0	; force () banked
  1397  007838  65CB               	cpfsgt	metToucheCombien@i& (0+255),b
  1398  00783A  EF21  F03C         	goto	u1171
  1399  00783E  EF23  F03C         	goto	u1170
  1400  007842                     u1171:
  1401  007842  EF83  F03B         	goto	l2058
  1402  007846                     u1170:
  1403  007846                     l105:
  1404                           
  1405                           ; BSR set to: 0
  1406  007846  0012               	return		;funcret
  1407  007848                     __end_of_metToucheCombien:
  1408                           	opt callstack 0
  1409                           
  1410 ;; *************** function _calculToucheCombien *****************
  1411 ;; Defined at:
  1412 ;;		line 185 in file "main.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  ligne           2    6[BANK0 ] int 
  1415 ;;  colonne         2    8[BANK0 ] int 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  countMine       1   15[BANK0 ] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      unsigned char 
  1420 ;; Registers used:
  1421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1427 ;;      Params:         0       4       0       0       0       0       0
  1428 ;;      Locals:         0       1       0       0       0       0       0
  1429 ;;      Temps:          0       5       0       0       0       0       0
  1430 ;;      Totals:         0      10       0       0       0       0       0
  1431 ;;Total ram usage:       10 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    1
  1434 ;; This function calls:
  1435 ;;		___wmul
  1436 ;; This function is called by:
  1437 ;;		_metToucheCombien
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text6
  1442  007848                     __ptext6:
  1443                           	opt callstack 0
  1444  007848                     _calculToucheCombien:
  1445                           	opt callstack 28
  1446  007848                     
  1447                           ;main.c: 187: char countMine=0;
  1448  007848  0E00               	movlw	0
  1449  00784A  0100               	movlb	0	; force () banked
  1450  00784C  6FC7               	movwf	calculToucheCombien@countMine& (0+255),b
  1451  00784E                     
  1452                           ; BSR set to: 0
  1453                           ;main.c: 188: if((m_tabMines[ligne-1][colonne-1]==2)&&(ligne-1>=0)&&(colonne-1>=0))
  1454  00784E  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1455  007852  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1456  007856  0E00               	movlw	0
  1457  007858  0100               	movlb	0	; force () banked
  1458  00785A  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1459  00785C  0E15               	movlw	21
  1460  00785E  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1461  007860  EC0A  F036         	call	___wmul	;wreg free
  1462  007864  0EEA               	movlw	234
  1463  007866  0100               	movlb	0	; force () banked
  1464  007868  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1465  00786A  0EFF               	movlw	255
  1466  00786C  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1467  00786E  0E64               	movlw	low _m_tabMines
  1468  007870  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1469  007872  0E00               	movlw	high _m_tabMines
  1470  007874  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1471  007876  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1472  007878  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1473  00787A  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1474  00787C  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1475  00787E  0100               	movlb	0	; force () banked
  1476  007880  51B8               	movf	?___wmul& (0+255),w,b
  1477  007882  0100               	movlb	0	; force () banked
  1478  007884  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1479  007886  0100               	movlb	0	; force () banked
  1480  007888  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1481  00788A  0100               	movlb	0	; force () banked
  1482  00788C  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1483  00788E  0100               	movlb	0	; force () banked
  1484  007890  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1485  007892  0100               	movlb	0	; force () banked
  1486  007894  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1487  007896  6ED9               	movwf	fsr2l,c
  1488  007898  0100               	movlb	0	; force () banked
  1489  00789A  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1490  00789C  0100               	movlb	0	; force () banked
  1491  00789E  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1492  0078A0  6EDA               	movwf	fsr2h,c
  1493  0078A2  0E02               	movlw	2
  1494  0078A4  18DE               	xorwf	postinc2,w,c
  1495  0078A6  A4D8               	btfss	status,2,c
  1496  0078A8  EF58  F03C         	goto	u741
  1497  0078AC  EF5A  F03C         	goto	u740
  1498  0078B0                     u741:
  1499  0078B0  EF76  F03C         	goto	l1810
  1500  0078B4                     u740:
  1501  0078B4                     
  1502                           ; BSR set to: 0
  1503  0078B4  0EFF               	movlw	255
  1504  0078B6  0100               	movlb	0	; force () banked
  1505  0078B8  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1506  0078BA  0EFF               	movlw	255
  1507  0078BC  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1508  0078BE  0B80               	andlw	128
  1509  0078C0  A4D8               	btfss	status,2,c
  1510  0078C2  EF65  F03C         	goto	u751
  1511  0078C6  EF67  F03C         	goto	u750
  1512  0078CA                     u751:
  1513  0078CA  EF76  F03C         	goto	l1810
  1514  0078CE                     u750:
  1515  0078CE                     
  1516                           ; BSR set to: 0
  1517  0078CE  0EFF               	movlw	255
  1518  0078D0  0100               	movlb	0	; force () banked
  1519  0078D2  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1520  0078D4  0EFF               	movlw	255
  1521  0078D6  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1522  0078D8  0B80               	andlw	128
  1523  0078DA  A4D8               	btfss	status,2,c
  1524  0078DC  EF72  F03C         	goto	u761
  1525  0078E0  EF74  F03C         	goto	u760
  1526  0078E4                     u761:
  1527  0078E4  EF76  F03C         	goto	l1810
  1528  0078E8                     u760:
  1529  0078E8                     
  1530                           ; BSR set to: 0
  1531                           ;main.c: 189: {;main.c: 190: countMine++;
  1532  0078E8  0100               	movlb	0	; force () banked
  1533  0078EA  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1534  0078EC                     l1810:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 191: };main.c: 192: if((m_tabMines[ligne][colonne-1]==2)&&(colonne-1>=0))
  1538  0078EC  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1539  0078F0  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1540  0078F4  0E00               	movlw	0
  1541  0078F6  0100               	movlb	0	; force () banked
  1542  0078F8  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1543  0078FA  0E15               	movlw	21
  1544  0078FC  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1545  0078FE  EC0A  F036         	call	___wmul	;wreg free
  1546  007902  0EFF               	movlw	255
  1547  007904  0100               	movlb	0	; force () banked
  1548  007906  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1549  007908  0EFF               	movlw	255
  1550  00790A  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1551  00790C  0E64               	movlw	low _m_tabMines
  1552  00790E  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1553  007910  0E00               	movlw	high _m_tabMines
  1554  007912  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1555  007914  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1556  007916  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1557  007918  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1558  00791A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1559  00791C  0100               	movlb	0	; force () banked
  1560  00791E  51B8               	movf	?___wmul& (0+255),w,b
  1561  007920  0100               	movlb	0	; force () banked
  1562  007922  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1563  007924  0100               	movlb	0	; force () banked
  1564  007926  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1565  007928  0100               	movlb	0	; force () banked
  1566  00792A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1567  00792C  0100               	movlb	0	; force () banked
  1568  00792E  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1569  007930  0100               	movlb	0	; force () banked
  1570  007932  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1571  007934  6ED9               	movwf	fsr2l,c
  1572  007936  0100               	movlb	0	; force () banked
  1573  007938  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1574  00793A  0100               	movlb	0	; force () banked
  1575  00793C  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1576  00793E  6EDA               	movwf	fsr2h,c
  1577  007940  0E02               	movlw	2
  1578  007942  18DE               	xorwf	postinc2,w,c
  1579  007944  A4D8               	btfss	status,2,c
  1580  007946  EFA7  F03C         	goto	u771
  1581  00794A  EFA9  F03C         	goto	u770
  1582  00794E                     u771:
  1583  00794E  EFB8  F03C         	goto	l1816
  1584  007952                     u770:
  1585  007952                     
  1586                           ; BSR set to: 0
  1587  007952  0EFF               	movlw	255
  1588  007954  0100               	movlb	0	; force () banked
  1589  007956  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1590  007958  0EFF               	movlw	255
  1591  00795A  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1592  00795C  0B80               	andlw	128
  1593  00795E  A4D8               	btfss	status,2,c
  1594  007960  EFB4  F03C         	goto	u781
  1595  007964  EFB6  F03C         	goto	u780
  1596  007968                     u781:
  1597  007968  EFB8  F03C         	goto	l1816
  1598  00796C                     u780:
  1599  00796C                     
  1600                           ; BSR set to: 0
  1601                           ;main.c: 193: {;main.c: 194: countMine++;
  1602  00796C  0100               	movlb	0	; force () banked
  1603  00796E  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1604  007970                     l1816:
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 195: };main.c: 196: if((m_tabMines[ligne+1][colonne-1]==2)&&(colonne-1>=0)&&(li
      +                          gne+1<20))
  1608  007970  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1609  007974  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1610  007978  0E00               	movlw	0
  1611  00797A  0100               	movlb	0	; force () banked
  1612  00797C  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1613  00797E  0E15               	movlw	21
  1614  007980  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1615  007982  EC0A  F036         	call	___wmul	;wreg free
  1616  007986  0E64               	movlw	low _m_tabMines
  1617  007988  0100               	movlb	0	; force () banked
  1618  00798A  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1619  00798C  0E00               	movlw	high _m_tabMines
  1620  00798E  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1621  007990  0E14               	movlw	20
  1622  007992  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1623  007994  0E00               	movlw	0
  1624  007996  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1625  007998  0100               	movlb	0	; force () banked
  1626  00799A  51B8               	movf	?___wmul& (0+255),w,b
  1627  00799C  0100               	movlb	0	; force () banked
  1628  00799E  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1629  0079A0  0100               	movlb	0	; force () banked
  1630  0079A2  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1631  0079A4  0100               	movlb	0	; force () banked
  1632  0079A6  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1633  0079A8  0100               	movlb	0	; force () banked
  1634  0079AA  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1635  0079AC  0100               	movlb	0	; force () banked
  1636  0079AE  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  1637  0079B0  6ED9               	movwf	fsr2l,c
  1638  0079B2  0100               	movlb	0	; force () banked
  1639  0079B4  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1640  0079B6  0100               	movlb	0	; force () banked
  1641  0079B8  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1642  0079BA  6EDA               	movwf	fsr2h,c
  1643  0079BC  0E02               	movlw	2
  1644  0079BE  18DE               	xorwf	postinc2,w,c
  1645  0079C0  A4D8               	btfss	status,2,c
  1646  0079C2  EFE5  F03C         	goto	u791
  1647  0079C6  EFE7  F03C         	goto	u790
  1648  0079CA                     u791:
  1649  0079CA  EF0E  F03D         	goto	l1824
  1650  0079CE                     u790:
  1651  0079CE                     
  1652                           ; BSR set to: 0
  1653  0079CE  0EFF               	movlw	255
  1654  0079D0  0100               	movlb	0	; force () banked
  1655  0079D2  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1656  0079D4  0EFF               	movlw	255
  1657  0079D6  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1658  0079D8  0B80               	andlw	128
  1659  0079DA  A4D8               	btfss	status,2,c
  1660  0079DC  EFF2  F03C         	goto	u801
  1661  0079E0  EFF4  F03C         	goto	u800
  1662  0079E4                     u801:
  1663  0079E4  EF0E  F03D         	goto	l1824
  1664  0079E8                     u800:
  1665  0079E8                     
  1666                           ; BSR set to: 0
  1667  0079E8  0E01               	movlw	1
  1668  0079EA  0100               	movlb	0	; force () banked
  1669  0079EC  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1670  0079EE  0100               	movlb	0	; force () banked
  1671  0079F0  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1672  0079F2  0E00               	movlw	0
  1673  0079F4  0100               	movlb	0	; force () banked
  1674  0079F6  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1675  0079F8  0100               	movlb	0	; force () banked
  1676  0079FA  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1677  0079FC  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1678  0079FE  EF0C  F03D         	goto	u810
  1679  007A02  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1680  007A04  E107               	bnz	u811
  1681  007A06  0E14               	movlw	20
  1682  007A08  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1683  007A0A  B0D8               	btfsc	status,0,c
  1684  007A0C  EF0A  F03D         	goto	u811
  1685  007A10  EF0C  F03D         	goto	u810
  1686  007A14                     u811:
  1687  007A14  EF0E  F03D         	goto	l1824
  1688  007A18                     u810:
  1689  007A18                     
  1690                           ; BSR set to: 0
  1691                           ;main.c: 197: {;main.c: 198: countMine++;
  1692  007A18  0100               	movlb	0	; force () banked
  1693  007A1A  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1694  007A1C                     l1824:
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 199: };main.c: 200: if((m_tabMines[ligne-1][colonne]==2)&&(ligne-1>=0))
  1698  007A1C  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1699  007A20  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1700  007A24  0E00               	movlw	0
  1701  007A26  0100               	movlb	0	; force () banked
  1702  007A28  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1703  007A2A  0E15               	movlw	21
  1704  007A2C  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1705  007A2E  EC0A  F036         	call	___wmul	;wreg free
  1706  007A32  0EEB               	movlw	235
  1707  007A34  0100               	movlb	0	; force () banked
  1708  007A36  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1709  007A38  0EFF               	movlw	255
  1710  007A3A  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1711  007A3C  0E64               	movlw	low _m_tabMines
  1712  007A3E  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1713  007A40  0E00               	movlw	high _m_tabMines
  1714  007A42  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1715  007A44  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1716  007A46  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1717  007A48  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1718  007A4A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1719  007A4C  0100               	movlb	0	; force () banked
  1720  007A4E  51B8               	movf	?___wmul& (0+255),w,b
  1721  007A50  0100               	movlb	0	; force () banked
  1722  007A52  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1723  007A54  0100               	movlb	0	; force () banked
  1724  007A56  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1725  007A58  0100               	movlb	0	; force () banked
  1726  007A5A  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1727  007A5C  0100               	movlb	0	; force () banked
  1728  007A5E  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1729  007A60  0100               	movlb	0	; force () banked
  1730  007A62  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1731  007A64  6ED9               	movwf	fsr2l,c
  1732  007A66  0100               	movlb	0	; force () banked
  1733  007A68  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1734  007A6A  0100               	movlb	0	; force () banked
  1735  007A6C  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1736  007A6E  6EDA               	movwf	fsr2h,c
  1737  007A70  0E02               	movlw	2
  1738  007A72  18DE               	xorwf	postinc2,w,c
  1739  007A74  A4D8               	btfss	status,2,c
  1740  007A76  EF3F  F03D         	goto	u821
  1741  007A7A  EF41  F03D         	goto	u820
  1742  007A7E                     u821:
  1743  007A7E  EF50  F03D         	goto	l1830
  1744  007A82                     u820:
  1745  007A82                     
  1746                           ; BSR set to: 0
  1747  007A82  0EFF               	movlw	255
  1748  007A84  0100               	movlb	0	; force () banked
  1749  007A86  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1750  007A88  0EFF               	movlw	255
  1751  007A8A  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1752  007A8C  0B80               	andlw	128
  1753  007A8E  A4D8               	btfss	status,2,c
  1754  007A90  EF4C  F03D         	goto	u831
  1755  007A94  EF4E  F03D         	goto	u830
  1756  007A98                     u831:
  1757  007A98  EF50  F03D         	goto	l1830
  1758  007A9C                     u830:
  1759  007A9C                     
  1760                           ; BSR set to: 0
  1761                           ;main.c: 201: {;main.c: 202: countMine++;
  1762  007A9C  0100               	movlb	0	; force () banked
  1763  007A9E  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1764  007AA0                     l1830:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;main.c: 203: };main.c: 204: if((m_tabMines[ligne-1][colonne+1]==2)&&(ligne-1>=0)&&(colo
      +                          nne+1<20))
  1768  007AA0  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1769  007AA4  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1770  007AA8  0E00               	movlw	0
  1771  007AAA  0100               	movlb	0	; force () banked
  1772  007AAC  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1773  007AAE  0E15               	movlw	21
  1774  007AB0  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1775  007AB2  EC0A  F036         	call	___wmul	;wreg free
  1776  007AB6  0EEC               	movlw	236
  1777  007AB8  0100               	movlb	0	; force () banked
  1778  007ABA  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1779  007ABC  0EFF               	movlw	255
  1780  007ABE  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1781  007AC0  0E64               	movlw	low _m_tabMines
  1782  007AC2  6FC4               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1783  007AC4  0E00               	movlw	high _m_tabMines
  1784  007AC6  6FC5               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1785  007AC8  51C2               	movf	??_calculToucheCombien& (0+255),w,b
  1786  007ACA  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1787  007ACC  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1788  007ACE  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1789  007AD0  0100               	movlb	0	; force () banked
  1790  007AD2  51B8               	movf	?___wmul& (0+255),w,b
  1791  007AD4  0100               	movlb	0	; force () banked
  1792  007AD6  27C4               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1793  007AD8  0100               	movlb	0	; force () banked
  1794  007ADA  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1795  007ADC  0100               	movlb	0	; force () banked
  1796  007ADE  23C5               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1797  007AE0  0100               	movlb	0	; force () banked
  1798  007AE2  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1799  007AE4  0100               	movlb	0	; force () banked
  1800  007AE6  25C4               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1801  007AE8  6ED9               	movwf	fsr2l,c
  1802  007AEA  0100               	movlb	0	; force () banked
  1803  007AEC  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1804  007AEE  0100               	movlb	0	; force () banked
  1805  007AF0  21C5               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1806  007AF2  6EDA               	movwf	fsr2h,c
  1807  007AF4  0E02               	movlw	2
  1808  007AF6  18DE               	xorwf	postinc2,w,c
  1809  007AF8  A4D8               	btfss	status,2,c
  1810  007AFA  EF81  F03D         	goto	u841
  1811  007AFE  EF83  F03D         	goto	u840
  1812  007B02                     u841:
  1813  007B02  EFAA  F03D         	goto	l1838
  1814  007B06                     u840:
  1815  007B06                     
  1816                           ; BSR set to: 0
  1817  007B06  0EFF               	movlw	255
  1818  007B08  0100               	movlb	0	; force () banked
  1819  007B0A  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1820  007B0C  0EFF               	movlw	255
  1821  007B0E  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1822  007B10  0B80               	andlw	128
  1823  007B12  A4D8               	btfss	status,2,c
  1824  007B14  EF8E  F03D         	goto	u851
  1825  007B18  EF90  F03D         	goto	u850
  1826  007B1C                     u851:
  1827  007B1C  EFAA  F03D         	goto	l1838
  1828  007B20                     u850:
  1829  007B20                     
  1830                           ; BSR set to: 0
  1831  007B20  0E01               	movlw	1
  1832  007B22  0100               	movlb	0	; force () banked
  1833  007B24  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1834  007B26  0100               	movlb	0	; force () banked
  1835  007B28  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1836  007B2A  0E00               	movlw	0
  1837  007B2C  0100               	movlb	0	; force () banked
  1838  007B2E  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1839  007B30  0100               	movlb	0	; force () banked
  1840  007B32  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1841  007B34  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1842  007B36  EFA8  F03D         	goto	u860
  1843  007B3A  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1844  007B3C  E107               	bnz	u861
  1845  007B3E  0E14               	movlw	20
  1846  007B40  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1847  007B42  B0D8               	btfsc	status,0,c
  1848  007B44  EFA6  F03D         	goto	u861
  1849  007B48  EFA8  F03D         	goto	u860
  1850  007B4C                     u861:
  1851  007B4C  EFAA  F03D         	goto	l1838
  1852  007B50                     u860:
  1853  007B50                     
  1854                           ; BSR set to: 0
  1855                           ;main.c: 205: {;main.c: 206: countMine++;
  1856  007B50  0100               	movlb	0	; force () banked
  1857  007B52  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1858  007B54                     l1838:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 207: };main.c: 208: if((m_tabMines[ligne][colonne+1]==2)&&(colonne+1<20))
  1862  007B54  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1863  007B58  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1864  007B5C  0E00               	movlw	0
  1865  007B5E  0100               	movlb	0	; force () banked
  1866  007B60  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1867  007B62  0E15               	movlw	21
  1868  007B64  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1869  007B66  EC0A  F036         	call	___wmul	;wreg free
  1870  007B6A  0E64               	movlw	low _m_tabMines
  1871  007B6C  0100               	movlb	0	; force () banked
  1872  007B6E  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1873  007B70  0E00               	movlw	high _m_tabMines
  1874  007B72  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1875  007B74  0E01               	movlw	1
  1876  007B76  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1877  007B78  0E00               	movlw	0
  1878  007B7A  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1879  007B7C  0100               	movlb	0	; force () banked
  1880  007B7E  51B8               	movf	?___wmul& (0+255),w,b
  1881  007B80  0100               	movlb	0	; force () banked
  1882  007B82  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1883  007B84  0100               	movlb	0	; force () banked
  1884  007B86  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1885  007B88  0100               	movlb	0	; force () banked
  1886  007B8A  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1887  007B8C  0100               	movlb	0	; force () banked
  1888  007B8E  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1889  007B90  0100               	movlb	0	; force () banked
  1890  007B92  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  1891  007B94  6ED9               	movwf	fsr2l,c
  1892  007B96  0100               	movlb	0	; force () banked
  1893  007B98  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1894  007B9A  0100               	movlb	0	; force () banked
  1895  007B9C  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1896  007B9E  6EDA               	movwf	fsr2h,c
  1897  007BA0  0E02               	movlw	2
  1898  007BA2  18DE               	xorwf	postinc2,w,c
  1899  007BA4  A4D8               	btfss	status,2,c
  1900  007BA6  EFD7  F03D         	goto	u871
  1901  007BAA  EFD9  F03D         	goto	u870
  1902  007BAE                     u871:
  1903  007BAE  EFF3  F03D         	goto	l1844
  1904  007BB2                     u870:
  1905  007BB2                     
  1906                           ; BSR set to: 0
  1907  007BB2  0E01               	movlw	1
  1908  007BB4  0100               	movlb	0	; force () banked
  1909  007BB6  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1910  007BB8  0100               	movlb	0	; force () banked
  1911  007BBA  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1912  007BBC  0E00               	movlw	0
  1913  007BBE  0100               	movlb	0	; force () banked
  1914  007BC0  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1915  007BC2  0100               	movlb	0	; force () banked
  1916  007BC4  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1917  007BC6  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1918  007BC8  EFF1  F03D         	goto	u880
  1919  007BCC  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1920  007BCE  E107               	bnz	u881
  1921  007BD0  0E14               	movlw	20
  1922  007BD2  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1923  007BD4  B0D8               	btfsc	status,0,c
  1924  007BD6  EFEF  F03D         	goto	u881
  1925  007BDA  EFF1  F03D         	goto	u880
  1926  007BDE                     u881:
  1927  007BDE  EFF3  F03D         	goto	l1844
  1928  007BE2                     u880:
  1929  007BE2                     
  1930                           ; BSR set to: 0
  1931                           ;main.c: 209: {;main.c: 210: countMine++;
  1932  007BE2  0100               	movlb	0	; force () banked
  1933  007BE4  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  1934  007BE6                     l1844:
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;main.c: 211: };main.c: 212: if((m_tabMines[ligne+1][colonne+1]==2)&&(colonne+1<20)&&(li
      +                          gne+1<20))
  1938  007BE6  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1939  007BEA  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1940  007BEE  0E00               	movlw	0
  1941  007BF0  0100               	movlb	0	; force () banked
  1942  007BF2  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1943  007BF4  0E15               	movlw	21
  1944  007BF6  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  1945  007BF8  EC0A  F036         	call	___wmul	;wreg free
  1946  007BFC  0E64               	movlw	low _m_tabMines
  1947  007BFE  0100               	movlb	0	; force () banked
  1948  007C00  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1949  007C02  0E00               	movlw	high _m_tabMines
  1950  007C04  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1951  007C06  0E16               	movlw	22
  1952  007C08  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1953  007C0A  0E00               	movlw	0
  1954  007C0C  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1955  007C0E  0100               	movlb	0	; force () banked
  1956  007C10  51B8               	movf	?___wmul& (0+255),w,b
  1957  007C12  0100               	movlb	0	; force () banked
  1958  007C14  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  1959  007C16  0100               	movlb	0	; force () banked
  1960  007C18  51B9               	movf	(?___wmul+1)& (0+255),w,b
  1961  007C1A  0100               	movlb	0	; force () banked
  1962  007C1C  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1963  007C1E  0100               	movlb	0	; force () banked
  1964  007C20  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  1965  007C22  0100               	movlb	0	; force () banked
  1966  007C24  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  1967  007C26  6ED9               	movwf	fsr2l,c
  1968  007C28  0100               	movlb	0	; force () banked
  1969  007C2A  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1970  007C2C  0100               	movlb	0	; force () banked
  1971  007C2E  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1972  007C30  6EDA               	movwf	fsr2h,c
  1973  007C32  0E02               	movlw	2
  1974  007C34  18DE               	xorwf	postinc2,w,c
  1975  007C36  A4D8               	btfss	status,2,c
  1976  007C38  EF20  F03E         	goto	u891
  1977  007C3C  EF22  F03E         	goto	u890
  1978  007C40                     u891:
  1979  007C40  EF54  F03E         	goto	l1852
  1980  007C44                     u890:
  1981  007C44                     
  1982                           ; BSR set to: 0
  1983  007C44  0E01               	movlw	1
  1984  007C46  0100               	movlb	0	; force () banked
  1985  007C48  25C0               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1986  007C4A  0100               	movlb	0	; force () banked
  1987  007C4C  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  1988  007C4E  0E00               	movlw	0
  1989  007C50  0100               	movlb	0	; force () banked
  1990  007C52  21C1               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1991  007C54  0100               	movlb	0	; force () banked
  1992  007C56  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1993  007C58  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  1994  007C5A  EF3A  F03E         	goto	u900
  1995  007C5E  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1996  007C60  E107               	bnz	u901
  1997  007C62  0E14               	movlw	20
  1998  007C64  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  1999  007C66  B0D8               	btfsc	status,0,c
  2000  007C68  EF38  F03E         	goto	u901
  2001  007C6C  EF3A  F03E         	goto	u900
  2002  007C70                     u901:
  2003  007C70  EF54  F03E         	goto	l1852
  2004  007C74                     u900:
  2005  007C74                     
  2006                           ; BSR set to: 0
  2007  007C74  0E01               	movlw	1
  2008  007C76  0100               	movlb	0	; force () banked
  2009  007C78  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  2010  007C7A  0100               	movlb	0	; force () banked
  2011  007C7C  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2012  007C7E  0E00               	movlw	0
  2013  007C80  0100               	movlb	0	; force () banked
  2014  007C82  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  2015  007C84  0100               	movlb	0	; force () banked
  2016  007C86  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2017  007C88  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  2018  007C8A  EF52  F03E         	goto	u910
  2019  007C8E  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2020  007C90  E107               	bnz	u911
  2021  007C92  0E14               	movlw	20
  2022  007C94  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  2023  007C96  B0D8               	btfsc	status,0,c
  2024  007C98  EF50  F03E         	goto	u911
  2025  007C9C  EF52  F03E         	goto	u910
  2026  007CA0                     u911:
  2027  007CA0  EF54  F03E         	goto	l1852
  2028  007CA4                     u910:
  2029  007CA4                     
  2030                           ; BSR set to: 0
  2031                           ;main.c: 213: {;main.c: 214: countMine++;
  2032  007CA4  0100               	movlb	0	; force () banked
  2033  007CA6  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  2034  007CA8                     l1852:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;main.c: 215: };main.c: 216: if((m_tabMines[ligne+1][colonne]==2)&&(ligne+1<20))
  2038  007CA8  C0BE  F0B8         	movff	calculToucheCombien@ligne,___wmul@multiplier
  2039  007CAC  C0BF  F0B9         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  2040  007CB0  0E00               	movlw	0
  2041  007CB2  0100               	movlb	0	; force () banked
  2042  007CB4  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2043  007CB6  0E15               	movlw	21
  2044  007CB8  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2045  007CBA  EC0A  F036         	call	___wmul	;wreg free
  2046  007CBE  0E64               	movlw	low _m_tabMines
  2047  007CC0  0100               	movlb	0	; force () banked
  2048  007CC2  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2049  007CC4  0E00               	movlw	high _m_tabMines
  2050  007CC6  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2051  007CC8  0E15               	movlw	21
  2052  007CCA  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2053  007CCC  0E00               	movlw	0
  2054  007CCE  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2055  007CD0  0100               	movlb	0	; force () banked
  2056  007CD2  51B8               	movf	?___wmul& (0+255),w,b
  2057  007CD4  0100               	movlb	0	; force () banked
  2058  007CD6  27C2               	addwf	??_calculToucheCombien& (0+255),f,b
  2059  007CD8  0100               	movlb	0	; force () banked
  2060  007CDA  51B9               	movf	(?___wmul+1)& (0+255),w,b
  2061  007CDC  0100               	movlb	0	; force () banked
  2062  007CDE  23C3               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  2063  007CE0  0100               	movlb	0	; force () banked
  2064  007CE2  51C0               	movf	calculToucheCombien@colonne& (0+255),w,b
  2065  007CE4  0100               	movlb	0	; force () banked
  2066  007CE6  25C2               	addwf	??_calculToucheCombien& (0+255),w,b
  2067  007CE8  6ED9               	movwf	fsr2l,c
  2068  007CEA  0100               	movlb	0	; force () banked
  2069  007CEC  51C1               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  2070  007CEE  0100               	movlb	0	; force () banked
  2071  007CF0  21C3               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  2072  007CF2  6EDA               	movwf	fsr2h,c
  2073  007CF4  0E02               	movlw	2
  2074  007CF6  18DE               	xorwf	postinc2,w,c
  2075  007CF8  A4D8               	btfss	status,2,c
  2076  007CFA  EF81  F03E         	goto	u921
  2077  007CFE  EF83  F03E         	goto	u920
  2078  007D02                     u921:
  2079  007D02  EF9D  F03E         	goto	l1858
  2080  007D06                     u920:
  2081  007D06                     
  2082                           ; BSR set to: 0
  2083  007D06  0E01               	movlw	1
  2084  007D08  0100               	movlb	0	; force () banked
  2085  007D0A  25BE               	addwf	calculToucheCombien@ligne& (0+255),w,b
  2086  007D0C  0100               	movlb	0	; force () banked
  2087  007D0E  6FC2               	movwf	??_calculToucheCombien& (0+255),b
  2088  007D10  0E00               	movlw	0
  2089  007D12  0100               	movlb	0	; force () banked
  2090  007D14  21BF               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  2091  007D16  0100               	movlb	0	; force () banked
  2092  007D18  6FC3               	movwf	(??_calculToucheCombien+1)& (0+255),b
  2093  007D1A  BFC3               	btfsc	(??_calculToucheCombien+1)& (0+255),7,b
  2094  007D1C  EF9B  F03E         	goto	u930
  2095  007D20  51C3               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2096  007D22  E107               	bnz	u931
  2097  007D24  0E14               	movlw	20
  2098  007D26  5DC2               	subwf	??_calculToucheCombien& (0+255),w,b
  2099  007D28  B0D8               	btfsc	status,0,c
  2100  007D2A  EF99  F03E         	goto	u931
  2101  007D2E  EF9B  F03E         	goto	u930
  2102  007D32                     u931:
  2103  007D32  EF9D  F03E         	goto	l1858
  2104  007D36                     u930:
  2105  007D36                     
  2106                           ; BSR set to: 0
  2107                           ;main.c: 217: {;main.c: 218: countMine++;
  2108  007D36  0100               	movlb	0	; force () banked
  2109  007D38  2BC7               	incf	calculToucheCombien@countMine& (0+255),f,b
  2110  007D3A                     l1858:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;main.c: 219: };main.c: 220: return countMine;
  2114  007D3A  0100               	movlb	0	; force () banked
  2115  007D3C  51C7               	movf	calculToucheCombien@countMine& (0+255),w,b
  2116  007D3E                     
  2117                           ; BSR set to: 0
  2118  007D3E  0012               	return		;funcret
  2119  007D40                     __end_of_calculToucheCombien:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _lcd_init *****************
  2123 ;; Defined at:
  2124 ;;		line 300 in file "Lcd4Lignes.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2138 ;;      Params:         0       0       0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0
  2141 ;;      Totals:         0       0       0       0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    5
  2145 ;; This function calls:
  2146 ;;		_lcd_initCGRam
  2147 ;;		_lcd_resetSequence
  2148 ;;		_lcd_wrCom
  2149 ;; This function is called by:
  2150 ;;		_main
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text7
  2155  006C3C                     __ptext7:
  2156                           	opt callstack 0
  2157  006C3C                     _lcd_init:
  2158                           	opt callstack 25
  2159  006C3C                     
  2160                           ;Lcd4Lignes.c: 303: lcd_resetSequence();
  2161  006C3C  ECCB  F037         	call	_lcd_resetSequence	;wreg free
  2162                           
  2163                           ;Lcd4Lignes.c: 304: lcd_wrCom(0x28);
  2164  006C40  0E28               	movlw	40
  2165  006C42  EC00  F038         	call	_lcd_wrCom
  2166                           
  2167                           ;Lcd4Lignes.c: 305: lcd_wrCom(0x0F);
  2168  006C46  0E0F               	movlw	15
  2169  006C48  EC00  F038         	call	_lcd_wrCom
  2170                           
  2171                           ;Lcd4Lignes.c: 306: lcd_wrCom(0x01);
  2172  006C4C  0E01               	movlw	1
  2173  006C4E  EC00  F038         	call	_lcd_wrCom
  2174                           
  2175                           ;Lcd4Lignes.c: 307: lcd_wrCom(0x06);
  2176  006C52  0E06               	movlw	6
  2177  006C54  EC00  F038         	call	_lcd_wrCom
  2178                           
  2179                           ;Lcd4Lignes.c: 308: lcd_wrCom(0x80);
  2180  006C58  0E80               	movlw	128
  2181  006C5A  EC00  F038         	call	_lcd_wrCom
  2182  006C5E                     
  2183                           ;Lcd4Lignes.c: 309: lcd_initCGRam();
  2184  006C5E  EC34  F039         	call	_lcd_initCGRam	;wreg free
  2185  006C62  0012               	return		;funcret
  2186  006C64                     __end_of_lcd_init:
  2187                           	opt callstack 0
  2188                           
  2189 ;; *************** function _lcd_resetSequence *****************
  2190 ;; Defined at:
  2191 ;;		line 263 in file "Lcd4Lignes.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2205 ;;      Params:         0       0       0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0
  2207 ;;      Temps:          0       1       0       0       0       0       0
  2208 ;;      Totals:         0       1       0       0       0       0       0
  2209 ;;Total ram usage:        1 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    1
  2212 ;; This function calls:
  2213 ;;		_lcd_ecrireDonnees
  2214 ;;		_lcd_strobeEnableBit
  2215 ;; This function is called by:
  2216 ;;		_lcd_init
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text8
  2221  006F96                     __ptext8:
  2222                           	opt callstack 0
  2223  006F96                     _lcd_resetSequence:
  2224                           	opt callstack 28
  2225  006F96                     
  2226                           ;Lcd4Lignes.c: 268: TRISD = 0b00000000;
  2227  006F96  0E00               	movlw	0
  2228  006F98  6E95               	movwf	149,c	;volatile
  2229  006F9A                     
  2230                           ;Lcd4Lignes.c: 270: _delay((unsigned long)((40)*(1000000/4000.0)));
  2231  006F9A  0E0D               	movlw	13
  2232  006F9C  0100               	movlb	0	; force () banked
  2233  006F9E  6FBA               	movwf	??_lcd_resetSequence& (0+255),b
  2234  006FA0  0EFB               	movlw	251
  2235  006FA2                     u1307:
  2236  006FA2  2EE8               	decfsz	wreg,f,c
  2237  006FA4  D7FE               	bra	u1307
  2238  006FA6  2FBA               	decfsz	??_lcd_resetSequence& (0+255),f,b
  2239  006FA8  D7FC               	bra	u1307
  2240  006FAA  F000 F000          	nop2	
  2241  006FAE                     
  2242                           ;Lcd4Lignes.c: 271: PORTAbits.RA0 = 0;
  2243  006FAE  9080               	bcf	128,0,c	;volatile
  2244  006FB0                     
  2245                           ;Lcd4Lignes.c: 272: PORTAbits.RA1 = 0;
  2246  006FB0  9280               	bcf	128,1,c	;volatile
  2247  006FB2                     
  2248                           ;Lcd4Lignes.c: 274: lcd_ecrireDonnees(0x03);
  2249  006FB2  0E03               	movlw	3
  2250  006FB4  ECFC  F035         	call	_lcd_ecrireDonnees
  2251  006FB8                     
  2252                           ;Lcd4Lignes.c: 275: lcd_strobeEnableBit();
  2253  006FB8  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  2254  006FBC                     
  2255                           ;Lcd4Lignes.c: 276: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2256  006FBC  0E03               	movlw	3
  2257  006FBE                     u1317:
  2258  006FBE  2EE8               	decfsz	wreg,f,c
  2259  006FC0  D7FE               	bra	u1317
  2260  006FC2  F000               	nop	
  2261  006FC4                     
  2262                           ;Lcd4Lignes.c: 279: lcd_ecrireDonnees(0x03);
  2263  006FC4  0E03               	movlw	3
  2264  006FC6  ECFC  F035         	call	_lcd_ecrireDonnees
  2265  006FCA                     
  2266                           ;Lcd4Lignes.c: 280: lcd_strobeEnableBit();
  2267  006FCA  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  2268  006FCE                     
  2269                           ;Lcd4Lignes.c: 281: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2270  006FCE  0E03               	movlw	3
  2271  006FD0                     u1327:
  2272  006FD0  2EE8               	decfsz	wreg,f,c
  2273  006FD2  D7FE               	bra	u1327
  2274  006FD4  F000               	nop	
  2275  006FD6                     
  2276                           ;Lcd4Lignes.c: 283: lcd_ecrireDonnees(0x03);
  2277  006FD6  0E03               	movlw	3
  2278  006FD8  ECFC  F035         	call	_lcd_ecrireDonnees
  2279  006FDC                     
  2280                           ;Lcd4Lignes.c: 284: lcd_strobeEnableBit();
  2281  006FDC  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  2282  006FE0                     
  2283                           ;Lcd4Lignes.c: 285: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2284  006FE0  0E03               	movlw	3
  2285  006FE2                     u1337:
  2286  006FE2  2EE8               	decfsz	wreg,f,c
  2287  006FE4  D7FE               	bra	u1337
  2288  006FE6  F000               	nop	
  2289  006FE8                     
  2290                           ;Lcd4Lignes.c: 287: lcd_ecrireDonnees(0x02);
  2291  006FE8  0E02               	movlw	2
  2292  006FEA  ECFC  F035         	call	_lcd_ecrireDonnees
  2293  006FEE                     
  2294                           ;Lcd4Lignes.c: 288: lcd_strobeEnableBit();
  2295  006FEE  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  2296  006FF2                     
  2297                           ;Lcd4Lignes.c: 289: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2298  006FF2  0E03               	movlw	3
  2299  006FF4                     u1347:
  2300  006FF4  2EE8               	decfsz	wreg,f,c
  2301  006FF6  D7FE               	bra	u1347
  2302  006FF8  F000               	nop	
  2303  006FFA                     
  2304                           ;Lcd4Lignes.c: 291: TRISD = 0b00001111;
  2305  006FFA  0E0F               	movlw	15
  2306  006FFC  6E95               	movwf	149,c	;volatile
  2307  006FFE  0012               	return		;funcret
  2308  007000                     __end_of_lcd_resetSequence:
  2309                           	opt callstack 0
  2310                           
  2311 ;; *************** function _lcd_initCGRam *****************
  2312 ;; Defined at:
  2313 ;;		line 459 in file "Lcd4Lignes.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;		None
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  j               1    6[BANK0 ] unsigned char 
  2318 ;;  i               1    5[BANK0 ] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:         0       0       0       0       0       0       0
  2329 ;;      Locals:         0       2       0       0       0       0       0
  2330 ;;      Temps:          0       2       0       0       0       0       0
  2331 ;;      Totals:         0       4       0       0       0       0       0
  2332 ;;Total ram usage:        4 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    4
  2335 ;; This function calls:
  2336 ;;		_lcd_curseurHome
  2337 ;;		_lcd_wrCom
  2338 ;;		_lcd_wrData
  2339 ;; This function is called by:
  2340 ;;		_lcd_init
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text9
  2345  007268                     __ptext9:
  2346                           	opt callstack 0
  2347  007268                     _lcd_initCGRam:
  2348                           	opt callstack 25
  2349  007268                     
  2350                           ;Lcd4Lignes.c: 461: char i,j;;Lcd4Lignes.c: 463: lcd_wrCom(0x40);
  2351  007268  0E40               	movlw	64
  2352  00726A  EC00  F038         	call	_lcd_wrCom
  2353  00726E                     
  2354                           ;Lcd4Lignes.c: 464: for(i=0;i<8;i++)
  2355  00726E  0E00               	movlw	0
  2356  007270  0100               	movlb	0	; force () banked
  2357  007272  6FBD               	movwf	lcd_initCGRam@i& (0+255),b
  2358  007274                     
  2359                           ; BSR set to: 0
  2360  007274  0E07               	movlw	7
  2361  007276  0100               	movlb	0	; force () banked
  2362  007278  65BD               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2363  00727A  EF41  F039         	goto	u941
  2364  00727E  EF43  F039         	goto	u940
  2365  007282                     u941:
  2366  007282  EF45  F039         	goto	l1906
  2367  007286                     u940:
  2368  007286  EF82  F039         	goto	l1922
  2369  00728A                     l1906:
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;Lcd4Lignes.c: 465: {;Lcd4Lignes.c: 466: for(j=0;j<8;j++)
  2373  00728A  0E00               	movlw	0
  2374  00728C  0100               	movlb	0	; force () banked
  2375  00728E  6FBE               	movwf	lcd_initCGRam@j& (0+255),b
  2376  007290                     
  2377                           ; BSR set to: 0
  2378  007290  0E07               	movlw	7
  2379  007292  0100               	movlb	0	; force () banked
  2380  007294  65BE               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2381  007296  EF4F  F039         	goto	u951
  2382  00729A  EF51  F039         	goto	u950
  2383  00729E                     u951:
  2384  00729E  EF53  F039         	goto	l1912
  2385  0072A2                     u950:
  2386  0072A2  EF77  F039         	goto	l1918
  2387  0072A6                     l1912:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;Lcd4Lignes.c: 467: lcd_wrData(matCGRAM[i][j]);
  2391  0072A6  0100               	movlb	0	; force () banked
  2392  0072A8  51BD               	movf	lcd_initCGRam@i& (0+255),w,b
  2393  0072AA  0D08               	mullw	8
  2394  0072AC  0E54               	movlw	low _matCGRAM
  2395  0072AE  0100               	movlb	0	; force () banked
  2396  0072B0  6FBB               	movwf	??_lcd_initCGRam& (0+255),b
  2397  0072B2  0E01               	movlw	high _matCGRAM
  2398  0072B4  6FBC               	movwf	(??_lcd_initCGRam+1)& (0+255),b
  2399  0072B6  50F3               	movf	243,w,c
  2400  0072B8  27BB               	addwf	??_lcd_initCGRam& (0+255),f,b
  2401  0072BA  50F4               	movf	244,w,c
  2402  0072BC  23BC               	addwfc	(??_lcd_initCGRam+1)& (0+255),f,b
  2403  0072BE  0100               	movlb	0	; force () banked
  2404  0072C0  51BE               	movf	lcd_initCGRam@j& (0+255),w,b
  2405  0072C2  0100               	movlb	0	; force () banked
  2406  0072C4  25BB               	addwf	??_lcd_initCGRam& (0+255),w,b
  2407  0072C6  6ED9               	movwf	fsr2l,c
  2408  0072C8  0100               	movlb	0	; force () banked
  2409  0072CA  0E00               	movlw	0
  2410  0072CC  0100               	movlb	0	; force () banked
  2411  0072CE  21BC               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
  2412  0072D0  6EDA               	movwf	fsr2h,c
  2413  0072D2  50DF               	movf	indf2,w,c
  2414  0072D4  EC48  F036         	call	_lcd_wrData
  2415  0072D8  0100               	movlb	0	; force () banked
  2416  0072DA  2BBE               	incf	lcd_initCGRam@j& (0+255),f,b
  2417  0072DC                     
  2418                           ; BSR set to: 0
  2419  0072DC  0E07               	movlw	7
  2420  0072DE  0100               	movlb	0	; force () banked
  2421  0072E0  65BE               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2422  0072E2  EF75  F039         	goto	u961
  2423  0072E6  EF77  F039         	goto	u960
  2424  0072EA                     u961:
  2425  0072EA  EF53  F039         	goto	l1912
  2426  0072EE                     u960:
  2427  0072EE                     l1918:
  2428                           
  2429                           ; BSR set to: 0
  2430  0072EE  0100               	movlb	0	; force () banked
  2431  0072F0  2BBD               	incf	lcd_initCGRam@i& (0+255),f,b
  2432  0072F2                     
  2433                           ; BSR set to: 0
  2434  0072F2  0E07               	movlw	7
  2435  0072F4  0100               	movlb	0	; force () banked
  2436  0072F6  65BD               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2437  0072F8  EF80  F039         	goto	u971
  2438  0072FC  EF82  F039         	goto	u970
  2439  007300                     u971:
  2440  007300  EF45  F039         	goto	l1906
  2441  007304                     u970:
  2442  007304                     l1922:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;Lcd4Lignes.c: 468: };Lcd4Lignes.c: 469: lcd_curseurHome();
  2446  007304  ECF0  F035         	call	_lcd_curseurHome	;wreg free
  2447  007308  0012               	return		;funcret
  2448  00730A                     __end_of_lcd_initCGRam:
  2449                           	opt callstack 0
  2450                           
  2451 ;; *************** function _lcd_curseurHome *****************
  2452 ;; Defined at:
  2453 ;;		line 330 in file "Lcd4Lignes.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2467 ;;      Params:         0       0       0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0
  2470 ;;      Totals:         0       0       0       0       0       0       0
  2471 ;;Total ram usage:        0 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    3
  2474 ;; This function calls:
  2475 ;;		_lcd_wrCom
  2476 ;; This function is called by:
  2477 ;;		_lcd_initCGRam
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text10
  2482  006BE0                     __ptext10:
  2483                           	opt callstack 0
  2484  006BE0                     _lcd_curseurHome:
  2485                           	opt callstack 25
  2486  006BE0                     
  2487                           ;Lcd4Lignes.c: 332: lcd_wrCom(0x02);
  2488  006BE0  0E02               	movlw	2
  2489  006BE2  EC00  F038         	call	_lcd_wrCom
  2490  006BE6  0012               	return		;funcret
  2491  006BE8                     __end_of_lcd_curseurHome:
  2492                           	opt callstack 0
  2493                           
  2494 ;; *************** function _initialisation *****************
  2495 ;; Defined at:
  2496 ;;		line 322 in file "main.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2510 ;;      Params:         0       0       0       0       0       0       0
  2511 ;;      Locals:         0       0       0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0       0       0
  2513 ;;      Totals:         0       0       0       0       0       0       0
  2514 ;;Total ram usage:        0 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    1
  2517 ;; This function calls:
  2518 ;;		_srand
  2519 ;; This function is called by:
  2520 ;;		_main
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text11
  2525  006D46                     __ptext11:
  2526                           	opt callstack 0
  2527  006D46                     _initialisation:
  2528                           	opt callstack 29
  2529  006D46                     
  2530                           ;main.c: 324: TRISD = 0;
  2531  006D46  0E00               	movlw	0
  2532  006D48  6E95               	movwf	149,c	;volatile
  2533                           
  2534                           ;main.c: 326: ANSELH = 0;
  2535  006D4A  0E00               	movlw	0
  2536  006D4C  6E7F               	movwf	127,c	;volatile
  2537  006D4E                     
  2538                           ;main.c: 327: TRISB = 0xFF;
  2539  006D4E  6893               	setf	147,c	;volatile
  2540                           
  2541                           ;main.c: 329: ANSEL = 0;
  2542  006D50  0E00               	movlw	0
  2543  006D52  6E7E               	movwf	126,c	;volatile
  2544                           
  2545                           ;main.c: 330: TRISA = 0;
  2546  006D54  0E00               	movlw	0
  2547  006D56  6E92               	movwf	146,c	;volatile
  2548  006D58                     
  2549                           ;main.c: 334: T1CONbits.TMR1ON = 1;
  2550  006D58  80CD               	bsf	205,0,c	;volatile
  2551  006D5A                     
  2552                           ;main.c: 335: srand(TMR1);
  2553  006D5A  CFCE F0B8          	movff	4046,srand@x	;volatile
  2554  006D5E  CFCF F0B9          	movff	4047,srand@x+1	;volatile
  2555  006D62  ECF4  F035         	call	_srand	;wreg free
  2556  006D66                     
  2557                           ;main.c: 338: ANSELbits.ANS7 = 1;
  2558  006D66  8E7E               	bsf	126,7,c	;volatile
  2559  006D68                     
  2560                           ;main.c: 340: ADCON0bits.ADON = 1;
  2561  006D68  80C2               	bsf	194,0,c	;volatile
  2562  006D6A                     
  2563                           ;main.c: 341: ADCON1 = 0;
  2564  006D6A  0E00               	movlw	0
  2565  006D6C  6EC1               	movwf	193,c	;volatile
  2566  006D6E                     
  2567                           ;main.c: 343: ADCON2bits.ADFM = 0;
  2568  006D6E  9EC0               	bcf	192,7,c	;volatile
  2569  006D70                     
  2570                           ;main.c: 344: ADCON2bits.ACQT = 0;
  2571  006D70  0EC7               	movlw	-57
  2572  006D72  16C0               	andwf	192,f,c	;volatile
  2573  006D74                     
  2574                           ;main.c: 345: ADCON2bits.ADCS = 0;
  2575  006D74  0EF8               	movlw	-8
  2576  006D76  16C0               	andwf	192,f,c	;volatile
  2577  006D78                     
  2578                           ;main.c: 349: T0CONbits.TMR0ON = 1;
  2579  006D78  8ED5               	bsf	213,7,c	;volatile
  2580  006D7A                     
  2581                           ;main.c: 350: T0CONbits.T08BIT = 0;
  2582  006D7A  9CD5               	bcf	213,6,c	;volatile
  2583  006D7C                     
  2584                           ;main.c: 351: T0CONbits.T0CS = 0;
  2585  006D7C  9AD5               	bcf	213,5,c	;volatile
  2586  006D7E                     
  2587                           ;main.c: 352: T0CONbits.PSA = 0;
  2588  006D7E  96D5               	bcf	213,3,c	;volatile
  2589  006D80                     
  2590                           ;main.c: 353: T0CONbits.T0PS = 0b010;
  2591  006D80  50D5               	movf	213,w,c	;volatile
  2592  006D82  0BF8               	andlw	-8
  2593  006D84  0902               	iorlw	2
  2594  006D86  6ED5               	movwf	213,c	;volatile
  2595  006D88                     
  2596                           ;main.c: 354: INTCONbits.TMR0IE = 1;
  2597  006D88  8AF2               	bsf	242,5,c	;volatile
  2598  006D8A                     
  2599                           ;main.c: 355: INTCONbits.TMR0IF = 0;
  2600  006D8A  94F2               	bcf	242,2,c	;volatile
  2601  006D8C                     
  2602                           ;main.c: 356: INTCONbits.PEIE = 1;
  2603  006D8C  8CF2               	bsf	242,6,c	;volatile
  2604  006D8E                     
  2605                           ;main.c: 357: INTCONbits.GIE = 1;
  2606  006D8E  8EF2               	bsf	242,7,c	;volatile
  2607  006D90  0012               	return		;funcret
  2608  006D92                     __end_of_initialisation:
  2609                           	opt callstack 0
  2610                           
  2611 ;; *************** function _srand *****************
  2612 ;; Defined at:
  2613 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  x               2    0[BANK0 ] unsigned int 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		status,2
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2627 ;;      Params:         0       2       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0
  2630 ;;      Totals:         0       2       0       0       0       0       0
  2631 ;;Total ram usage:        2 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_initialisation
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text12
  2641  006BE8                     __ptext12:
  2642                           	opt callstack 0
  2643  006BE8                     _srand:
  2644                           	opt callstack 29
  2645  006BE8  C0B8  F060         	movff	srand@x,_randx
  2646  006BEC  C0B9  F061         	movff	srand@x+1,_randx+1
  2647  006BF0  0100               	movlb	0	; () banked
  2648  006BF2  6B62               	clrf	(_randx+2)& (0+255),b
  2649  006BF4  6B63               	clrf	(_randx+3)& (0+255),b
  2650  006BF6                     
  2651                           ; BSR set to: 0
  2652  006BF6  0012               	return		;funcret
  2653  006BF8                     __end_of_srand:
  2654                           	opt callstack 0
  2655                           
  2656 ;; *************** function _initTabVue *****************
  2657 ;; Defined at:
  2658 ;;		line 103 in file "main.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  j               2    8[BANK0 ] int 
  2663 ;;  i               2   10[BANK0 ] int 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2673 ;;      Params:         0       0       0       0       0       0       0
  2674 ;;      Locals:         0       4       0       0       0       0       0
  2675 ;;      Temps:          0       2       0       0       0       0       0
  2676 ;;      Totals:         0       6       0       0       0       0       0
  2677 ;;Total ram usage:        6 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    1
  2680 ;; This function calls:
  2681 ;;		___wmul
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text13
  2688  00749A                     __ptext13:
  2689                           	opt callstack 0
  2690  00749A                     _initTabVue:
  2691                           	opt callstack 29
  2692  00749A                     
  2693                           ;main.c: 105: for(int i=0;i<4;i++)
  2694  00749A  0E00               	movlw	0
  2695  00749C  0100               	movlb	0	; force () banked
  2696  00749E  6FC3               	movwf	(initTabVue@i+1)& (0+255),b
  2697  0074A0  0E00               	movlw	0
  2698  0074A2  6FC2               	movwf	initTabVue@i& (0+255),b
  2699  0074A4                     
  2700                           ; BSR set to: 0
  2701  0074A4  0100               	movlb	0	; force () banked
  2702  0074A6  BFC3               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2703  0074A8  EF5F  F03A         	goto	u1041
  2704  0074AC  51C3               	movf	(initTabVue@i+1)& (0+255),w,b
  2705  0074AE  E109               	bnz	u1040
  2706  0074B0  0E04               	movlw	4
  2707  0074B2  5DC2               	subwf	initTabVue@i& (0+255),w,b
  2708  0074B4  A0D8               	btfss	status,0,c
  2709  0074B6  EF5F  F03A         	goto	u1041
  2710  0074BA  EF61  F03A         	goto	u1040
  2711  0074BE                     u1041:
  2712  0074BE  EF63  F03A         	goto	l2008
  2713  0074C2                     u1040:
  2714  0074C2  EFD5  F03A         	goto	l83
  2715  0074C6                     l2008:
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;main.c: 106: {;main.c: 107: for(int j=0;j<20;j++)
  2719  0074C6  0E00               	movlw	0
  2720  0074C8  0100               	movlb	0	; force () banked
  2721  0074CA  6FC1               	movwf	(initTabVue@j+1)& (0+255),b
  2722  0074CC  0E00               	movlw	0
  2723  0074CE  6FC0               	movwf	initTabVue@j& (0+255),b
  2724  0074D0                     
  2725                           ; BSR set to: 0
  2726  0074D0  0100               	movlb	0	; force () banked
  2727  0074D2  BFC1               	btfsc	(initTabVue@j+1)& (0+255),7,b
  2728  0074D4  EF75  F03A         	goto	u1051
  2729  0074D8  51C1               	movf	(initTabVue@j+1)& (0+255),w,b
  2730  0074DA  E109               	bnz	u1050
  2731  0074DC  0E14               	movlw	20
  2732  0074DE  5DC0               	subwf	initTabVue@j& (0+255),w,b
  2733  0074E0  A0D8               	btfss	status,0,c
  2734  0074E2  EF75  F03A         	goto	u1051
  2735  0074E6  EF77  F03A         	goto	u1050
  2736  0074EA                     u1051:
  2737  0074EA  EF79  F03A         	goto	l2014
  2738  0074EE                     u1050:
  2739  0074EE  EFAF  F03A         	goto	l2020
  2740  0074F2                     l2014:
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 108: {;main.c: 109: m_tabVue[i][j] = 1;
  2744  0074F2  C0C2  F0B8         	movff	initTabVue@i,___wmul@multiplier
  2745  0074F6  C0C3  F0B9         	movff	initTabVue@i+1,___wmul@multiplier+1
  2746  0074FA  0E00               	movlw	0
  2747  0074FC  0100               	movlb	0	; force () banked
  2748  0074FE  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2749  007500  0E15               	movlw	21
  2750  007502  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2751  007504  EC0A  F036         	call	___wmul	;wreg free
  2752  007508  0E00               	movlw	low _m_tabVue
  2753  00750A  0100               	movlb	0	; force () banked
  2754  00750C  6FBE               	movwf	??_initTabVue& (0+255),b
  2755  00750E  0E01               	movlw	high _m_tabVue
  2756  007510  6FBF               	movwf	(??_initTabVue+1)& (0+255),b
  2757  007512  0100               	movlb	0	; force () banked
  2758  007514  51B8               	movf	?___wmul& (0+255),w,b
  2759  007516  0100               	movlb	0	; force () banked
  2760  007518  27BE               	addwf	??_initTabVue& (0+255),f,b
  2761  00751A  0100               	movlb	0	; force () banked
  2762  00751C  51B9               	movf	(?___wmul+1)& (0+255),w,b
  2763  00751E  0100               	movlb	0	; force () banked
  2764  007520  23BF               	addwfc	(??_initTabVue+1)& (0+255),f,b
  2765  007522  0100               	movlb	0	; force () banked
  2766  007524  51C0               	movf	initTabVue@j& (0+255),w,b
  2767  007526  0100               	movlb	0	; force () banked
  2768  007528  25BE               	addwf	??_initTabVue& (0+255),w,b
  2769  00752A  6ED9               	movwf	fsr2l,c
  2770  00752C  0100               	movlb	0	; force () banked
  2771  00752E  51C1               	movf	(initTabVue@j+1)& (0+255),w,b
  2772  007530  0100               	movlb	0	; force () banked
  2773  007532  21BF               	addwfc	(??_initTabVue+1)& (0+255),w,b
  2774  007534  6EDA               	movwf	fsr2h,c
  2775  007536  0E01               	movlw	1
  2776  007538  6EDF               	movwf	indf2,c
  2777  00753A                     
  2778                           ; BSR set to: 0
  2779  00753A  0100               	movlb	0	; force () banked
  2780  00753C  4BC0               	infsnz	initTabVue@j& (0+255),f,b
  2781  00753E  2BC1               	incf	(initTabVue@j+1)& (0+255),f,b
  2782  007540                     
  2783                           ; BSR set to: 0
  2784  007540  0100               	movlb	0	; force () banked
  2785  007542  BFC1               	btfsc	(initTabVue@j+1)& (0+255),7,b
  2786  007544  EFAD  F03A         	goto	u1061
  2787  007548  51C1               	movf	(initTabVue@j+1)& (0+255),w,b
  2788  00754A  E109               	bnz	u1060
  2789  00754C  0E14               	movlw	20
  2790  00754E  5DC0               	subwf	initTabVue@j& (0+255),w,b
  2791  007550  A0D8               	btfss	status,0,c
  2792  007552  EFAD  F03A         	goto	u1061
  2793  007556  EFAF  F03A         	goto	u1060
  2794  00755A                     u1061:
  2795  00755A  EF79  F03A         	goto	l2014
  2796  00755E                     u1060:
  2797  00755E                     l2020:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 110: };main.c: 111: m_tabVue[i][20]=0;
  2801  00755E  C0C2  F0B8         	movff	initTabVue@i,___wmul@multiplier
  2802  007562  C0C3  F0B9         	movff	initTabVue@i+1,___wmul@multiplier+1
  2803  007566  0E00               	movlw	0
  2804  007568  0100               	movlb	0	; force () banked
  2805  00756A  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2806  00756C  0E15               	movlw	21
  2807  00756E  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  2808  007570  EC0A  F036         	call	___wmul	;wreg free
  2809  007574  0E14               	movlw	low (_m_tabVue+20)
  2810  007576  0100               	movlb	0	; force () banked
  2811  007578  25B8               	addwf	?___wmul& (0+255),w,b
  2812  00757A  6ED9               	movwf	fsr2l,c
  2813  00757C  0E01               	movlw	high (_m_tabVue+20)
  2814  00757E  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
  2815  007580  6EDA               	movwf	fsr2h,c
  2816  007582  0E00               	movlw	0
  2817  007584  6EDF               	movwf	indf2,c
  2818  007586                     
  2819                           ; BSR set to: 0
  2820  007586  0100               	movlb	0	; force () banked
  2821  007588  4BC2               	infsnz	initTabVue@i& (0+255),f,b
  2822  00758A  2BC3               	incf	(initTabVue@i+1)& (0+255),f,b
  2823  00758C                     
  2824                           ; BSR set to: 0
  2825  00758C  0100               	movlb	0	; force () banked
  2826  00758E  BFC3               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2827  007590  EFD3  F03A         	goto	u1071
  2828  007594  51C3               	movf	(initTabVue@i+1)& (0+255),w,b
  2829  007596  E109               	bnz	u1070
  2830  007598  0E04               	movlw	4
  2831  00759A  5DC2               	subwf	initTabVue@i& (0+255),w,b
  2832  00759C  A0D8               	btfss	status,0,c
  2833  00759E  EFD3  F03A         	goto	u1071
  2834  0075A2  EFD5  F03A         	goto	u1070
  2835  0075A6                     u1071:
  2836  0075A6  EF63  F03A         	goto	l2008
  2837  0075AA                     u1070:
  2838  0075AA                     l83:
  2839                           
  2840                           ; BSR set to: 0
  2841  0075AA  0012               	return		;funcret
  2842  0075AC                     __end_of_initTabVue:
  2843                           	opt callstack 0
  2844                           
  2845 ;; *************** function _deplace *****************
  2846 ;; Defined at:
  2847 ;;		line 229 in file "main.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  x               2    5[BANK0 ] PTR unsigned char 
  2850 ;;		 -> main@posX(1), 
  2851 ;;  y               2    7[BANK0 ] PTR unsigned char 
  2852 ;;		 -> main@posY(1), 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2864 ;;      Params:         0       4       0       0       0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0       0
  2866 ;;      Temps:          0       1       0       0       0       0       0
  2867 ;;      Totals:         0       5       0       0       0       0       0
  2868 ;;Total ram usage:        5 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    4
  2871 ;; This function calls:
  2872 ;;		_getAnalog
  2873 ;;		_lcd_gotoXY
  2874 ;; This function is called by:
  2875 ;;		_main
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text14
  2880  0075AC                     __ptext14:
  2881                           	opt callstack 0
  2882  0075AC                     _deplace:
  2883                           	opt callstack 26
  2884  0075AC                     
  2885                           ;main.c: 231: if(getAnalog(7)>150)
  2886  0075AC  0E07               	movlw	7
  2887  0075AE  EC32  F036         	call	_getAnalog
  2888  0075B2  0100               	movlb	0	; force () banked
  2889  0075B4  6FC1               	movwf	??_deplace& (0+255),b
  2890  0075B6  0E96               	movlw	150
  2891  0075B8  65C1               	cpfsgt	??_deplace& (0+255),b
  2892  0075BA  EFE1  F03A         	goto	u1181
  2893  0075BE  EFE3  F03A         	goto	u1180
  2894  0075C2                     u1181:
  2895  0075C2  EFE8  F03A         	goto	l2084
  2896  0075C6                     u1180:
  2897  0075C6                     
  2898                           ; BSR set to: 0
  2899                           ;main.c: 232: {;main.c: 233: (*x)++;
  2900  0075C6  C0BD  FFD9         	movff	deplace@x,fsr2l
  2901  0075CA  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  2902  0075CE  2ADF               	incf	indf2,f,c
  2903  0075D0                     l2084:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 234: };main.c: 235: if(getAnalog(7)<100)
  2907  0075D0  0E07               	movlw	7
  2908  0075D2  EC32  F036         	call	_getAnalog
  2909  0075D6  0100               	movlb	0	; force () banked
  2910  0075D8  6FC1               	movwf	??_deplace& (0+255),b
  2911  0075DA  0E64               	movlw	100
  2912  0075DC  61C1               	cpfslt	??_deplace& (0+255),b
  2913  0075DE  EFF3  F03A         	goto	u1191
  2914  0075E2  EFF5  F03A         	goto	u1190
  2915  0075E6                     u1191:
  2916  0075E6  EFFA  F03A         	goto	l2088
  2917  0075EA                     u1190:
  2918  0075EA                     
  2919                           ; BSR set to: 0
  2920                           ;main.c: 236: {;main.c: 237: (*x)--;
  2921  0075EA  C0BD  FFD9         	movff	deplace@x,fsr2l
  2922  0075EE  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  2923  0075F2  06DF               	decf	indf2,f,c
  2924  0075F4                     l2088:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;main.c: 238: };main.c: 239: if(getAnalog(6)>150)
  2928  0075F4  0E06               	movlw	6
  2929  0075F6  EC32  F036         	call	_getAnalog
  2930  0075FA  0100               	movlb	0	; force () banked
  2931  0075FC  6FC1               	movwf	??_deplace& (0+255),b
  2932  0075FE  0E96               	movlw	150
  2933  007600  65C1               	cpfsgt	??_deplace& (0+255),b
  2934  007602  EF05  F03B         	goto	u1201
  2935  007606  EF07  F03B         	goto	u1200
  2936  00760A                     u1201:
  2937  00760A  EF0C  F03B         	goto	l2092
  2938  00760E                     u1200:
  2939  00760E                     
  2940                           ; BSR set to: 0
  2941                           ;main.c: 240: {;main.c: 241: (*y)--;
  2942  00760E  C0BF  FFD9         	movff	deplace@y,fsr2l
  2943  007612  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  2944  007616  06DF               	decf	indf2,f,c
  2945  007618                     l2092:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 242: };main.c: 243: if(getAnalog(6)<100)
  2949  007618  0E06               	movlw	6
  2950  00761A  EC32  F036         	call	_getAnalog
  2951  00761E  0100               	movlb	0	; force () banked
  2952  007620  6FC1               	movwf	??_deplace& (0+255),b
  2953  007622  0E64               	movlw	100
  2954  007624  61C1               	cpfslt	??_deplace& (0+255),b
  2955  007626  EF17  F03B         	goto	u1211
  2956  00762A  EF19  F03B         	goto	u1210
  2957  00762E                     u1211:
  2958  00762E  EF1E  F03B         	goto	l2096
  2959  007632                     u1210:
  2960  007632                     
  2961                           ; BSR set to: 0
  2962                           ;main.c: 244: {;main.c: 245: (*y)++;
  2963  007632  C0BF  FFD9         	movff	deplace@y,fsr2l
  2964  007636  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  2965  00763A  2ADF               	incf	indf2,f,c
  2966  00763C                     l2096:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;main.c: 246: };main.c: 247: if(*x<=0)
  2970  00763C  C0BD  FFD9         	movff	deplace@x,fsr2l
  2971  007640  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  2972  007644  50DF               	movf	indf2,w,c
  2973  007646  A4D8               	btfss	status,2,c
  2974  007648  EF28  F03B         	goto	u1221
  2975  00764C  EF2A  F03B         	goto	u1220
  2976  007650                     u1221:
  2977  007650  EF30  F03B         	goto	l2100
  2978  007654                     u1220:
  2979  007654                     
  2980                           ; BSR set to: 0
  2981                           ;main.c: 248: {;main.c: 249: *x=20;
  2982  007654  C0BD  FFD9         	movff	deplace@x,fsr2l
  2983  007658  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  2984  00765C  0E14               	movlw	20
  2985  00765E  6EDF               	movwf	indf2,c
  2986  007660                     l2100:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 250: };main.c: 251: if(*x>20)
  2990  007660  C0BD  FFD9         	movff	deplace@x,fsr2l
  2991  007664  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  2992  007668  0E14               	movlw	20
  2993  00766A  64DF               	cpfsgt	indf2,c
  2994  00766C  EF3A  F03B         	goto	u1231
  2995  007670  EF3C  F03B         	goto	u1230
  2996  007674                     u1231:
  2997  007674  EF42  F03B         	goto	l2104
  2998  007678                     u1230:
  2999  007678                     
  3000                           ; BSR set to: 0
  3001                           ;main.c: 252: {;main.c: 253: *x=1;
  3002  007678  C0BD  FFD9         	movff	deplace@x,fsr2l
  3003  00767C  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  3004  007680  0E01               	movlw	1
  3005  007682  6EDF               	movwf	indf2,c
  3006  007684                     l2104:
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 254: };main.c: 255: if(*y<=0)
  3010  007684  C0BF  FFD9         	movff	deplace@y,fsr2l
  3011  007688  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  3012  00768C  50DF               	movf	indf2,w,c
  3013  00768E  A4D8               	btfss	status,2,c
  3014  007690  EF4C  F03B         	goto	u1241
  3015  007694  EF4E  F03B         	goto	u1240
  3016  007698                     u1241:
  3017  007698  EF54  F03B         	goto	l2108
  3018  00769C                     u1240:
  3019  00769C                     
  3020                           ; BSR set to: 0
  3021                           ;main.c: 256: {;main.c: 257: *y=4;
  3022  00769C  C0BF  FFD9         	movff	deplace@y,fsr2l
  3023  0076A0  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  3024  0076A4  0E04               	movlw	4
  3025  0076A6  6EDF               	movwf	indf2,c
  3026  0076A8                     l2108:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 258: };main.c: 259: if(*y>4)
  3030  0076A8  C0BF  FFD9         	movff	deplace@y,fsr2l
  3031  0076AC  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  3032  0076B0  0E04               	movlw	4
  3033  0076B2  64DF               	cpfsgt	indf2,c
  3034  0076B4  EF5E  F03B         	goto	u1251
  3035  0076B8  EF60  F03B         	goto	u1250
  3036  0076BC                     u1251:
  3037  0076BC  EF66  F03B         	goto	l2112
  3038  0076C0                     u1250:
  3039  0076C0                     
  3040                           ; BSR set to: 0
  3041                           ;main.c: 260: {;main.c: 261: *y=1;
  3042  0076C0  C0BF  FFD9         	movff	deplace@y,fsr2l
  3043  0076C4  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  3044  0076C8  0E01               	movlw	1
  3045  0076CA  6EDF               	movwf	indf2,c
  3046  0076CC                     l2112:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 262: };main.c: 263: lcd_gotoXY(*x,*y);
  3050  0076CC  C0BF  FFD9         	movff	deplace@y,fsr2l
  3051  0076D0  C0C0  FFDA         	movff	deplace@y+1,fsr2h
  3052  0076D4  50DF               	movf	indf2,w,c
  3053  0076D6  0100               	movlb	0	; force () banked
  3054  0076D8  6FBB               	movwf	lcd_gotoXY@y& (0+255),b
  3055  0076DA  C0BD  FFD9         	movff	deplace@x,fsr2l
  3056  0076DE  C0BE  FFDA         	movff	deplace@x+1,fsr2h
  3057  0076E2  50DF               	movf	indf2,w,c
  3058  0076E4  EC6C  F038         	call	_lcd_gotoXY
  3059  0076E8  0012               	return		;funcret
  3060  0076EA                     __end_of_deplace:
  3061                           	opt callstack 0
  3062                           
  3063 ;; *************** function _getAnalog *****************
  3064 ;; Defined at:
  3065 ;;		line 307 in file "main.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  canal           1    wreg     unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  canal           1    1[BANK0 ] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      unsigned char 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3079 ;;      Params:         0       0       0       0       0       0       0
  3080 ;;      Locals:         0       1       0       0       0       0       0
  3081 ;;      Temps:          0       1       0       0       0       0       0
  3082 ;;      Totals:         0       2       0       0       0       0       0
  3083 ;;Total ram usage:        2 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_deplace
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text15
  3093  006C64                     __ptext15:
  3094                           	opt callstack 0
  3095  006C64                     _getAnalog:
  3096                           	opt callstack 29
  3097                           
  3098                           ;incstack = 0
  3099                           ;getAnalog@canal stored from wreg
  3100  006C64  0100               	movlb	0	; force () banked
  3101  006C66  6FB9               	movwf	getAnalog@canal& (0+255),b
  3102  006C68                     
  3103                           ;main.c: 309: ADCON0bits.CHS = canal;
  3104  006C68  C0B9  F0B8         	movff	getAnalog@canal,??_getAnalog
  3105  006C6C  0100               	movlb	0	; force () banked
  3106  006C6E  47B8               	rlncf	??_getAnalog& (0+255),f,b
  3107  006C70  47B8               	rlncf	??_getAnalog& (0+255),f,b
  3108  006C72  50C2               	movf	194,w,c	;volatile
  3109  006C74  19B8               	xorwf	??_getAnalog& (0+255),w,b
  3110  006C76  0BC3               	andlw	-61
  3111  006C78  19B8               	xorwf	??_getAnalog& (0+255),w,b
  3112  006C7A  6EC2               	movwf	194,c	;volatile
  3113  006C7C                     
  3114                           ;main.c: 311: ADCON0bits.GO_DONE = 1;
  3115  006C7C  82C2               	bsf	194,1,c	;volatile
  3116  006C7E                     l139:
  3117  006C7E  B2C2               	btfsc	194,1,c	;volatile
  3118  006C80  EF44  F036         	goto	u271
  3119  006C84  EF46  F036         	goto	u270
  3120  006C88                     u271:
  3121  006C88  EF3F  F036         	goto	l139
  3122  006C8C                     u270:
  3123  006C8C                     
  3124                           ;main.c: 314: return ADRESH;
  3125  006C8C  50C4               	movf	196,w,c	;volatile
  3126  006C8E  0012               	return		;funcret
  3127  006C90                     __end_of_getAnalog:
  3128                           	opt callstack 0
  3129                           
  3130 ;; *************** function _demine *****************
  3131 ;; Defined at:
  3132 ;;		line 274 in file "main.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  x               1    wreg     unsigned char 
  3135 ;;  y               1    0[BANK0 ] unsigned char 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  x               1    5[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      unsigned char 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         0       1       0       0       0       0       0
  3148 ;;      Locals:         0       1       0       0       0       0       0
  3149 ;;      Temps:          0       4       0       0       0       0       0
  3150 ;;      Totals:         0       6       0       0       0       0       0
  3151 ;;Total ram usage:        6 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text16
  3161  006F34                     __ptext16:
  3162                           	opt callstack 0
  3163  006F34                     _demine:
  3164                           	opt callstack 30
  3165                           
  3166                           ;incstack = 0
  3167                           ;demine@x stored from wreg
  3168  006F34  0100               	movlb	0	; force () banked
  3169  006F36  6FBD               	movwf	demine@x& (0+255),b
  3170  006F38                     
  3171                           ;main.c: 276: m_tabVue[y][x] = m_tabMines[y][x];
  3172  006F38  0100               	movlb	0	; force () banked
  3173  006F3A  51B8               	movf	demine@y& (0+255),w,b
  3174  006F3C  0D15               	mullw	21
  3175  006F3E  0E64               	movlw	low _m_tabMines
  3176  006F40  0100               	movlb	0	; force () banked
  3177  006F42  6FB9               	movwf	??_demine& (0+255),b
  3178  006F44  0E00               	movlw	high _m_tabMines
  3179  006F46  6FBA               	movwf	(??_demine+1)& (0+255),b
  3180  006F48  50F3               	movf	243,w,c
  3181  006F4A  27B9               	addwf	??_demine& (0+255),f,b
  3182  006F4C  50F4               	movf	244,w,c
  3183  006F4E  23BA               	addwfc	(??_demine+1)& (0+255),f,b
  3184  006F50  0100               	movlb	0	; force () banked
  3185  006F52  51BD               	movf	demine@x& (0+255),w,b
  3186  006F54  0100               	movlb	0	; force () banked
  3187  006F56  25B9               	addwf	??_demine& (0+255),w,b
  3188  006F58  6ED9               	movwf	fsr2l,c
  3189  006F5A  0100               	movlb	0	; force () banked
  3190  006F5C  0E00               	movlw	0
  3191  006F5E  0100               	movlb	0	; force () banked
  3192  006F60  21BA               	addwfc	(??_demine+1)& (0+255),w,b
  3193  006F62  6EDA               	movwf	fsr2h,c
  3194  006F64  0100               	movlb	0	; force () banked
  3195  006F66  51B8               	movf	demine@y& (0+255),w,b
  3196  006F68  0D15               	mullw	21
  3197  006F6A  0E00               	movlw	low _m_tabVue
  3198  006F6C  0100               	movlb	0	; force () banked
  3199  006F6E  6FBB               	movwf	(??_demine+2)& (0+255),b
  3200  006F70  0E01               	movlw	high _m_tabVue
  3201  006F72  6FBC               	movwf	(??_demine+3)& (0+255),b
  3202  006F74  50F3               	movf	243,w,c
  3203  006F76  27BB               	addwf	(??_demine+2)& (0+255),f,b
  3204  006F78  50F4               	movf	244,w,c
  3205  006F7A  23BC               	addwfc	(??_demine+3)& (0+255),f,b
  3206  006F7C  0100               	movlb	0	; force () banked
  3207  006F7E  51BD               	movf	demine@x& (0+255),w,b
  3208  006F80  0100               	movlb	0	; force () banked
  3209  006F82  25BB               	addwf	(??_demine+2)& (0+255),w,b
  3210  006F84  6EE1               	movwf	fsr1l,c
  3211  006F86  0100               	movlb	0	; force () banked
  3212  006F88  0E00               	movlw	0
  3213  006F8A  0100               	movlb	0	; force () banked
  3214  006F8C  21BC               	addwfc	(??_demine+3)& (0+255),w,b
  3215  006F8E  6EE2               	movwf	fsr1h,c
  3216  006F90  CFDF FFE7          	movff	indf2,indf1
  3217  006F94                     
  3218                           ; BSR set to: 0
  3219  006F94  0012               	return		;funcret
  3220  006F96                     __end_of_demine:
  3221                           	opt callstack 0
  3222                           
  3223 ;; *************** function _afficheTabVue *****************
  3224 ;; Defined at:
  3225 ;;		line 120 in file "main.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  i               2    9[BANK0 ] int 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         0       0       0       0       0       0       0
  3240 ;;      Locals:         0       2       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0
  3242 ;;      Totals:         0       2       0       0       0       0       0
  3243 ;;Total ram usage:        2 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    5
  3246 ;; This function calls:
  3247 ;;		___wmul
  3248 ;;		_lcd_gotoXY
  3249 ;;		_lcd_putMessage
  3250 ;; This function is called by:
  3251 ;;		_main
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text17
  3256  00714A                     __ptext17:
  3257                           	opt callstack 0
  3258  00714A                     _afficheTabVue:
  3259                           	opt callstack 25
  3260  00714A                     
  3261                           ;main.c: 122: for(int i=0;i<4;i++)
  3262  00714A  0E00               	movlw	0
  3263  00714C  0100               	movlb	0	; force () banked
  3264  00714E  6FC2               	movwf	(afficheTabVue@i+1)& (0+255),b
  3265  007150  0E00               	movlw	0
  3266  007152  6FC1               	movwf	afficheTabVue@i& (0+255),b
  3267  007154                     
  3268                           ; BSR set to: 0
  3269  007154  0100               	movlb	0	; force () banked
  3270  007156  BFC2               	btfsc	(afficheTabVue@i+1)& (0+255),7,b
  3271  007158  EFB7  F038         	goto	u1081
  3272  00715C  51C2               	movf	(afficheTabVue@i+1)& (0+255),w,b
  3273  00715E  E109               	bnz	u1080
  3274  007160  0E04               	movlw	4
  3275  007162  5DC1               	subwf	afficheTabVue@i& (0+255),w,b
  3276  007164  A0D8               	btfss	status,0,c
  3277  007166  EFB7  F038         	goto	u1081
  3278  00716A  EFB9  F038         	goto	u1080
  3279  00716E                     u1081:
  3280  00716E  EFBB  F038         	goto	l2032
  3281  007172                     u1080:
  3282  007172  EFEB  F038         	goto	l88
  3283  007176                     l2032:
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 123: {;main.c: 124: lcd_gotoXY(1,i+1);
  3287  007176  0100               	movlb	0	; force () banked
  3288  007178  29C1               	incf	afficheTabVue@i& (0+255),w,b
  3289  00717A  0100               	movlb	0	; force () banked
  3290  00717C  6FBB               	movwf	lcd_gotoXY@y& (0+255),b
  3291  00717E  0E01               	movlw	1
  3292  007180  EC6C  F038         	call	_lcd_gotoXY
  3293  007184                     
  3294                           ;main.c: 125: lcd_putMessage(m_tabVue[i]);
  3295  007184  C0C1  F0B8         	movff	afficheTabVue@i,___wmul@multiplier
  3296  007188  C0C2  F0B9         	movff	afficheTabVue@i+1,___wmul@multiplier+1
  3297  00718C  0E00               	movlw	0
  3298  00718E  0100               	movlb	0	; force () banked
  3299  007190  6FBB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3300  007192  0E15               	movlw	21
  3301  007194  6FBA               	movwf	___wmul@multiplicand& (0+255),b
  3302  007196  EC0A  F036         	call	___wmul	;wreg free
  3303  00719A  0E00               	movlw	low _m_tabVue
  3304  00719C  0100               	movlb	0	; force () banked
  3305  00719E  25B8               	addwf	?___wmul& (0+255),w,b
  3306  0071A0  0100               	movlb	0	; force () banked
  3307  0071A2  6FBE               	movwf	lcd_putMessage@chaine& (0+255),b
  3308  0071A4  0E01               	movlw	high _m_tabVue
  3309  0071A6  0100               	movlb	0	; force () banked
  3310  0071A8  21B9               	addwfc	(?___wmul+1)& (0+255),w,b
  3311  0071AA  0100               	movlb	0	; force () banked
  3312  0071AC  6FBF               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  3313  0071AE  ECC9  F036         	call	_lcd_putMessage	;wreg free
  3314  0071B2  0100               	movlb	0	; force () banked
  3315  0071B4  4BC1               	infsnz	afficheTabVue@i& (0+255),f,b
  3316  0071B6  2BC2               	incf	(afficheTabVue@i+1)& (0+255),f,b
  3317  0071B8                     
  3318                           ; BSR set to: 0
  3319  0071B8  0100               	movlb	0	; force () banked
  3320  0071BA  BFC2               	btfsc	(afficheTabVue@i+1)& (0+255),7,b
  3321  0071BC  EFE9  F038         	goto	u1091
  3322  0071C0  51C2               	movf	(afficheTabVue@i+1)& (0+255),w,b
  3323  0071C2  E109               	bnz	u1090
  3324  0071C4  0E04               	movlw	4
  3325  0071C6  5DC1               	subwf	afficheTabVue@i& (0+255),w,b
  3326  0071C8  A0D8               	btfss	status,0,c
  3327  0071CA  EFE9  F038         	goto	u1091
  3328  0071CE  EFEB  F038         	goto	u1090
  3329  0071D2                     u1091:
  3330  0071D2  EFBB  F038         	goto	l2032
  3331  0071D6                     u1090:
  3332  0071D6                     l88:
  3333                           
  3334                           ; BSR set to: 0
  3335  0071D6  0012               	return		;funcret
  3336  0071D8                     __end_of_afficheTabVue:
  3337                           	opt callstack 0
  3338                           
  3339 ;; *************** function _lcd_putMessage *****************
  3340 ;; Defined at:
  3341 ;;		line 429 in file "Lcd4Lignes.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  chaine          2    6[BANK0 ] PTR const unsigned char 
  3344 ;;		 -> m_tabVue(84), 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  j               1    8[BANK0 ] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3356 ;;      Params:         0       2       0       0       0       0       0
  3357 ;;      Locals:         0       1       0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0
  3359 ;;      Totals:         0       3       0       0       0       0       0
  3360 ;;Total ram usage:        3 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    4
  3363 ;; This function calls:
  3364 ;;		_lcd_ecritChar
  3365 ;; This function is called by:
  3366 ;;		_afficheTabVue
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text18
  3371  006D92                     __ptext18:
  3372                           	opt callstack 0
  3373  006D92                     _lcd_putMessage:
  3374                           	opt callstack 25
  3375  006D92                     
  3376                           ;Lcd4Lignes.c: 431: unsigned char j;;Lcd4Lignes.c: 433: for(j = 0; chaine[j] != 0; j++)
  3377  006D92  0E00               	movlw	0
  3378  006D94  0100               	movlb	0	; force () banked
  3379  006D96  6FC0               	movwf	lcd_putMessage@j& (0+255),b
  3380  006D98  EFDD  F036         	goto	l1790
  3381  006D9C                     l1786:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Lcd4Lignes.c: 434: lcd_ecritChar(chaine[j]);
  3385  006D9C  0100               	movlb	0	; force () banked
  3386  006D9E  51C0               	movf	lcd_putMessage@j& (0+255),w,b
  3387  006DA0  0100               	movlb	0	; force () banked
  3388  006DA2  25BE               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3389  006DA4  6ED9               	movwf	fsr2l,c
  3390  006DA6  0100               	movlb	0	; force () banked
  3391  006DA8  0E00               	movlw	0
  3392  006DAA  0100               	movlb	0	; force () banked
  3393  006DAC  21BF               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3394  006DAE  6EDA               	movwf	fsr2h,c
  3395  006DB0  50DF               	movf	indf2,w,c
  3396  006DB2  EC19  F037         	call	_lcd_ecritChar
  3397  006DB6  0100               	movlb	0	; force () banked
  3398  006DB8  2BC0               	incf	lcd_putMessage@j& (0+255),f,b
  3399  006DBA                     l1790:
  3400                           
  3401                           ; BSR set to: 0
  3402  006DBA  0100               	movlb	0	; force () banked
  3403  006DBC  51C0               	movf	lcd_putMessage@j& (0+255),w,b
  3404  006DBE  0100               	movlb	0	; force () banked
  3405  006DC0  25BE               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3406  006DC2  6ED9               	movwf	fsr2l,c
  3407  006DC4  0100               	movlb	0	; force () banked
  3408  006DC6  0E00               	movlw	0
  3409  006DC8  0100               	movlb	0	; force () banked
  3410  006DCA  21BF               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3411  006DCC  6EDA               	movwf	fsr2h,c
  3412  006DCE  50DF               	movf	indf2,w,c
  3413  006DD0  A4D8               	btfss	status,2,c
  3414  006DD2  EFED  F036         	goto	u731
  3415  006DD6  EFEF  F036         	goto	u730
  3416  006DDA                     u731:
  3417  006DDA  EFCE  F036         	goto	l1786
  3418  006DDE                     u730:
  3419  006DDE                     
  3420                           ; BSR set to: 0
  3421  006DDE  0012               	return		;funcret
  3422  006DE0                     __end_of_lcd_putMessage:
  3423                           	opt callstack 0
  3424                           
  3425 ;; *************** function _lcd_ecritChar *****************
  3426 ;; Defined at:
  3427 ;;		line 401 in file "Lcd4Lignes.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  car             1    wreg     unsigned char 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  car             1    3[BANK0 ] unsigned char 
  3432 ;;  posRam          1    4[BANK0 ] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3442 ;;      Params:         0       0       0       0       0       0       0
  3443 ;;      Locals:         0       2       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0
  3445 ;;      Totals:         0       2       0       0       0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    3
  3449 ;; This function calls:
  3450 ;;		_lcd_wrCom
  3451 ;;		_lcd_wrData
  3452 ;; This function is called by:
  3453 ;;		_lcd_putMessage
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text19
  3458  006E32                     __ptext19:
  3459                           	opt callstack 0
  3460  006E32                     _lcd_ecritChar:
  3461                           	opt callstack 25
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;incstack = 0
  3465                           ;lcd_ecritChar@car stored from wreg
  3466  006E32  0100               	movlb	0	; force () banked
  3467  006E34  6FBB               	movwf	lcd_ecritChar@car& (0+255),b
  3468  006E36                     
  3469                           ;Lcd4Lignes.c: 403: unsigned char posRam;;Lcd4Lignes.c: 405: posRam = lcd_wrData(car);
  3470  006E36  0100               	movlb	0	; force () banked
  3471  006E38  51BB               	movf	lcd_ecritChar@car& (0+255),w,b
  3472  006E3A  EC48  F036         	call	_lcd_wrData
  3473  006E3E  0100               	movlb	0	; force () banked
  3474  006E40  6FBC               	movwf	lcd_ecritChar@posRam& (0+255),b
  3475                           
  3476                           ;Lcd4Lignes.c: 406: switch(posRam)
  3477  006E42  EF32  F037         	goto	l1752
  3478  006E46                     l1744:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;Lcd4Lignes.c: 409: lcd_wrCom(0xC0|0x80);
  3482  006E46  0EC0               	movlw	192
  3483  006E48  EC00  F038         	call	_lcd_wrCom
  3484                           
  3485                           ;Lcd4Lignes.c: 410: break;
  3486  006E4C  EF42  F037         	goto	l219
  3487  006E50                     l1746:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;Lcd4Lignes.c: 412: lcd_wrCom(0x94|0x80);
  3491  006E50  0E94               	movlw	148
  3492  006E52  EC00  F038         	call	_lcd_wrCom
  3493                           
  3494                           ;Lcd4Lignes.c: 413: break;
  3495  006E56  EF42  F037         	goto	l219
  3496  006E5A                     l1748:
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;Lcd4Lignes.c: 415: lcd_wrCom(0xD4|0x80);
  3500  006E5A  0ED4               	movlw	212
  3501  006E5C  EC00  F038         	call	_lcd_wrCom
  3502                           
  3503                           ;Lcd4Lignes.c: 416: break;
  3504  006E60  EF42  F037         	goto	l219
  3505  006E64                     l1752:
  3506                           
  3507                           ; BSR set to: 0
  3508  006E64  0100               	movlb	0	; force () banked
  3509  006E66  51BC               	movf	lcd_ecritChar@posRam& (0+255),w,b
  3510                           
  3511                           ; Switch size 1, requested type "simple"
  3512                           ; Number of cases is 3, Range of values is 148 to 212
  3513                           ; switch strategies available:
  3514                           ; Name         Instructions Cycles
  3515                           ; simple_byte           10     6 (average)
  3516                           ;	Chosen strategy is simple_byte
  3517  006E68  0A94               	xorlw	148	; case 148
  3518  006E6A  B4D8               	btfsc	status,2,c
  3519  006E6C  EF23  F037         	goto	l1744
  3520  006E70  0A54               	xorlw	84	; case 192
  3521  006E72  B4D8               	btfsc	status,2,c
  3522  006E74  EF2D  F037         	goto	l1748
  3523  006E78  0A14               	xorlw	20	; case 212
  3524  006E7A  B4D8               	btfsc	status,2,c
  3525  006E7C  EF28  F037         	goto	l1746
  3526  006E80  EF42  F037         	goto	l219
  3527  006E84                     l219:
  3528  006E84  0012               	return		;funcret
  3529  006E86                     __end_of_lcd_ecritChar:
  3530                           	opt callstack 0
  3531                           
  3532 ;; *************** function _lcd_wrData *****************
  3533 ;; Defined at:
  3534 ;;		line 230 in file "Lcd4Lignes.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  caractere       1    wreg     unsigned char 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  caractere       1    2[BANK0 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      unsigned char 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3548 ;;      Params:         0       0       0       0       0       0       0
  3549 ;;      Locals:         0       1       0       0       0       0       0
  3550 ;;      Temps:          0       0       0       0       0       0       0
  3551 ;;      Totals:         0       1       0       0       0       0       0
  3552 ;;Total ram usage:        1 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    2
  3555 ;; This function calls:
  3556 ;;		_lcd_busy
  3557 ;;		_lcd_ecrireDonnees
  3558 ;;		_lcd_strobeEnableBit
  3559 ;; This function is called by:
  3560 ;;		_lcd_ecritChar
  3561 ;;		_lcd_initCGRam
  3562 ;;		_lcd_effaceChar
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text20
  3567  006C90                     __ptext20:
  3568                           	opt callstack 0
  3569  006C90                     _lcd_wrData:
  3570                           	opt callstack 26
  3571                           
  3572                           ;incstack = 0
  3573                           ;lcd_wrData@caractere stored from wreg
  3574  006C90  0100               	movlb	0	; force () banked
  3575  006C92  6FBA               	movwf	lcd_wrData@caractere& (0+255),b
  3576  006C94                     
  3577                           ;Lcd4Lignes.c: 232: lcd_busy();
  3578  006C94  EC82  F036         	call	_lcd_busy	;wreg free
  3579  006C98                     
  3580                           ;Lcd4Lignes.c: 233: TRISD = 0b00000000;
  3581  006C98  0E00               	movlw	0
  3582  006C9A  6E95               	movwf	149,c	;volatile
  3583  006C9C                     
  3584                           ;Lcd4Lignes.c: 236: PORTAbits.RA0 = 1;
  3585  006C9C  8080               	bsf	128,0,c	;volatile
  3586  006C9E                     
  3587                           ;Lcd4Lignes.c: 237: PORTAbits.RA1 = 0;
  3588  006C9E  9280               	bcf	128,1,c	;volatile
  3589  006CA0                     
  3590                           ;Lcd4Lignes.c: 239: lcd_ecrireDonnees(caractere >> 4);
  3591  006CA0  0100               	movlb	0	; force () banked
  3592  006CA2  39BA               	swapf	lcd_wrData@caractere& (0+255),w,b
  3593  006CA4  0B0F               	andlw	15
  3594  006CA6  ECFC  F035         	call	_lcd_ecrireDonnees
  3595  006CAA                     
  3596                           ;Lcd4Lignes.c: 240: lcd_strobeEnableBit();
  3597  006CAA  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  3598  006CAE                     
  3599                           ;Lcd4Lignes.c: 243: lcd_ecrireDonnees(caractere);
  3600  006CAE  0100               	movlb	0	; force () banked
  3601  006CB0  51BA               	movf	lcd_wrData@caractere& (0+255),w,b
  3602  006CB2  ECFC  F035         	call	_lcd_ecrireDonnees
  3603  006CB6                     
  3604                           ;Lcd4Lignes.c: 244: lcd_strobeEnableBit();
  3605  006CB6  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  3606  006CBA                     
  3607                           ;Lcd4Lignes.c: 247: TRISD = 0b00001111;
  3608  006CBA  0E0F               	movlw	15
  3609  006CBC  6E95               	movwf	149,c	;volatile
  3610  006CBE                     
  3611                           ;Lcd4Lignes.c: 248: _delay((unsigned long)((2)*(1000000/4000000.0)));
  3612                           ;Lcd4Lignes.c: 249: return(lcd_busy());
  3613  006CBE  EC82  F036         	call	_lcd_busy	;wreg free
  3614  006CC2  0012               	return		;funcret
  3615  006CC4                     __end_of_lcd_wrData:
  3616                           	opt callstack 0
  3617                           
  3618 ;; *************** function _lcd_gotoXY *****************
  3619 ;; Defined at:
  3620 ;;		line 356 in file "Lcd4Lignes.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  x               1    wreg     unsigned char 
  3623 ;;  y               1    3[BANK0 ] unsigned char 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  x               1    4[BANK0 ] unsigned char 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		wreg, status,2, status,0, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3635 ;;      Params:         0       1       0       0       0       0       0
  3636 ;;      Locals:         0       1       0       0       0       0       0
  3637 ;;      Temps:          0       0       0       0       0       0       0
  3638 ;;      Totals:         0       2       0       0       0       0       0
  3639 ;;Total ram usage:        2 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    3
  3642 ;; This function calls:
  3643 ;;		_lcd_wrCom
  3644 ;; This function is called by:
  3645 ;;		_afficheTabVue
  3646 ;;		_deplace
  3647 ;;		_lcd_effaceLigne
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text21
  3652  0070D8                     __ptext21:
  3653                           	opt callstack 0
  3654  0070D8                     _lcd_gotoXY:
  3655                           	opt callstack 26
  3656                           
  3657                           ;incstack = 0
  3658                           ;lcd_gotoXY@x stored from wreg
  3659  0070D8  0100               	movlb	0	; force () banked
  3660  0070DA  6FBC               	movwf	lcd_gotoXY@x& (0+255),b
  3661  0070DC                     
  3662                           ;Lcd4Lignes.c: 358: switch(y)
  3663  0070DC  EF90  F038         	goto	l1782
  3664  0070E0                     l1772:
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;Lcd4Lignes.c: 361: lcd_wrCom((x-1+0x80)|0x80);
  3668  0070E0  0100               	movlb	0	; force () banked
  3669  0070E2  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3670  0070E4  0F7F               	addlw	127
  3671  0070E6  0980               	iorlw	128
  3672  0070E8  EC00  F038         	call	_lcd_wrCom
  3673                           
  3674                           ;Lcd4Lignes.c: 362: break;
  3675  0070EC  EFA4  F038         	goto	l208
  3676  0070F0                     l1774:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;Lcd4Lignes.c: 364: lcd_wrCom((x-1+0xC0)|0x80);
  3680  0070F0  0100               	movlb	0	; force () banked
  3681  0070F2  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3682  0070F4  0FBF               	addlw	191
  3683  0070F6  0980               	iorlw	128
  3684  0070F8  EC00  F038         	call	_lcd_wrCom
  3685                           
  3686                           ;Lcd4Lignes.c: 365: break;
  3687  0070FC  EFA4  F038         	goto	l208
  3688  007100                     l1776:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Lcd4Lignes.c: 367: lcd_wrCom((x-1+0x94)|0x80);
  3692  007100  0100               	movlb	0	; force () banked
  3693  007102  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3694  007104  0F93               	addlw	147
  3695  007106  0980               	iorlw	128
  3696  007108  EC00  F038         	call	_lcd_wrCom
  3697                           
  3698                           ;Lcd4Lignes.c: 368: break;
  3699  00710C  EFA4  F038         	goto	l208
  3700  007110                     l1778:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;Lcd4Lignes.c: 370: lcd_wrCom((x-1+0xD4)|0x80);
  3704  007110  0100               	movlb	0	; force () banked
  3705  007112  51BC               	movf	lcd_gotoXY@x& (0+255),w,b
  3706  007114  0FD3               	addlw	211
  3707  007116  0980               	iorlw	128
  3708  007118  EC00  F038         	call	_lcd_wrCom
  3709                           
  3710                           ;Lcd4Lignes.c: 371: break;
  3711  00711C  EFA4  F038         	goto	l208
  3712  007120                     l1782:
  3713  007120  0100               	movlb	0	; force () banked
  3714  007122  51BB               	movf	lcd_gotoXY@y& (0+255),w,b
  3715                           
  3716                           ; Switch size 1, requested type "simple"
  3717                           ; Number of cases is 4, Range of values is 1 to 4
  3718                           ; switch strategies available:
  3719                           ; Name         Instructions Cycles
  3720                           ; simple_byte           13     7 (average)
  3721                           ;	Chosen strategy is simple_byte
  3722  007124  0A01               	xorlw	1	; case 1
  3723  007126  B4D8               	btfsc	status,2,c
  3724  007128  EF70  F038         	goto	l1772
  3725  00712C  0A03               	xorlw	3	; case 2
  3726  00712E  B4D8               	btfsc	status,2,c
  3727  007130  EF78  F038         	goto	l1774
  3728  007134  0A01               	xorlw	1	; case 3
  3729  007136  B4D8               	btfsc	status,2,c
  3730  007138  EF80  F038         	goto	l1776
  3731  00713C  0A07               	xorlw	7	; case 4
  3732  00713E  B4D8               	btfsc	status,2,c
  3733  007140  EF88  F038         	goto	l1778
  3734  007144  EFA4  F038         	goto	l208
  3735  007148                     l208:
  3736  007148  0012               	return		;funcret
  3737  00714A                     __end_of_lcd_gotoXY:
  3738                           	opt callstack 0
  3739                           
  3740 ;; *************** function _lcd_wrCom *****************
  3741 ;; Defined at:
  3742 ;;		line 198 in file "Lcd4Lignes.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  commande        1    wreg     unsigned char 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  commande        1    2[BANK0 ] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      unsigned char 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3756 ;;      Params:         0       0       0       0       0       0       0
  3757 ;;      Locals:         0       1       0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0
  3759 ;;      Totals:         0       1       0       0       0       0       0
  3760 ;;Total ram usage:        1 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    2
  3763 ;; This function calls:
  3764 ;;		_lcd_busy
  3765 ;;		_lcd_ecrireDonnees
  3766 ;;		_lcd_strobeEnableBit
  3767 ;; This function is called by:
  3768 ;;		_lcd_init
  3769 ;;		_lcd_curseurHome
  3770 ;;		_lcd_gotoXY
  3771 ;;		_lcd_ecritChar
  3772 ;;		_lcd_initCGRam
  3773 ;;		_lcd_effaceAffichage
  3774 ;;		_lcd_cacheCurseur
  3775 ;;		_lcd_montreCurseur
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text22
  3780  007000                     __ptext22:
  3781                           	opt callstack 0
  3782  007000                     _lcd_wrCom:
  3783                           	opt callstack 27
  3784                           
  3785                           ;incstack = 0
  3786                           ;lcd_wrCom@commande stored from wreg
  3787  007000  0100               	movlb	0	; force () banked
  3788  007002  6FBA               	movwf	lcd_wrCom@commande& (0+255),b
  3789  007004                     
  3790                           ;Lcd4Lignes.c: 200: lcd_busy();
  3791  007004  EC82  F036         	call	_lcd_busy	;wreg free
  3792  007008                     
  3793                           ;Lcd4Lignes.c: 202: TRISD = 0b00000000;
  3794  007008  0E00               	movlw	0
  3795  00700A  6E95               	movwf	149,c	;volatile
  3796  00700C                     
  3797                           ;Lcd4Lignes.c: 205: PORTAbits.RA0 = 0;
  3798  00700C  9080               	bcf	128,0,c	;volatile
  3799  00700E                     
  3800                           ;Lcd4Lignes.c: 206: PORTAbits.RA1 = 0;
  3801  00700E  9280               	bcf	128,1,c	;volatile
  3802  007010                     
  3803                           ;Lcd4Lignes.c: 208: lcd_ecrireDonnees(commande >> 4);
  3804  007010  0100               	movlb	0	; force () banked
  3805  007012  39BA               	swapf	lcd_wrCom@commande& (0+255),w,b
  3806  007014  0B0F               	andlw	15
  3807  007016  ECFC  F035         	call	_lcd_ecrireDonnees
  3808  00701A                     
  3809                           ;Lcd4Lignes.c: 209: lcd_strobeEnableBit();
  3810  00701A  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  3811  00701E                     
  3812                           ;Lcd4Lignes.c: 212: lcd_ecrireDonnees(commande);
  3813  00701E  0100               	movlb	0	; force () banked
  3814  007020  51BA               	movf	lcd_wrCom@commande& (0+255),w,b
  3815  007022  ECFC  F035         	call	_lcd_ecrireDonnees
  3816  007026                     
  3817                           ;Lcd4Lignes.c: 213: lcd_strobeEnableBit();
  3818  007026  ECEC  F035         	call	_lcd_strobeEnableBit	;wreg free
  3819  00702A                     
  3820                           ;Lcd4Lignes.c: 214: _delay((unsigned long)((40)*(1000000/4000000.0)));
  3821  00702A  0E03               	movlw	3
  3822  00702C                     u1357:
  3823  00702C  2EE8               	decfsz	wreg,f,c
  3824  00702E  D7FE               	bra	u1357
  3825  007030  F000               	nop	
  3826  007032                     
  3827                           ;Lcd4Lignes.c: 216: if ((commande == 0x01) || commande == 0x02)
  3828  007032  0100               	movlb	0	; force () banked
  3829  007034  05BA               	decf	lcd_wrCom@commande& (0+255),w,b
  3830  007036  B4D8               	btfsc	status,2,c
  3831  007038  EF20  F038         	goto	u691
  3832  00703C  EF22  F038         	goto	u690
  3833  007040                     u691:
  3834  007040  EF2C  F038         	goto	l1702
  3835  007044                     u690:
  3836  007044                     
  3837                           ; BSR set to: 0
  3838  007044  0E02               	movlw	2
  3839  007046  0100               	movlb	0	; force () banked
  3840  007048  19BA               	xorwf	lcd_wrCom@commande& (0+255),w,b
  3841  00704A  A4D8               	btfss	status,2,c
  3842  00704C  EF2A  F038         	goto	u701
  3843  007050  EF2C  F038         	goto	u700
  3844  007054                     u701:
  3845  007054  EF31  F038         	goto	l1704
  3846  007058                     u700:
  3847  007058                     l1702:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;Lcd4Lignes.c: 217: _delay((unsigned long)((2)*(1000000/4000.0)));
  3851  007058  0EA6               	movlw	166
  3852  00705A                     u1367:
  3853  00705A  2EE8               	decfsz	wreg,f,c
  3854  00705C  D7FE               	bra	u1367
  3855  00705E  F000 F000          	nop2	
  3856  007062                     l1704:
  3857                           
  3858                           ;Lcd4Lignes.c: 219: TRISD = 0b00001111;
  3859  007062  0E0F               	movlw	15
  3860  007064  6E95               	movwf	149,c	;volatile
  3861  007066                     
  3862                           ;Lcd4Lignes.c: 221: return(lcd_busy());
  3863  007066  EC82  F036         	call	_lcd_busy	;wreg free
  3864  00706A  0012               	return		;funcret
  3865  00706C                     __end_of_lcd_wrCom:
  3866                           	opt callstack 0
  3867                           
  3868 ;; *************** function _lcd_strobeEnableBit *****************
  3869 ;; Defined at:
  3870 ;;		line 473 in file "Lcd4Lignes.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		None
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3884 ;;      Params:         0       0       0       0       0       0       0
  3885 ;;      Locals:         0       0       0       0       0       0       0
  3886 ;;      Temps:          0       0       0       0       0       0       0
  3887 ;;      Totals:         0       0       0       0       0       0       0
  3888 ;;Total ram usage:        0 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_lcd_wrCom
  3894 ;;		_lcd_wrData
  3895 ;;		_lcd_resetSequence
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text23
  3900  006BD8                     __ptext23:
  3901                           	opt callstack 0
  3902  006BD8                     _lcd_strobeEnableBit:
  3903                           	opt callstack 28
  3904  006BD8                     
  3905                           ;Lcd4Lignes.c: 475: PORTAbits.RA2 = 1;
  3906  006BD8  8480               	bsf	128,2,c	;volatile
  3907                           
  3908                           ;Lcd4Lignes.c: 476: __nop();
  3909  006BDA  F000               	nop	
  3910                           
  3911                           ;Lcd4Lignes.c: 477: PORTAbits.RA2 = 0;
  3912  006BDC  9480               	bcf	128,2,c	;volatile
  3913  006BDE  0012               	return		;funcret
  3914  006BE0                     __end_of_lcd_strobeEnableBit:
  3915                           	opt callstack 0
  3916                           
  3917 ;; *************** function _lcd_ecrireDonnees *****************
  3918 ;; Defined at:
  3919 ;;		line 149 in file "Lcd4Lignes.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  donnee          1    wreg     unsigned char 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  donnee          1    1[BANK0 ] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3933 ;;      Params:         0       0       0       0       0       0       0
  3934 ;;      Locals:         0       1       0       0       0       0       0
  3935 ;;      Temps:          0       1       0       0       0       0       0
  3936 ;;      Totals:         0       2       0       0       0       0       0
  3937 ;;Total ram usage:        2 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_lcd_wrCom
  3943 ;;		_lcd_wrData
  3944 ;;		_lcd_resetSequence
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text24
  3949  006BF8                     __ptext24:
  3950                           	opt callstack 0
  3951  006BF8                     _lcd_ecrireDonnees:
  3952                           	opt callstack 28
  3953                           
  3954                           ;incstack = 0
  3955                           ;lcd_ecrireDonnees@donnee stored from wreg
  3956  006BF8  0100               	movlb	0	; force () banked
  3957  006BFA  6FB9               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  3958  006BFC                     
  3959                           ;Lcd4Lignes.c: 152: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  3960  006BFC  CF83 F0B8          	movff	3971,??_lcd_ecrireDonnees	;volatile
  3961  006C00  0EF0               	movlw	240
  3962  006C02  0100               	movlb	0	; force () banked
  3963  006C04  17B8               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  3964  006C06  0100               	movlb	0	; force () banked
  3965  006C08  51B9               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  3966  006C0A  0B0F               	andlw	15
  3967  006C0C  0100               	movlb	0	; force () banked
  3968  006C0E  11B8               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  3969  006C10  6E83               	movwf	131,c	;volatile
  3970  006C12                     
  3971                           ; BSR set to: 0
  3972  006C12  0012               	return		;funcret
  3973  006C14                     __end_of_lcd_ecrireDonnees:
  3974                           	opt callstack 0
  3975                           
  3976 ;; *************** function _lcd_busy *****************
  3977 ;; Defined at:
  3978 ;;		line 166 in file "Lcd4Lignes.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  adresse         1    1[BANK0 ] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      unsigned char 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         0       0       0       0       0       0       0
  3993 ;;      Locals:         0       1       0       0       0       0       0
  3994 ;;      Temps:          0       1       0       0       0       0       0
  3995 ;;      Totals:         0       2       0       0       0       0       0
  3996 ;;Total ram usage:        2 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    1
  3999 ;; This function calls:
  4000 ;;		_lcd_lireDonnees
  4001 ;; This function is called by:
  4002 ;;		_lcd_wrCom
  4003 ;;		_lcd_wrData
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text25
  4008  006D04                     __ptext25:
  4009                           	opt callstack 0
  4010  006D04                     _lcd_busy:
  4011                           	opt callstack 27
  4012  006D04                     
  4013                           ;Lcd4Lignes.c: 168: unsigned char adresse;;Lcd4Lignes.c: 170: PORTAbits.RA0 = 0;
  4014  006D04  9080               	bcf	128,0,c	;volatile
  4015                           
  4016                           ;Lcd4Lignes.c: 171: PORTAbits.RA1 = 1;
  4017  006D06  8280               	bsf	128,1,c	;volatile
  4018  006D08                     l170:
  4019                           
  4020                           ;Lcd4Lignes.c: 174: {;Lcd4Lignes.c: 175: PORTAbits.RA2 = 1;
  4021  006D08  8480               	bsf	128,2,c	;volatile
  4022                           
  4023                           ;Lcd4Lignes.c: 176: __nop();
  4024  006D0A  F000               	nop	
  4025  006D0C                     
  4026                           ;Lcd4Lignes.c: 177: adresse = lcd_lireDonnees() << 4;
  4027  006D0C  ECE9  F035         	call	_lcd_lireDonnees	;wreg free
  4028  006D10  0100               	movlb	0	; force () banked
  4029  006D12  6FB8               	movwf	??_lcd_busy& (0+255),b
  4030  006D14  39B8               	swapf	??_lcd_busy& (0+255),w,b
  4031  006D16  0BF0               	andlw	240
  4032  006D18  0100               	movlb	0	; force () banked
  4033  006D1A  6FB9               	movwf	lcd_busy@adresse& (0+255),b
  4034  006D1C                     
  4035                           ; BSR set to: 0
  4036                           ;Lcd4Lignes.c: 178: PORTAbits.RA2 = 0;
  4037  006D1C  9480               	bcf	128,2,c	;volatile
  4038  006D1E                     
  4039                           ;Lcd4Lignes.c: 180: PORTAbits.RA2 = 1;
  4040  006D1E  8480               	bsf	128,2,c	;volatile
  4041  006D20                     
  4042                           ;Lcd4Lignes.c: 181: __nop();
  4043  006D20  F000               	nop	
  4044                           
  4045                           ;Lcd4Lignes.c: 182: adresse |= lcd_lireDonnees();
  4046  006D22  ECE9  F035         	call	_lcd_lireDonnees	;wreg free
  4047  006D26  0100               	movlb	0	; force () banked
  4048  006D28  13B9               	iorwf	lcd_busy@adresse& (0+255),f,b
  4049  006D2A                     
  4050                           ; BSR set to: 0
  4051                           ;Lcd4Lignes.c: 183: PORTAbits.RA2 = 0;
  4052  006D2A  9480               	bcf	128,2,c	;volatile
  4053  006D2C                     
  4054                           ;Lcd4Lignes.c: 185: };Lcd4Lignes.c: 186: while(adresse&0x80);
  4055  006D2C  0100               	movlb	0	; force () banked
  4056  006D2E  BFB9               	btfsc	lcd_busy@adresse& (0+255),7,b
  4057  006D30  EF9C  F036         	goto	u681
  4058  006D34  EF9E  F036         	goto	u680
  4059  006D38                     u681:
  4060  006D38  EF84  F036         	goto	l170
  4061  006D3C                     u680:
  4062  006D3C                     
  4063                           ; BSR set to: 0
  4064                           ;Lcd4Lignes.c: 188: PORTAbits.RA1 = 0;
  4065  006D3C  9280               	bcf	128,1,c	;volatile
  4066  006D3E                     
  4067                           ; BSR set to: 0
  4068                           ;Lcd4Lignes.c: 189: return(adresse&0x7f);
  4069  006D3E  0100               	movlb	0	; force () banked
  4070  006D40  51B9               	movf	lcd_busy@adresse& (0+255),w,b
  4071  006D42  0B7F               	andlw	127
  4072  006D44                     
  4073                           ; BSR set to: 0
  4074  006D44  0012               	return		;funcret
  4075  006D46                     __end_of_lcd_busy:
  4076                           	opt callstack 0
  4077                           
  4078 ;; *************** function _lcd_lireDonnees *****************
  4079 ;; Defined at:
  4080 ;;		line 135 in file "Lcd4Lignes.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      unsigned char 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4094 ;;      Params:         0       0       0       0       0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0
  4097 ;;      Totals:         0       0       0       0       0       0       0
  4098 ;;Total ram usage:        0 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; This function calls:
  4101 ;;		Nothing
  4102 ;; This function is called by:
  4103 ;;		_lcd_busy
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text26
  4108  006BD2                     __ptext26:
  4109                           	opt callstack 0
  4110  006BD2                     _lcd_lireDonnees:
  4111                           	opt callstack 27
  4112  006BD2                     
  4113                           ;Lcd4Lignes.c: 138: return (PORTD & 0x0f);
  4114  006BD2  5083               	movf	131,w,c	;volatile
  4115  006BD4  0B0F               	andlw	15
  4116  006BD6  0012               	return		;funcret
  4117  006BD8                     __end_of_lcd_lireDonnees:
  4118                           	opt callstack 0
  4119                           
  4120 ;; *************** function ___wmul *****************
  4121 ;; Defined at:
  4122 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4125 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  product         2    4[BANK0 ] unsigned int 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  2    0[BANK0 ] unsigned int 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0, prodl, prodh
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4137 ;;      Params:         0       4       0       0       0       0       0
  4138 ;;      Locals:         0       2       0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0
  4140 ;;      Totals:         0       6       0       0       0       0       0
  4141 ;;Total ram usage:        6 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_initTabVue
  4147 ;;		_afficheTabVue
  4148 ;;		_calculToucheCombien
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           	psect	text27
  4153  006C14                     __ptext27:
  4154                           	opt callstack 0
  4155  006C14                     ___wmul:
  4156                           	opt callstack 28
  4157  006C14  0100               	movlb	0	; () banked
  4158  006C16  51B8               	movf	___wmul@multiplier& (0+255),w,b
  4159  006C18  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  4160  006C1A  CFF3 F0BC          	movff	prodl,___wmul@product
  4161  006C1E  CFF4 F0BD          	movff	prodh,___wmul@product+1
  4162  006C22  51B8               	movf	___wmul@multiplier& (0+255),w,b
  4163  006C24  03BB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4164  006C26  50F3               	movf	243,w,c
  4165  006C28  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  4166  006C2A  51B9               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4167  006C2C  03BA               	mulwf	___wmul@multiplicand& (0+255),b
  4168  006C2E  50F3               	movf	243,w,c
  4169  006C30  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
  4170  006C32                     
  4171                           ; BSR set to: 0
  4172  006C32  C0BC  F0B8         	movff	___wmul@product,?___wmul
  4173  006C36  C0BD  F0B9         	movff	___wmul@product+1,?___wmul+1
  4174  006C3A                     
  4175                           ; BSR set to: 0
  4176  006C3A  0012               	return		;funcret
  4177  006C3C                     __end_of___wmul:
  4178                           	opt callstack 0
  4179  0000                     
  4180                           	psect	param0
  4181  0000                     tosu	equ	0xFFF
  4182                           tosh	equ	0xFFE
  4183                           tosl	equ	0xFFD
  4184                           stkptr	equ	0xFFC
  4185                           pclatu	equ	0xFFB
  4186                           pclath	equ	0xFFA
  4187                           pcl	equ	0xFF9
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           indf0	equ	0xFEF
  4195                           postinc0	equ	0xFEE
  4196                           postdec0	equ	0xFED
  4197                           preinc0	equ	0xFEC
  4198                           plusw0	equ	0xFEB
  4199                           fsr0h	equ	0xFEA
  4200                           fsr0l	equ	0xFE9
  4201                           wreg	equ	0xFE8
  4202                           indf1	equ	0xFE7
  4203                           postinc1	equ	0xFE6
  4204                           postdec1	equ	0xFE5
  4205                           preinc1	equ	0xFE4
  4206                           plusw1	equ	0xFE3
  4207                           fsr1h	equ	0xFE2
  4208                           fsr1l	equ	0xFE1
  4209                           bsr	equ	0xFE0
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           preinc2	equ	0xFDC
  4214                           plusw2	equ	0xFDB
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        152
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     31     119
    BANK1           256      0     148
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabVue(BANK1[84]), 

    deplace@y	PTR unsigned char  size(2) Largest target is 1
		 -> main@posY(BANK0[1]), 

    deplace@x	PTR unsigned char  size(2) Largest target is 1
		 -> main@posX(BANK0[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_rempliMines
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _initTabVue->___wmul
    _deplace->_lcd_gotoXY
    _afficheTabVue->_lcd_putMessage
    _lcd_putMessage->___wmul
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11088
                                             28 BANK0      3     3      0
                      _afficheTabVue
                             _demine
                            _deplace
                         _initTabVue
                     _initialisation
                           _lcd_init
                   _metToucheCombien
                        _rempliMines
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                          8     6      2    1030
                                             20 BANK0      8     6      2
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     5     5      0    2942
                                             16 BANK0      5     5      0
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 10     6      4    2630
                                              6 BANK0     10     6      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           6     6      0    1989
                                              6 BANK0      6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _deplace                                              5     1      4    1045
                                              5 BANK0      5     1      4
                          _getAnalog
                         _lcd_gotoXY
 ---------------------------------------------------------------------------------
 (2) _getAnalog                                            2     2      0      15
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _demine                                               6     5      1     164
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _afficheTabVue                                        2     2      0    2970
                                              9 BANK0      2     2      0
                             ___wmul
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (2) _lcd_putMessage                                       3     1      2     479
                                              6 BANK0      3     1      2
                             ___wmul (ARG)
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (3) _lcd_ecritChar                                        2     2      0     313
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoXY                                           2     1      1     570
                                              3 BANK0      2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_wrCom                                            1     1      0     156
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (3) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             2     2      0      46
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (4) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1831
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _afficheTabVue
     ___wmul
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       ___wmul (ARG)
       _lcd_ecritChar (ARG)
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _demine
   _deplace
     _getAnalog
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _initTabVue
     ___wmul
   _initialisation
     _srand
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _metToucheCombien
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      94       6       57.8%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1F      77       4       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      14        0.0%
DATA                 0      0     10B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 12:02:29 2019

 __end_of_calculToucheCombien 7D40                            l71 722C                            l83 75AA  
                          l88 71D6                            l96 7498           ___wmul@multiplicand 00BA  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000  __size_of_lcd_strobeEnableBit 0008                           l105 7846  
                         l130 6F94                           l116 7D3E                           l142 6C8E  
                         l302 70C6                           l127 76E8                           l303 70D6  
                         l208 7148                           l241 6BDE                           l225 6DDE  
                         l145 6D90                           l170 6D08                           l171 6D3C  
                         l219 6E84                           l139 6C7E                           l164 6BD6  
                         l172 6D44                           l181 6CC2                           l238 7308  
                         l167 6C12                           l184 6FFE                           l193 6BE6  
                         l178 706A                           l291 6C3A                           l187 6C62  
                         l535 73BA                           l955 6BF6                           l958 6EDA  
                __CFG_CPB$OFF 000000                           u270 6C8C                           u271 6C88  
                __CFG_CPD$OFF 000000                           u700 7058                           u701 7054  
                         u710 708C                           u711 7088                           u800 79E8  
                         u720 70C6                           u801 79E4                           u721 70C2  
                         u730 6DDE                           u810 7A18                           u731 6DDA  
                         u811 7A14                           u900 7C74                           u820 7A82  
                         u740 78B4                           u901 7C70                           u821 7A7E  
                         u741 78B0                           u910 7CA4                           u830 7A9C  
                         u750 78CE                           u911 7CA0                           u831 7A98  
                         u751 78CA                           u680 6D3C                           u920 7D06  
                         u840 7B06                           u760 78E8                           u681 6D38  
                         u921 7D02                           u841 7B02                           u761 78E4  
                         u690 7044                           u930 7D36                           u850 7B20  
                         u770 7952                           u691 7040                           u931 7D32  
                         u851 7B1C                           u771 794E                           u940 7286  
                         u860 7B50                           u780 796C                           u941 7282  
                         u861 7B4C                           u781 7968                           u950 72A2  
                         u870 7BB2                           u790 79CE                           u951 729E  
                         u871 7BAE                           u791 79CA                           u960 72EE  
                         u880 7BE2                           u961 72EA                           u881 7BDE  
                         u970 7304                           u890 7C44                           u971 7300  
                         u891 7C40                           u980 731E                           u981 731A  
                         u990 7338                           u991 7334                  __CFG_BORV$18 000000  
                ___awmod@sign 00CB                   lcd_gotoXY@x 00BC                           wreg 000FE8  
                 lcd_gotoXY@y 00BB                  __CFG_LVP$OFF 000000                          l2000 6C5E  
                        l2010 74D0                          l2002 749A                          l1300 6C68  
                        l2100 7660                          l2020 755E                          l2004 74A4  
                        l1302 6C7C                          l2110 76C0                          l2102 7678  
                        l2022 7586                          l2014 74F2                          l2032 7176  
                        l1304 6C7C                          l2112 76CC                          l2104 7684  
                        l2024 758C                          l2016 753A                          l2008 74C6  
                        l2040 73BC                          l2034 7184                          l2026 714A  
                        l2114 6F38                          l1306 6C8C                          l2106 769C  
                        l2018 7540                          l2042 73C6                          l2050 7468  
                        l2130 71EC                          l2036 71B2                          l2028 7154  
                        l2108 76A8                          l2060 770C                          l2052 76EA  
                        l2044 73F6                          l2140 721E                          l2132 71F0  
                        l2124 71D8                          l2038 71B8                          l2070 77EA  
                        l2054 76F0                          l2046 7434                          l2134 71F4  
                        l2126 71E4                          l2080 75AC                          l2072 781A  
                        l2064 7722                          l2048 7464                          l2144 723A  
                        l2136 7202                          l2128 71E8                          l2090 760E  
                        l2082 75C6                          l2074 781E                          l2066 7760  
                        l2058 7706                          l2146 724A                          l2138 7206  
                        l1700 7044                          l2092 7618                          l2084 75D0  
                        l2068 77AC                          l2076 7830                          l2148 724E  
                        l1702 7058                          l2094 7632                          l2086 75EA  
                        l2078 7834                          l1704 7062                          l1720 6C9E  
                        l1712 6C94                          l2096 763C                          l2088 75F4  
                        l1800 7848                          l1650 6BFC                          l1706 7066  
                        l1730 6CB6                          l1722 6CA0                          l1714 6C98  
                        l2098 7654                          l1810 78EC                          l1802 784E  
                        l1660 6D1E                          l1652 6D04                          l1708 7066  
                        l1732 6CBA                          l1724 6CAA                          l1716 6C9C  
                        l1740 6BE0                          l1900 726E                          l1820 79E8  
                        l1812 7952                          l1804 78B4                          l1646 6BD2  
                        l1670 6D3E                          l1662 6D20                          l1654 6D0C  
                        l1734 6CBA                          l1726 6CAE                          l1718 6C9C  
                        l1742 6E36                          l1902 7274                          l1830 7AA0  
                        l1822 7A18                          l1814 796C                          l1806 78CE  
                        l1664 6D2A                          l1656 6D1C                          l1680 700C  
                        l1736 6CBE                          l1728 6CAE                          l1744 6E46  
                        l1752 6E64                          l1920 72F2                          l1912 72A6  
                        l1840 7BB2                          l1832 7B06                          l1824 7A1C  
                        l1816 7970                          l1808 78E8                          l1760 706C  
                        l1754 6C14                          l1666 6D2C                          l1658 6D1E  
                        l1674 6BD8                          l1690 701E                          l1682 700C  
                        l1770 70DC                          l1746 6E50                          l1914 72D8  
                        l1922 7304                          l1906 728A                          l1850 7CA4  
                        l1842 7BE2                          l1834 7B20                          l1826 7A82  
                        l1818 79CE                          l1930 7326                          l1762 707E  
                        l1756 6C32                          l1668 6D2C                          l1692 701E  
                        l1684 700E                          l1676 7004                          l1772 70E0  
                        l1748 6E5A                          l1916 72DC                          l1908 7290  
                        l1852 7CA8                          l1844 7BE6                          l1836 7B50  
                        l1828 7A9C                          l1940 735A                          l1932 732A  
                        l1924 730A                          l1764 708C                          l1694 7026  
                        l1686 7010                          l1678 7008                          l1774 70F0  
                        l1782 7120                          l1790 6DBA                          l1862 6BE8  
                        l1918 72EE                          l1870 6FB0                          l1854 7D06  
                        l1846 7C44                          l1838 7B54                          l1950 7394  
                        l1942 7362                          l1934 7338                          l1926 7310  
                        l1766 709C                          l1696 702A                          l1688 701A  
                        l1776 7100                          l1784 6D92                          l1960 6D46  
                        l1880 6FCA                          l1872 6FB2                          l1864 6F96  
                        l1856 7D36                          l1848 7C74                          l1944 7370  
                        l1952 739A                          l1936 7340                          l1928 731E  
                        l1768 70A6                          l1792 6E86                          l1698 7032  
                        l1778 7110                          l1786 6D9C                          l1970 6D68  
                        l1962 6D4E                          l1890 6FE8                          l1882 6FCE  
                        l1874 6FB8                          l1866 6F9A                          l1858 7D3A  
                        l1954 73AA                          l1946 7386                          l1938 7352  
                        l1794 6EBC                          l1788 6DB6                          l1980 6D78  
                        l1972 6D6A                          l1964 6D58                          l1892 6FEE  
                        l1884 6FD6                          l1876 6FBC                          l1868 6FAE  
                        l1956 73B2                          l1948 738E                          l1796 6ECE  
                        l1990 6D88                          l1982 6D7A                          l1974 6D6E  
                        l1966 6D5A                          l1894 6FF2                          l1886 6FDC  
                        l1878 6FC4                          l1992 6D8A                          l1984 6D7C  
                        l1976 6D70                          l1968 6D66                          l1896 6FFA  
                        l1888 6FE0                          l1994 6D8C                          l1986 6D7E  
                        l1978 6D74                          l1898 7268                          l1996 6D8E  
                        l1988 6D80                          l1998 6C3C                          u1000 7352  
                        u1001 734E                          u1010 7370                          u1011 736C  
                        u1020 7386                          u1100 7434                          u1021 7382  
                        u1101 7430                          u1030 73AA                          u1110 7498  
                        u1031 73A6                          u1111 7494                          u1200 760E  
                        u1040 74C2                          u1120 7702                          u1201 760A  
                        u1041 74BE                          u1121 76FE                          u1210 7632  
                        u1050 74EE                          u1130 771E                          u1211 762E  
                        u1051 74EA                          u1131 771A                          u1220 7654  
                        u1060 755E                          u1140 7760                          u1221 7650  
                        u1061 755A                          u1141 775C                          u1230 7678  
                        u1070 75AA                          u1150 77EA                          u1231 7674  
                        u1071 75A6                          u1151 77E6                          u1080 7172  
                        u1240 769C                          u1160 7830                          u1081 716E  
                        u1241 7698                          u1161 782C                          u1090 71D6  
                        u1250 76C0                          u1170 7846                          u1091 71D2  
                        u1251 76BC                          u1307 6FA2                          u1171 7842  
                        u1180 75C6                          u1181 75C2                          u1317 6FBE  
                        u1190 75EA                          u1270 722C                          u1191 75E6  
                        u1327 6FD0                          u1271 7228                          u1280 723A  
                        u1337 6FE2                          u1281 7236                          u1347 6FF4  
                        u1357 702C                          u1367 705A                          u1297 7256  
                        _RCIF 007CF5                          _TMR1 000FCE              ??_initialisation 00BA  
                        _main 71D8                          _rand 6E86                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0000               ?_lcd_putMessage 00BE                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               ??_lcd_ecritChar 00BB  
                       ?_main 00B8                         ?_rand 00C4               __end_of___awmod 73BC  
                       _ANSEL 000F7E                         _RCREG 000FAE                         _SPBRG 000FAF  
                       _PORTD 000F83                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISD 000F95                         _TXREG 000FAD                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
             __end_of_deplace 76EA           ___lmul@multiplicand 00BC                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             ??_lcd_initCGRam 00BB                         _randx 0060                         _srand 6BE8  
                       tablat 000FF5                         status 000FD8                __CFG_HFOFST$ON 000000  
              __CFG_PBADEN$ON 000000              _metToucheCombien 76EA               __initialization 6DE0  
                __end_of_main 7268                  __end_of_rand 6EDC          lcd_putMessage@chaine 00BE  
  calculToucheCombien@colonne 00C0                        ??_main 00D4                        ??_rand 00C6  
               __activetblptr 000003                        _ADCON1 000FC1                        _ADRESH 000FC4  
                      ?_srand 00B8                        _ANSELH 000F7F                   initTabVue@i 00C2  
                 initTabVue@j 00C0                __CFG_WDTEN$OFF 000000                  ?_rempliMines 00CC  
                      _SPBRGH 000FB0                __CFG_XINST$OFF 000000                lcd_initCGRam@i 00BD  
              lcd_initCGRam@j 00BE                getAnalog@canal 00B9              __end_of_lcd_busy 6D46  
            __end_of_lcd_init 6C64                        ___lmul 706C                        ___wmul 6C14  
              __CFG_STVREN$ON 000000                     ??___awmod 00CA                        _demine 6F34  
                      clear_0 6E26               ___awmod@divisor 00C8                     ??_deplace 00C1  
             ___awmod@counter 00CA                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                        srand@x 00B8        __size_of_afficheTabVue 008E  
           _lcd_resetSequence 6F96                    __accesstop 0060       __end_of__initialization 6E2C  
         _lcd_strobeEnableBit 6BD8            ?_lcd_resetSequence 00B8                 ___rparam_used 000000  
                __pidataBANK0 6EDC                  __pidataBANK1 6CC4           ??_lcd_resetSequence 00BA  
               __end_of_srand 6BF8          ?_lcd_strobeEnableBit 00B8            __size_of_getAnalog 002C  
          __size_of_lcd_wrCom 006C     __end_of_lcd_resetSequence 7000                       ??_srand 00BA  
    __size_of_lcd_lireDonnees 0006             _lcd_ecrireDonnees 6BF8                    __pbssBANK1 0100  
            ??_lcd_putMessage 00C0            ?_lcd_ecrireDonnees 00B8      __size_of_lcd_curseurHome 0008  
         ??_lcd_ecrireDonnees 00B8                       ?___lmul 00B8                       ?___wmul 00B8  
                     ?_demine 00B8                 _afficheTabVue 714A                ___lmul@product 00C0  
       ??_lcd_strobeEnableBit 00B8  __size_of_calculToucheCombien 04F8      __end_of_metToucheCombien 7848  
                  _lcd_gotoXY 70D8                    _lcd_wrData 6C90     __end_of_lcd_ecrireDonnees 6C14  
                   ?_lcd_busy 00B8                     ?_lcd_init 00B8       lcd_ecrireDonnees@donnee 00B9  
                  _m_tabMines 0064             __end_of_getAnalog 6C90          __size_of_rempliMines 00DE  
                     __Hparam 0000                       __Lparam 0000                    _initTabVue 749A  
           __end_of_lcd_wrCom 706C                ?_afficheTabVue 00B8               __size_of___lmul 006C  
                     ___awmod 730A               __size_of___wmul 0028               __size_of_demine 0062  
                     __pcinit 6DE0                     _ANSELbits 000F7E                       __ramtop 0600  
                     _deplace 75AC                       __ptext0 71D8                       __ptext1 73BC  
                     __ptext2 6E86                       __ptext3 706C                       __ptext4 730A  
                     __ptext5 76EA                       __ptext6 7848                       __ptext7 6C3C  
                     __ptext8 6F96                       __ptext9 7268         __end_of_lcd_ecritChar 6E86  
                   _T0CONbits 000FD5               lcd_busy@adresse 00B9                     _T1CONbits 000FCD  
            ___awmod@dividend 00C6                       demine@x 00BD                       demine@y 00B8  
            lcd_ecritChar@car 00BB                    ??_lcd_busy 00B8                    ??_lcd_init 00BF  
  __size_of_lcd_resetSequence 006A          end_of_initialization 6E2C         __end_of_lcd_initCGRam 730A  
           ??_lcd_lireDonnees 00B8                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_initialisation 004C  
           ??_lcd_curseurHome 00BB           lcd_ecritChar@posRam 00BC                     _PORTAbits 000F80  
                   _PORTBbits 000F81                   ?_lcd_gotoXY 00BB                     _TRISCbits 000F94  
                 ?_lcd_wrData 00B8    __size_of_lcd_ecrireDonnees 001C                     _TXSTAbits 000FAC  
             ??_afficheTabVue 00C1                   ?_initTabVue 00B8                __end_of___lmul 70D8  
              __end_of___wmul 6C3C                   _BAUDCONbits 000FB8                __end_of_demine 6F96  
         start_initialization 6DE0           _calculToucheCombien 7848           __size_of_lcd_gotoXY 0072  
calculToucheCombien@countMine 00C7                      ??___lmul 00C0                      ??___wmul 00BC  
               rempliMines@nb 00CC           __size_of_lcd_wrData 0034                      ??_demine 00B9  
                 __pdataBANK0 0060                   __pdataBANK1 0154              __CFG_LPT1OSC$OFF 000000  
        ?_calculToucheCombien 00BE                 __pcstackBANK0 00B8             ?_metToucheCombien 00B8  
         __size_of_initTabVue 0112            ??_metToucheCombien 00C8             __size_of_lcd_busy 0042  
           __size_of_lcd_init 0028             __CFG_CCP2MX$PORTC 000000                     _getAnalog 6C64  
 __end_of_lcd_strobeEnableBit 6BE0                _initialisation 6D46                      ?___awmod 00C6  
                    ?_deplace 00BD                     _lcd_wrCom 7000         ??_calculToucheCombien 00C2  
             _lcd_lireDonnees 6BD2           lcd_wrData@caractere 00BA                __size_of_srand 0010  
               ??_rempliMines 00CE               _lcd_curseurHome 6BE0                ___wmul@product 00BC  
      __end_of_initialisation 6D92                    ?_getAnalog 00B8              __CFG_WDTPS$32768 000000  
     __size_of_lcd_putMessage 004E                    ?_lcd_wrCom 00B8                    _ADCON0bits 000FC2  
                  _ADCON2bits 000FC0             ___wmul@multiplier 00B8                  ??_lcd_gotoXY 00BC  
                ??_lcd_wrData 00BA             lcd_wrCom@commande 00BA             ___lmul@multiplier 00B8  
                   copy_data0 6DF4                     copy_data1 6E14                      __Hparam0 0000  
      __size_of_lcd_ecritChar 0054                      __Lparam0 0000               ?_initialisation 00B8  
         __end_of_rempliMines 749A                  ??_initTabVue 00BE            __CFG_BOREN$SBORDIS 000000  
                rempliMines@i 00D1                  rempliMines@x 00D2                  rempliMines@y 00D3  
          __end_of_lcd_gotoXY 714A            __end_of_lcd_wrData 6CC4              __size_of___awmod 00B2  
      __size_of_lcd_initCGRam 00A2               lcd_putMessage@j 00C0              __size_of_deplace 013E  
     __end_of_lcd_lireDonnees 6BD8                      _matCGRAM 0154       __end_of_lcd_curseurHome 6BE8  
                    __ptext10 6BE0                      __ptext11 6D46                      __ptext20 6C90  
                    __ptext12 6BE8                      __ptext21 70D8                      __ptext13 749A  
                    __ptext22 7000                      __ptext14 75AC                      __ptext23 6BD8  
                    __ptext15 6C64                      __ptext24 6BF8                      __ptext16 6F34  
                    __ptext25 6D04                      __ptext17 714A                      __ptext26 6BD2  
                    __ptext18 6D92                      __ptext27 6C14                      __ptext19 6E32  
           metToucheCombien@i 00CB             metToucheCombien@j 00CC                      _lcd_busy 6D04  
                    _lcd_init 6C3C            __end_of_initTabVue 75AC      calculToucheCombien@ligne 00BE  
                    _m_tabVue 0100                 __size_of_main 0090                 __size_of_rand 0056  
                    deplace@x 00BD                      deplace@y 00BF                   ??_getAnalog 00B8  
       __end_of_afficheTabVue 71D8                      main@posX 00D6                      main@posY 00D5  
                 ??_lcd_wrCom 00BA                 _lcd_ecritChar 6E32                    _INTCONbits 000FF2  
              afficheTabVue@i 00C1                 _lcd_initCGRam 7268                   _rempliMines 73BC  
   __size_of_metToucheCombien 015E                _lcd_putMessage 6D92                ?_lcd_ecritChar 00B8  
            ?_lcd_lireDonnees 00B8              ?_lcd_curseurHome 00B8                ?_lcd_initCGRam 00B8  
           __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 6DE0  
